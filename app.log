{"timestamp": "2025-07-28 16:11:17", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:11:19", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:11:19", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:11:19", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:11:20", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:11:29", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:11:31", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:11:40", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:11:40", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:11:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get the total number of repair orders (RO) created in Jan'25, section: Mahindra-PoC, database: GCP"}
{"timestamp": "2025-07-28 16:11:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 16:11:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:11:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Get the total number of repair orders (RO) created in January 2025."
}"}
{"timestamp": "2025-07-28 16:11:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:11:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Get the total number of repair orders (RO) created in January 2025.', [{'role': 'user', 'content': 'Get the total number of repair orders (RO) created in January 2025.'}], 'gpt-4.1-mini', 'Mahindra-PoC', 'GCP')"}
{"timestamp": "2025-07-28 16:11:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:11:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-07-28 16:11:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query counts the total number of repair orders created in January 2025 from the MH_RO_HDR_DETAILS table (aliased as ROHDR). It filters the records where the RO_DATE is between January 1, 2025 and January 31, 2025 inclusive.",
  "query": "SELECT COUNT(`ROHDR`.`RO_ID`) AS `TOTAL_REPAIR_ORDERS` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31';",
  "error": null
}"}
{"timestamp": "2025-07-28 16:11:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 16:11:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query counts the total number of repair orders created in January 2025 from the MH_RO_HDR_DETAILS table (aliased as ROHDR). It filters the records where the RO_DATE is between January 1, 2025 and January 31, 2025 inclusive."}
{"timestamp": "2025-07-28 16:12:11", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Mahindra-PoC, database: GCP"}
{"timestamp": "2025-07-28 16:12:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Get the total number of repair orders (RO) created in January 2025."}
{"timestamp": "2025-07-28 16:12:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:12:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 16:12:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:12:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Find the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Mahindra-PoC', 'GCP')"}
{"timestamp": "2025-07-28 16:12:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:12:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: What is the total consumption (quantity and value) of top 5 common parts for the Diesel segment vehicles in the last quarter?
  query: WITH LASTQUARTERDATA AS ( SELECT DATE_TRUNC(`ROHDR`.`RO_DATE`, QUARTER) AS `_QUARTER_START` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 QUARTER) AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 DAY) ), FILTEREDRO AS ( SELECT `ROHDR`.`SV_RO_BILL_HDR_SK`, `ROHDR`.`SEGMNT_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 QUARTER) AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 DAY) AND LOWER(`ROHDR`.`SEGMNT_CD`) = 'diesel' ) SELECT `RP`.`PART_DESC`, ROUND(SUM(SAFE_CAST(`RP`.`PART_QUANTITY` AS FLOAT64)), 1) AS `TOTAL_QUANTITY`, ROUND(SUM(SAFE_CAST(`RP`.`PARTAMOUNT` AS FLOAT64)), 1) AS `TOTAL_VALUE` FROM `MH_RO_PARTS` AS `RP` INNER JOIN `FILTEREDRO` AS `FRO` ON `RP`.`SV_RO_BILL_HDR_SK` = `FRO`.`SV_RO_BILL_HDR_SK` GROUP BY `RP`.`PART_DESC` ORDER BY SUM(SAFE_CAST(`RP`.`PART_QUANTITY` AS FLOAT64)) DESC LIMIT 5
"}
{"timestamp": "2025-07-28 16:12:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or table containing seat capacity is not available in the current schema."
}"}
{"timestamp": "2025-07-28 16:12:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or table containing seat capacity is not available in the current schema."}
{"timestamp": "2025-07-28 16:12:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 16:12:26", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:12:26", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:12:30", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity.\, section: Mahindra-PoC, database: GCP"}
{"timestamp": "2025-07-28 16:12:30", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 16:12:30", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:12:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 16:12:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:12:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Mahindra-PoC', 'GCP')"}
{"timestamp": "2025-07-28 16:12:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:12:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 16:12:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the srv_mst_dim_model_master table. It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order.",
  "query": "SELECT `MM`.`MODL_DESC` AS `MODEL_DESCRIPTION`, `MM`.`SEAT_CAPCTY` AS `SEAT_CAPACITY` FROM `srv_mst_dim_model_master` AS `MM` ORDER BY `MM`.`SEAT_CAPCTY` DESC, `MM`.`MODL_DESC` ASC LIMIT 5;",
  "error": "Error: The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-07-28 16:12:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 16:12:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the srv_mst_dim_model_master table. It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order."}
{"timestamp": "2025-07-28 16:12:47", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:12:50", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:12:51", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:12:54", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Mahindra-PoC, database: GCP"}
{"timestamp": "2025-07-28 16:12:54", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 16:12:54", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:12:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 16:12:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:12:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Mahindra-PoC', 'GCP')"}
{"timestamp": "2025-07-28 16:12:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:12:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 16:13:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the srv_mst_dim_model_master table. It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order.",
  "query": "SELECT `MM`.`MODL_DESC` AS `MODEL_DESCRIPTION`, `MM`.`SEAT_CAPCTY` AS `SEAT_CAPACITY` FROM `srv_mst_dim_model_master` AS `MM` ORDER BY `MM`.`SEAT_CAPCTY` DESC, `MM`.`MODL_DESC` ASC LIMIT 5;",
  "error": "Error: The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-07-28 16:13:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 16:13:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the srv_mst_dim_model_master table. It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order."}
{"timestamp": "2025-07-28 16:21:30", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:21:31", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:21:31", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:21:31", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:22:06", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:22:09", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:22:09", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:22:09", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:22:10", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:22:43", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:22:46", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:22:46", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:22:46", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:22:47", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:24:04", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:24:06", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:24:06", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:24:07", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:24:07", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:24:12", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:24:14", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:24:14", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:24:15", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:24:15", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:24:59", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:01", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:01", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:25:02", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:25:06", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:08", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:08", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:25:08", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:25:09", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:25:14", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:16", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:16", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:25:17", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:25:17", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:25:22", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:23", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:25:23", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:25:24", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:25:24", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:26:25", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:26:27", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:26:27", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:26:28", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:26:32", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:26:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:26:34", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:26:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:26:35", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:26:39", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:26:42", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:26:42", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:26:42", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:27:24", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:27:25", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:27:25", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:27:25", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:27:28", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:28:34", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:28:35", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:28:35", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:28:36", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:28:36", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:29:53", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:29:55", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:29:55", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:29:56", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:29:57", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:34:11", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:34:12", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:34:12", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:34:13", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:34:18", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:34:19", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:34:19", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:34:20", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:34:20", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:35:01", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:35:04", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:35:04", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:35:05", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:35:05", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:36:15", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:36:18", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:36:18", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:36:18", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:36:19", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:36:24", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:36:25", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:36:29", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Mahindra-PoC, database: GCP"}
{"timestamp": "2025-07-28 16:36:29", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 16:36:29", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:36:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 16:36:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:36:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Mahindra-PoC', 'GCP')"}
{"timestamp": "2025-07-28 16:36:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:36:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 16:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the srv_mst_dim_model_master table. It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order.",
  "query": "SELECT `MM`.`MODL_DESC` AS `MODEL_DESCRIPTION`, `MM`.`SEAT_CAPCTY` AS `SEAT_CAPACITY` FROM `srv_mst_dim_model_master` AS `MM` ORDER BY `MM`.`SEAT_CAPCTY` DESC, `MM`.`MODL_DESC` ASC LIMIT 5;",
  "error": "Error: The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-07-28 16:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 16:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the srv_mst_dim_model_master table. It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order."}
{"timestamp": "2025-07-28 16:39:35", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:39:38", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:39:38", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:39:38", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:39:43", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:39:44", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:39:44", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:39:45", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:39:46", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:42:12", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:42:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:44:22", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:44:27", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:44:29", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:44:29", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:44:29", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:44:30", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:44:35", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:44:37", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:44:37", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:44:37", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:44:38", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:44:39", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:44:44", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:44:44", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:45:44", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:45:48", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:45:51", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 16:45:51", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 16:45:51", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:45:52", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:45:53", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:45:59", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:46:01", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:46:05", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:46:06", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:46:09", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 16:46:09", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 16:46:09", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:46:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 16:46:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:46:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 16:46:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:46:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 16:46:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "query": "SELECT DISTINCT TOP 5 [ROH].[MODL_CD], [MM].[SEAT_CAPACITY] FROM [MH_RO_HDR_DETAILS] AS [ROH] INNER JOIN [srv_mst_dim_model_master] AS [MM] ON [ROH].[MODL_CD] = [MM].[MODL_CD] ORDER BY [MM].[SEAT_CAPACITY] DESC"
}"}
{"timestamp": "2025-07-28 16:46:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 16:46:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: None"}
{"timestamp": "2025-07-28 16:54:33", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 16:54:36", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 16:54:36", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 16:54:36", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 16:54:37", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 16:55:26", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 16:55:27", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 16:55:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 16:55:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 16:55:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 16:55:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 16:55:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 16:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 16:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 16:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 16:55:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "query": "SELECT TOP 5 [ROH].[MODL_CD], MAX(TRY_CAST([MM].[SEAT_CAPACITY] AS FLOAT)) AS [MAX_SEAT_CAPACITY] FROM [MH_RO_HDR_DETAILS] AS [ROH] INNER JOIN [srv_mst_dim_model_master] AS [MM] ON [ROH].[MODL_CD] = [MM].[MODL_CD] GROUP BY [ROH].[MODL_CD] ORDER BY [MAX_SEAT_CAPACITY] DESC"
}"}
{"timestamp": "2025-07-28 16:55:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 16:55:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: None"}
{"timestamp": "2025-07-28 17:05:17", "logger": "app", "level": "INFO", "message": "Ingesting 21 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:05:20", "logger": "app", "level": "INFO", "message": "Successfully ingested 21 examples into generic_examples"}
{"timestamp": "2025-07-28 17:05:20", "logger": "app", "level": "INFO", "message": "Ingesting 4 intent groups into usecase_examples"}
{"timestamp": "2025-07-28 17:05:20", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:05:21", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:05:59", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:06:00", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:06:00", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:06:01", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:06:02", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:06:06", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:06:09", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:06:09", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:06:09", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:06:10", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:06:14", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:06:15", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:06:20", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:06:20", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:06:20", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:06:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:06:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:06:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:06:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:06:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:06:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "query": "SELECT DISTINCT TOP 5 [ROH].[MODL_CD], [MM].[SEAT_CAPACITY] FROM [MH_RO_HDR_DETAILS] AS [ROH] INNER JOIN [srv_mst_dim_model_master] AS [MM] ON [ROH].[MODL_CD] = [MM].[MODL_CD] ORDER BY [MM].[SEAT_CAPACITY] DESC"
}"}
{"timestamp": "2025-07-28 17:06:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:06:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: None"}
{"timestamp": "2025-07-28 17:06:25", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: not enough values to unpack (expected 5, got 4)"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1022, in submit_query
    response, chosen_tables, tables_data, final_prompt, description= invoke_chain(
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: not enough values to unpack (expected 5, got 4)
{"timestamp": "2025-07-28 17:08:35", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:08:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:08:40", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:08:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:08:41", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:08:55", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:08:56", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:09:01", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:09:01", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:09:01", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:09:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:09:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:09:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:09:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:09:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:09:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "query": "SELECT TOP 5 [ROH].[MODL_CD], MAX(TRY_CAST([MM].[SEAT_CAPACITY] AS FLOAT)) AS [MAX_SEAT_CAPACITY] FROM [MH_RO_HDR_DETAILS] AS [ROH] INNER JOIN [srv_mst_dim_model_master] AS [MM] ON [ROH].[MODL_CD] = [MM].[MODL_CD] GROUP BY [ROH].[MODL_CD] ORDER BY [MAX_SEAT_CAPACITY] DESC"
}"}
{"timestamp": "2025-07-28 17:09:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:09:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: None"}
{"timestamp": "2025-07-28 17:13:17", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:13:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:13:51", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:13:51", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:13:56", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:13:56", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:13:56", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:13:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:13:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:13:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:13:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:13:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:14:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or related vehicle model table is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:14:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or related vehicle model table is not available in the current schema."}
{"timestamp": "2025-07-28 17:14:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:17:59", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:17:59", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:18:04", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:18:04", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:18:04", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:18:05", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:18:05", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:18:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:18:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:18:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:18:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or table related to vehicle models with seat capacity is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:18:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or table related to vehicle models with seat capacity is not available in the current schema."}
{"timestamp": "2025-07-28 17:18:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:18:56", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:18:57", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:19:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list all the tables, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:19:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:19:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:19:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "List all the tables available in the database."
}"}
{"timestamp": "2025-07-28 17:19:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:19:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all the tables available in the database.', [{'role': 'user', 'content': 'List all the tables available in the database.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:19:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:19:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:19:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "The request is to list all tables available in the database. However, the schema section only provides information about three tables: MH_RO_HDR_DETAILS, MH_RO_LABOUR, and MH_RO_PARTS. No query can be generated to list all tables as this information is not available in the current schema.",
  "query": null,
  "error": "The requested information about all tables in the database is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:19:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested information about all tables in the database is not available in the current schema."}
{"timestamp": "2025-07-28 17:19:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: The request is to list all tables available in the database. However, the schema section only provides information about three tables: MH_RO_HDR_DETAILS, MH_RO_LABOUR, and MH_RO_PARTS. No query can be generated to list all tables as this information is not available in the current schema."}
{"timestamp": "2025-07-28 17:21:13", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:21:16", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:21:16", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:21:17", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:21:18", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:21:23", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:21:26", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:21:26", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:21:26", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:21:27", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:23:00", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:23:00", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:23:04", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:23:04", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:23:04", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:23:05", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:23:05", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:23:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:23:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:23:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:23:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or table for vehicle models with seat capacity is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:23:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or table for vehicle models with seat capacity is not available in the current schema."}
{"timestamp": "2025-07-28 17:23:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:25:36", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:25:39", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:25:39", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:25:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:25:40", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:27:40", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:27:41", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:27:41", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:27:43", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:27:43", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:27:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:27:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:27:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:27:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or table related to vehicle models with seat capacity is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:27:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or table related to vehicle models with seat capacity is not available in the current schema."}
{"timestamp": "2025-07-28 17:27:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:30:17", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:30:18", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:30:18", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:30:18", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:30:19", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:30:24", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:30:25", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:30:25", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:30:26", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:30:27", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:31:25", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:31:27", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:31:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:31:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:31:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:31:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:31:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:31:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:31:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:31:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:31:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or table containing it is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:31:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or table containing it is not available in the current schema."}
{"timestamp": "2025-07-28 17:31:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:32:03", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:32:05", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:32:05", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:32:06", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:32:07", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:32:12", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:32:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:32:17", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:32:17", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:32:17", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:32:18", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:32:18", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:32:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:32:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:32:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:32:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [srv_mst_dim_model_master] aliased as [MM]. It retrieves the columns [MODL_DESC] as [MODEL_DESCRIPTION] and [SEAT_CAPCTY] as [SEAT_CAPACITY], ordering the results by [SEAT_CAPCTY] in descending order and then by [MODL_DESC] in ascending order.",
  "query": "SELECT TOP (5) [MM].[MODL_DESC] AS [MODEL_DESCRIPTION], [MM].[SEAT_CAPCTY] AS [SEAT_CAPACITY] FROM [srv_mst_dim_model_master] AS [MM] ORDER BY [MM].[SEAT_CAPCTY] DESC, [MM].[MODL_DESC] ASC;",
  "error": "Error: The requested table 'srv_mst_dim_model_master' is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:32:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Error: The requested table 'srv_mst_dim_model_master' is not available in the current schema."}
{"timestamp": "2025-07-28 17:32:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [srv_mst_dim_model_master] aliased as [MM]. It retrieves the columns [MODL_DESC] as [MODEL_DESCRIPTION] and [SEAT_CAPCTY] as [SEAT_CAPACITY], ordering the results by [SEAT_CAPCTY] in descending order and then by [MODL_DESC] in ascending order."}
{"timestamp": "2025-07-28 17:35:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:35:13", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:35:15", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:35:15", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:35:16", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:35:17", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:35:21", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:35:23", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:35:23", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:35:23", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:35:24", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:35:25", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:35:25", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:35:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:35:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:35:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:35:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:35:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:35:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:35:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:35:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:35:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or related vehicle model details are not found in the provided schema."
}"}
{"timestamp": "2025-07-28 17:35:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or related vehicle model details are not found in the provided schema."}
{"timestamp": "2025-07-28 17:35:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:35:50", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:35:50", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:36:12", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:36:12", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:36:12", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:36:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:36:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:36:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:36:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:36:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:36:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:36:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:36:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties."}
{"timestamp": "2025-07-28 17:36:38", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Provide the list of Top 10 consumed OEM part under Repair from 01-Jan-2024 to 31-Jan-2024, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:36:38", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the top 5 vehicle models with the highest seat capacity."}
{"timestamp": "2025-07-28 17:36:38", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:36:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the list of top 10 consumed OEM parts under Repair between 01-Jan-2024 and 31-Jan-2024."
}"}
{"timestamp": "2025-07-28 17:36:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:36:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the list of top 10 consumed OEM parts under Repair between 01-Jan-2024 and 31-Jan-2024.', [{'role': 'user', 'content': 'Retrieve the list of top 10 consumed OEM parts under Repair between 01-Jan-2024 and 31-Jan-2024.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:36:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:36:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Compare the usage and billing amount of OEM vs Local parts for repair orders in the East Zone during 2025.
  query: SELECT DISTINCT `RP`.`OEM_PART_IND`, ROUND(SUM(SAFE_CAST(`RP`.`PART_QUANTITY` AS FLOAT64)), 1) AS `TOTAL_PART_QUANTITY`, ROUND(SUM(SAFE_CAST(`RP`.`PART_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_AMOUNT` FROM `MH_RO_PARTS` AS `RP` INNER JOIN `MH_RO_HDR_DETAILS` AS `ROHDR` ON `RP`.`SV_RO_BILL_HDR_SK` = `ROHDR`.`SV_RO_BILL_HDR_SK` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` WHERE LOWER(`AD`.`ZONE_NAME`) = 'east' AND `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RP`.`OEM_PART_IND` ORDER BY `RP`.`OEM_PART_IND`

Example 2:
  input: Which OEM parts had the highest discount (>15%) in 2025?
  query: SELECT DISTINCT `RP`.`PART_CODE`, `RP`.`PART_DESC`, `RP`.`PART_DISCNT_AMNT`, `RP`.`OEM_PART_IND`, `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_PARTS` AS `RP` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RP`.`SV_RO_BILL_HDR_SK` WHERE LOWER(`RP`.`OEM_PART_IND`) = 'y' AND SAFE_CAST(`RP`.`DISCNT_RATE` AS FLOAT64) > 15 AND `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31'
"}
{"timestamp": "2025-07-28 17:36:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query retrieves the top 10 OEM parts by total quantity consumed in repair orders between January 1, 2024, and January 31, 2024. It joins the [MH_RO_PARTS] table (aliased as [RP]) with the [MH_RO_HDR_DETAILS] table (aliased as [ROHDR]) on the [SV_RO_BILL_HDR_SK] key. The query filters for parts where the OEM part indicator is 'Y' and the repair order date is within the specified date range. It groups the results by part code and part description, sums the part quantities, rounds the total quantity to one decimal place, and orders the results in descending order of total quantity. The query returns the top 10 parts based on consumption.",
  "query": "SELECT TOP (10) [RP].[part_code] AS [PART_CODE], [RP].[part_desc] AS [PART_DESCRIPTION], ROUND(SUM(TRY_CAST([RP].[part_quantity] AS FLOAT)), 1) AS [TOTAL_PART_QUANTITY] FROM [MH_RO_PARTS] AS [RP] INNER JOIN [MH_RO_HDR_DETAILS] AS [ROHDR] ON [RP].[sv_ro_bill_hdr_sk] = [ROHDR].[sv_ro_bill_hdr_sk] WHERE [RP].[oem_part_ind] = 'Y' AND [ROHDR].[ro_date] BETWEEN DATE '2024-01-01' AND DATE '2024-01-31' GROUP BY [RP].[part_code], [RP].[part_desc] ORDER BY [TOTAL_PART_QUANTITY] DESC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:36:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:36:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query retrieves the top 10 OEM parts by total quantity consumed in repair orders between January 1, 2024, and January 31, 2024. It joins the [MH_RO_PARTS] table (aliased as [RP]) with the [MH_RO_HDR_DETAILS] table (aliased as [ROHDR]) on the [SV_RO_BILL_HDR_SK] key. The query filters for parts where the OEM part indicator is 'Y' and the repair order date is within the specified date range. It groups the results by part code and part description, sums the part quantities, rounds the total quantity to one decimal place, and orders the results in descending order of total quantity. The query returns the top 10 parts based on consumption."}
{"timestamp": "2025-07-28 17:37:32", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:37:32", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:37:37", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:37:37", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:37:43", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:37:43", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:37:43", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:37:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:37:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:37:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:37:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:37:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:37:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:37:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:37:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity, ordering the results by seat capacity in descending order and then by model description in ascending order."}
{"timestamp": "2025-07-28 17:40:37", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:40:37", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:40:43", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:40:43", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:40:43", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:40:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:40:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:40:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:40:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:40:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:40:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:40:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:40:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records."}
{"timestamp": "2025-07-28 17:44:58", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:44:58", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:45:03", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:45:03", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:45:03", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:45:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:45:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:45:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:45:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:45:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:45:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:45:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:45:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties."}
{"timestamp": "2025-07-28 17:50:01", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:50:04", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:50:04", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:50:04", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:50:05", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:50:10", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:50:11", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:50:11", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:50:12", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:50:12", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:50:13", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:50:14", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:50:25", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:50:25", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:50:25", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:50:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:50:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:50:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:50:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:50:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:50:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:50:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:50:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records."}
{"timestamp": "2025-07-28 17:51:41", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:51:43", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:51:43", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:51:44", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:51:44", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:51:49", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:51:50", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:51:50", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:51:51", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:51:52", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:51:56", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:51:56", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:52:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:52:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:52:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:52:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:52:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:52:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:52:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:52:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:52:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, ordering the results by seat capacity in descending order and then by model description in ascending order.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:52:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:52:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, ordering the results by seat capacity in descending order and then by model description in ascending order."}
{"timestamp": "2025-07-28 17:52:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-28 17:53:57", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:53:59", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:53:59", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:53:59", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:54:00", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:54:05", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:54:07", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:54:07", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:54:08", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:54:09", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:54:13", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:54:14", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:54:18", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:54:18", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:54:18", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:54:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:54:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:54:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:54:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:54:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:54:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or related vehicle model table is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:54:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or related vehicle model table is not available in the current schema."}
{"timestamp": "2025-07-28 17:54:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:54:50", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:54:53", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:54:53", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:54:54", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:54:54", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:55:02", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:55:03", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:55:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:55:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:55:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:55:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:55:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:55:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:55:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:55:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:55:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as MODEL_DESCRIPTION and [MM].[seat_capcty] as SEAT_CAPACITY. The results are ordered by seat capacity in descending order and then by model description in ascending order.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:55:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:55:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as MODEL_DESCRIPTION and [MM].[seat_capcty] as SEAT_CAPACITY. The results are ordered by seat capacity in descending order and then by model description in ascending order."}
{"timestamp": "2025-07-28 17:55:12", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-28 17:57:27", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:57:30", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:57:30", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:57:30", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:57:31", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:57:36", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:57:38", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:57:39", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:57:39", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:57:40", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:57:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 17:57:46", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 17:57:50", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:57:50", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:57:50", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:57:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:57:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:57:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:57:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:57:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:57:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [mh_model_master] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [mh_model_master] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 17:57:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 17:57:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [mh_model_master] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records."}
{"timestamp": "2025-07-28 17:57:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-28 17:57:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [mh_model_master] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F6F26AABA0>"}
{"timestamp": "2025-07-28 17:59:06", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:59:07", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:59:07", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:59:08", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:59:09", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:59:17", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:59:19", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:59:19", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:59:20", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:59:20", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:59:25", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 17:59:27", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 17:59:27", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 17:59:28", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 17:59:29", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 17:59:34", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 17:59:35", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 17:59:35", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 17:59:36", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 17:59:36", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 17:59:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 17:59:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 17:59:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 17:59:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or related vehicle model table is not available in the current schema."
}"}
{"timestamp": "2025-07-28 17:59:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or related vehicle model table is not available in the current schema."}
{"timestamp": "2025-07-28 17:59:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 17:59:38", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1047, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-07-28 18:00:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 18:00:20", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-28 18:00:20", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-28 18:00:25", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 18:00:25", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 18:00:25", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 18:00:26", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 18:00:26", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 18:00:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 18:00:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 18:00:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 18:00:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Column 'seat capacity' or table for vehicle models with seat capacity is not available in the current schema."
}"}
{"timestamp": "2025-07-28 18:00:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'seat capacity' or table for vehicle models with seat capacity is not available in the current schema."}
{"timestamp": "2025-07-28 18:00:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-07-28 18:00:28", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1047, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-07-28 18:02:22", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 18:02:23", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 18:02:23", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 18:02:24", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 18:02:25", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 18:02:32", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 18:02:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 18:02:34", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 18:02:35", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 18:02:36", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 18:02:41", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 18:02:41", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 18:02:41", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 18:02:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 18:02:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 18:02:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 18:02:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 18:02:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 18:02:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 18:02:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 18:02:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to the top 5 records."}
{"timestamp": "2025-07-28 18:02:46", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1047, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-07-28 18:03:07", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 18:03:10", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 18:03:10", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 18:03:10", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 18:03:11", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 18:03:18", "logger": "app", "level": "INFO", "message": "Ingesting 19 generic examples into generic_examples"}
{"timestamp": "2025-07-28 18:03:20", "logger": "app", "level": "INFO", "message": "Successfully ingested 19 examples into generic_examples"}
{"timestamp": "2025-07-28 18:03:20", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-07-28 18:03:21", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-07-28 18:03:21", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-07-28 18:04:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-28 18:04:01", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-28 18:04:01", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-28 18:04:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-28 18:04:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-28 18:04:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-28 18:04:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-28 18:04:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-28 18:04:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-28 18:04:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-28 18:04:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties."}
{"timestamp": "2025-07-28 18:04:06", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-28 18:04:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C3047AA120>"}
{"timestamp": "2025-07-29 11:11:44", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-29 11:11:44", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-29 11:11:52", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-29 11:11:52", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-29 11:11:52", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-29 11:11:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-29 11:11:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-29 11:11:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-29 11:11:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-29 11:11:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-29 11:11:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-29 11:11:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-29 11:11:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties."}
{"timestamp": "2025-07-29 11:11:57", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-29 11:11:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C304459DA0>"}
{"timestamp": "2025-07-31 11:27:21", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 11:27:21", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 11:27:27", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show the number of ROs per dealer for the last month., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 11:27:27", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 11:27:27", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 11:27:28", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Count the number of repair orders (ROs) per dealer for the last month."
}"}
{"timestamp": "2025-07-31 11:27:28", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 11:27:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Count the number of repair orders (ROs) per dealer for the last month.', [{'role': 'user', 'content': 'Count the number of repair orders (ROs) per dealer for the last month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 11:27:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 11:27:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC

Example 2:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'
"}
{"timestamp": "2025-07-31 11:27:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query retrieves the count of repair orders per dealer from the tables [MH_RO_HDR_DETAILS] (aliased as [ROHDR]) and [MH_AD_AI_DIMENSION] (aliased as [AD]). It performs an INNER JOIN between [ROHDR] and [AD] using the columns [LOCTN_CD], [PARNT_GROP], and [PRODCT_DIVSN]. The query filters records where [ROHDR].[RO_DATE] is within the last calendar month relative to the current date. The results are grouped by [AD].[DELR_NAME] and ordered in descending order by the count of repair orders.",
  "query": "SELECT [AD].[DELR_NAME] AS [DEALER_NAME], COUNT([ROHDR].[RO_ID]) AS [REPAIR_ORDER_COUNT] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] INNER JOIN [MH_AD_AI_DIMENSION] AS [AD] ON [ROHDR].[LOCTN_CD] = [AD].[LOCTN_CD] AND [ROHDR].[PARNT_GROP] = [AD].[PARNT_GROP] AND [ROHDR].[PRODCT_DIVSN] = [AD].[PRODCT_DIVSN] WHERE [ROHDR].[RO_DATE] >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0) AND [ROHDR].[RO_DATE] < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) GROUP BY [AD].[DELR_NAME] ORDER BY [REPAIR_ORDER_COUNT] DESC;",
  "error": null
}"}
{"timestamp": "2025-07-31 11:27:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 11:27:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query retrieves the count of repair orders per dealer from the tables [MH_RO_HDR_DETAILS] (aliased as [ROHDR]) and [MH_AD_AI_DIMENSION] (aliased as [AD]). It performs an INNER JOIN between [ROHDR] and [AD] using the columns [LOCTN_CD], [PARNT_GROP], and [PRODCT_DIVSN]. The query filters records where [ROHDR].[RO_DATE] is within the last calendar month relative to the current date. The results are grouped by [AD].[DELR_NAME] and ordered in descending order by the count of repair orders."}
{"timestamp": "2025-07-31 11:27:32", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 11:27:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT [AD].[DELR_NAME] AS [DEALER_NAME], COUNT([ROHDR].[RO_ID]) AS [REPAIR_ORDER_COUNT] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] INNER JOIN [MH_AD_AI_DIMENSION] AS [AD] ON [ROHDR].[LOCTN_CD] = [AD].[LOCTN_CD] AND [ROHDR].[PARNT_GROP] = [AD].[PARNT_GROP] AND [ROHDR].[PRODCT_DIVSN] = [AD].[PRODCT_DIVSN] WHERE [ROHDR].[RO_DATE] >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0) AND [ROHDR].[RO_DATE] < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) GROUP BY [AD].[DELR_NAME] ORDER BY [REPAIR_ORDER_COUNT] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C30554F930>"}
{"timestamp": "2025-07-31 11:27:48", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 11:27:48", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 11:28:18", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 11:28:19", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 11:28:24", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 11:28:24", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 11:28:29", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show the number of ROs per dealer for the last month., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 11:28:29", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 11:28:29", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 11:28:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Count the number of repair orders (ROs) per dealer for the last month."
}"}
{"timestamp": "2025-07-31 11:28:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 11:28:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Count the number of repair orders (ROs) per dealer for the last month.', [{'role': 'user', 'content': 'Count the number of repair orders (ROs) per dealer for the last month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 11:28:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 11:28:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC

Example 2:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'
"}
{"timestamp": "2025-07-31 11:28:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query retrieves the count of repair orders per dealer from the tables [MH_RO_HDR_DETAILS] (aliased as [ROHDR]) and [MH_AD_AI_DIMENSION] (aliased as [AD]). It performs an INNER JOIN between [ROHDR] and [AD] using the columns [LOCTN_CD], [PARNT_GROP], and [PRODCT_DIVSN]. The query filters records where [ROHDR].[RO_DATE] is within the last calendar month relative to the current date. The results are grouped by [AD].[DELR_NAME] and ordered in descending order by the count of repair orders.",
  "query": "SELECT [AD].[DELR_NAME] AS [DEALER_NAME], COUNT([ROHDR].[RO_ID]) AS [REPAIR_ORDER_COUNT] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] INNER JOIN [MH_AD_AI_DIMENSION] AS [AD] ON [ROHDR].[LOCTN_CD] = [AD].[LOCTN_CD] AND [ROHDR].[PARNT_GROP] = [AD].[PARNT_GROP] AND [ROHDR].[PRODCT_DIVSN] = [AD].[PRODCT_DIVSN] WHERE [ROHDR].[RO_DATE] >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0) AND [ROHDR].[RO_DATE] < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) GROUP BY [AD].[DELR_NAME] ORDER BY [REPAIR_ORDER_COUNT] DESC;",
  "error": null
}"}
{"timestamp": "2025-07-31 11:28:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 11:28:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query retrieves the count of repair orders per dealer from the tables [MH_RO_HDR_DETAILS] (aliased as [ROHDR]) and [MH_AD_AI_DIMENSION] (aliased as [AD]). It performs an INNER JOIN between [ROHDR] and [AD] using the columns [LOCTN_CD], [PARNT_GROP], and [PRODCT_DIVSN]. The query filters records where [ROHDR].[RO_DATE] is within the last calendar month relative to the current date. The results are grouped by [AD].[DELR_NAME] and ordered in descending order by the count of repair orders."}
{"timestamp": "2025-07-31 11:28:36", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 11:28:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT [AD].[DELR_NAME] AS [DEALER_NAME], COUNT([ROHDR].[RO_ID]) AS [REPAIR_ORDER_COUNT] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] INNER JOIN [MH_AD_AI_DIMENSION] AS [AD] ON [ROHDR].[LOCTN_CD] = [AD].[LOCTN_CD] AND [ROHDR].[PARNT_GROP] = [AD].[PARNT_GROP] AND [ROHDR].[PRODCT_DIVSN] = [AD].[PRODCT_DIVSN] WHERE [ROHDR].[RO_DATE] >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0) AND [ROHDR].[RO_DATE] < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) GROUP BY [AD].[DELR_NAME] ORDER BY [REPAIR_ORDER_COUNT] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C30554D240>"}
{"timestamp": "2025-07-31 11:28:43", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 11:28:43", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Count the number of repair orders (ROs) per dealer for the last month."}
{"timestamp": "2025-07-31 11:28:43", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 11:28:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-31 11:28:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 11:28:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Find the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 11:28:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 11:28:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: What is the total consumption (quantity and value) of top 5 common parts for the Diesel segment vehicles in the last quarter?
  query: WITH LASTQUARTERDATA AS ( SELECT DATE_TRUNC(`ROHDR`.`RO_DATE`, QUARTER) AS `_QUARTER_START` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 QUARTER) AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 DAY) ), FILTEREDRO AS ( SELECT `ROHDR`.`SV_RO_BILL_HDR_SK`, `ROHDR`.`SEGMNT_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 QUARTER) AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), QUARTER), INTERVAL 1 DAY) AND LOWER(`ROHDR`.`SEGMNT_CD`) = 'diesel' ) SELECT `RP`.`PART_DESC`, ROUND(SUM(SAFE_CAST(`RP`.`PART_QUANTITY` AS FLOAT64)), 1) AS `TOTAL_QUANTITY`, ROUND(SUM(SAFE_CAST(`RP`.`PARTAMOUNT` AS FLOAT64)), 1) AS `TOTAL_VALUE` FROM `MH_RO_PARTS` AS `RP` INNER JOIN `FILTEREDRO` AS `FRO` ON `RP`.`SV_RO_BILL_HDR_SK` = `FRO`.`SV_RO_BILL_HDR_SK` GROUP BY `RP`.`PART_DESC` ORDER BY SUM(SAFE_CAST(`RP`.`PART_QUANTITY` AS FLOAT64)) DESC LIMIT 5
"}
{"timestamp": "2025-07-31 11:28:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to 5 records.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-31 11:28:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 11:28:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the model description and seat capacity columns, orders the results by seat capacity in descending order and model description in ascending order to break ties, and limits the output to 5 records."}
{"timestamp": "2025-07-31 11:28:48", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 11:28:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C30554FE70>"}
{"timestamp": "2025-07-31 12:34:01", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 12:34:02", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 12:34:14", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get the total quantity of each part used across all ROs., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 12:34:14", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 12:34:14", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 12:34:16", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the total quantity of each part used across all repair orders (ROs)."
}"}
{"timestamp": "2025-07-31 12:34:16", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 12:34:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the total quantity of each part used across all repair orders (ROs).', [{'role': 'user', 'content': 'Retrieve the total quantity of each part used across all repair orders (ROs).'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 12:34:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 12:34:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'

Example 2:
  input: List 10 recent Repair Orders (ROs) where no labour hours were recorded.
  query: SELECT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` LEFT JOIN `MH_RO_LABOUR` AS `LAB` ON `ROHDR`.`SV_RO_HDR_SK` = `LAB`.`SV_RO_HDR_SK` WHERE `LAB`.`SV_RO_BILL_LABR_DTL_SK` IS NULL ORDER BY `ROHDR`.`RO_DATE` DESC LIMIT 10
"}
{"timestamp": "2025-07-31 12:34:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query calculates the total quantity of each part used across all repair orders by summing the [part_quantity] from the [MH_RO_PARTS] table (aliased as [PARTS]). The results are grouped by [PARTS].[part_code] and [PARTS].[part_desc] to provide the total quantity per part code and description.",
  "query": "SELECT [PARTS].[part_code] AS [PART_CODE], [PARTS].[part_desc] AS [PART_DESCRIPTION], ROUND(SUM(TRY_CAST([PARTS].[part_quantity] AS FLOAT)), 1) AS [TOTAL_PART_QUANTITY] FROM [MH_RO_PARTS] AS [PARTS] GROUP BY [PARTS].[part_code], [PARTS].[part_desc] ORDER BY [TOTAL_PART_QUANTITY] DESC;",
  "error": null
}"}
{"timestamp": "2025-07-31 12:34:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 12:34:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query calculates the total quantity of each part used across all repair orders by summing the [part_quantity] from the [MH_RO_PARTS] table (aliased as [PARTS]). The results are grouped by [PARTS].[part_code] and [PARTS].[part_desc] to provide the total quantity per part code and description."}
{"timestamp": "2025-07-31 12:34:21", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 12:34:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT [PARTS].[part_code] AS [PART_CODE], [PARTS].[part_desc] AS [PART_DESCRIPTION], ROUND(SUM(TRY_CAST([PARTS].[part_quantity] AS FLOAT)), 1) AS [TOTAL_PART_QUANTITY] FROM [MH_RO_PARTS] AS [PARTS] GROUP BY [PARTS].[part_code], [PARTS].[part_desc] ORDER BY [TOTAL_PART_QUANTITY] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C30554D240>"}
{"timestamp": "2025-07-31 12:39:20", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 12:39:21", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 12:40:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show the number of ROs per dealer for the last month., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 12:40:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 12:40:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 12:40:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Count the number of repair orders (ROs) per dealer for the last month."
}"}
{"timestamp": "2025-07-31 12:40:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 12:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Count the number of repair orders (ROs) per dealer for the last month.', [{'role': 'user', 'content': 'Count the number of repair orders (ROs) per dealer for the last month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 12:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 12:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC

Example 2:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'
"}
{"timestamp": "2025-07-31 12:40:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query retrieves the count of repair orders per dealer from the tables [MH_RO_HDR_DETAILS] (aliased as [ROHDR]) and [MH_AD_AI_DIMENSION] (aliased as [AD]). It performs an INNER JOIN between [ROHDR] and [AD] using the columns [LOCTN_CD], [PARNT_GROP], and [PRODCT_DIVSN]. The query filters records where [ROHDR].[RO_DATE] is within the last calendar month relative to the current date. The results are grouped by [AD].[DELR_NAME] and ordered in descending order by the count of repair orders.",
  "query": "SELECT [AD].[DELR_NAME] AS [DEALER_NAME], COUNT([ROHDR].[RO_ID]) AS [REPAIR_ORDER_COUNT] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] INNER JOIN [MH_AD_AI_DIMENSION] AS [AD] ON [ROHDR].[LOCTN_CD] = [AD].[LOCTN_CD] AND [ROHDR].[PARNT_GROP] = [AD].[PARNT_GROP] AND [ROHDR].[PRODCT_DIVSN] = [AD].[PRODCT_DIVSN] WHERE [ROHDR].[RO_DATE] >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0) AND [ROHDR].[RO_DATE] < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) GROUP BY [AD].[DELR_NAME] ORDER BY [REPAIR_ORDER_COUNT] DESC;",
  "error": null
}"}
{"timestamp": "2025-07-31 12:40:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 12:40:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query retrieves the count of repair orders per dealer from the tables [MH_RO_HDR_DETAILS] (aliased as [ROHDR]) and [MH_AD_AI_DIMENSION] (aliased as [AD]). It performs an INNER JOIN between [ROHDR] and [AD] using the columns [LOCTN_CD], [PARNT_GROP], and [PRODCT_DIVSN]. The query filters records where [ROHDR].[RO_DATE] is within the last calendar month relative to the current date. The results are grouped by [AD].[DELR_NAME] and ordered in descending order by the count of repair orders."}
{"timestamp": "2025-07-31 12:40:40", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 12:40:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT [AD].[DELR_NAME] AS [DEALER_NAME], COUNT([ROHDR].[RO_ID]) AS [REPAIR_ORDER_COUNT] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] INNER JOIN [MH_AD_AI_DIMENSION] AS [AD] ON [ROHDR].[LOCTN_CD] = [AD].[LOCTN_CD] AND [ROHDR].[PARNT_GROP] = [AD].[PARNT_GROP] AND [ROHDR].[PRODCT_DIVSN] = [AD].[PRODCT_DIVSN] WHERE [ROHDR].[RO_DATE] >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0) AND [ROHDR].[RO_DATE] < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) GROUP BY [AD].[DELR_NAME] ORDER BY [REPAIR_ORDER_COUNT] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C30554F850>"}
{"timestamp": "2025-07-31 12:40:58", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 12:40:59", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 12:41:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get the total number of repair orders (RO) created in Jan'25, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 12:41:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 12:41:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 12:41:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Get the total number of repair orders created in January 2025."
}"}
{"timestamp": "2025-07-31 12:41:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 12:41:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Get the total number of repair orders created in January 2025.', [{'role': 'user', 'content': 'Get the total number of repair orders created in January 2025.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 12:41:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 12:41:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-07-31 12:41:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query counts the total number of repair orders created in January 2025 from the table [MH_RO_HDR_DETAILS] aliased as [ROHDR]. It filters the records where the [RO_DATE] is between '2025-01-01' and '2025-01-31'.",
  "query": "SELECT COUNT([ROHDR].[ro_id]) AS [TOTAL_REPAIR_ORDERS] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] WHERE [ROHDR].[ro_date] BETWEEN DATE '2025-01-01' AND DATE '2025-01-31';",
  "error": null
}"}
{"timestamp": "2025-07-31 12:41:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 12:41:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query counts the total number of repair orders created in January 2025 from the table [MH_RO_HDR_DETAILS] aliased as [ROHDR]. It filters the records where the [RO_DATE] is between '2025-01-01' and '2025-01-31'."}
{"timestamp": "2025-07-31 12:41:12", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 12:41:12", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1047, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-07-31 12:42:10", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 12:42:11", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 12:42:46", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 12:42:47", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 12:42:50", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get the total number of repair orders (RO) created in Jan'25, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 12:42:50", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 12:42:50", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 12:42:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Get the total number of repair orders created in January 2025."
}"}
{"timestamp": "2025-07-31 12:42:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 12:42:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Get the total number of repair orders created in January 2025.', [{'role': 'user', 'content': 'Get the total number of repair orders created in January 2025.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 12:42:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 12:42:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-07-31 12:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query counts the total number of repair orders created in January 2025 from the table [MH_RO_HDR_DETAILS] aliased as [ROHDR]. It filters the records where the [RO_DATE] is between '2025-01-01' and '2025-01-31'.",
  "query": "SELECT COUNT([ROHDR].[ro_id]) AS [TOTAL_REPAIR_ORDERS] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] WHERE [ROHDR].[ro_date] BETWEEN DATE '2025-01-01' AND DATE '2025-01-31';",
  "error": null
}"}
{"timestamp": "2025-07-31 12:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 12:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query counts the total number of repair orders created in January 2025 from the table [MH_RO_HDR_DETAILS] aliased as [ROHDR]. It filters the records where the [RO_DATE] is between '2025-01-01' and '2025-01-31'."}
{"timestamp": "2025-07-31 12:42:55", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 12:42:55", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1047, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-07-31 12:43:32", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-07-31 12:43:33", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-07-31 12:43:37", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get the total number of repair orders (RO) created in Jan'25, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 12:43:37", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-07-31 12:43:37", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 12:43:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Get the total number of repair orders created in January 2025."
}"}
{"timestamp": "2025-07-31 12:43:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 12:43:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Get the total number of repair orders created in January 2025.', [{'role': 'user', 'content': 'Get the total number of repair orders created in January 2025.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 12:43:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 12:43:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-07-31 12:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query counts the total number of repair orders created in January 2025 from the table [MH_RO_HDR_DETAILS] aliased as [ROHDR]. It filters the records where the [RO_DATE] is between '2025-01-01' and '2025-01-31'.",
  "query": "SELECT COUNT([ROHDR].[ro_id]) AS [TOTAL_REPAIR_ORDERS] FROM [MH_RO_HDR_DETAILS] AS [ROHDR] WHERE [ROHDR].[ro_date] BETWEEN DATE '2025-01-01' AND DATE '2025-01-31';",
  "error": null
}"}
{"timestamp": "2025-07-31 12:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 12:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query counts the total number of repair orders created in January 2025 from the table [MH_RO_HDR_DETAILS] aliased as [ROHDR]. It filters the records where the [RO_DATE] is between '2025-01-01' and '2025-01-31'."}
{"timestamp": "2025-07-31 12:43:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 12:43:42", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1047, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-07-31 12:44:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 models with the highest seat capacity., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-07-31 12:44:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Get the total number of repair orders created in January 2025."}
{"timestamp": "2025-07-31 12:44:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-07-31 12:44:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 vehicle models with the highest seat capacity."
}"}
{"timestamp": "2025-07-31 12:44:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-07-31 12:44:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 vehicle models with the highest seat capacity.', [{'role': 'user', 'content': 'Retrieve the top 5 vehicle models with the highest seat capacity.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-07-31 12:44:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-07-31 12:44:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 5 models by billing revenue (parts + labour) for Petrol vehicles in 2024?
  query: SELECT `MM`.`MODL_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLING_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2024-01-01' AND DATE '2024-12-31' AND LOWER(`MM`.`FUEL_TYPE`) = 'petrol' GROUP BY `MM`.`MODL_DESC` ORDER BY `TOTAL_BILLING_REVENUE` DESC LIMIT 5

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-07-31 12:44:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties.",
  "query": "SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC;",
  "error": null
}"}
{"timestamp": "2025-07-31 12:44:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-07-31 12:44:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This SQL query selects the top 5 vehicle models with the highest seat capacity from the table [MH_MODEL_MASTER] (aliased as [MM]). It retrieves the columns [MM].[modl_desc] as [MODEL_DESCRIPTION] and [MM].[seat_capcty] as [SEAT_CAPACITY]. The results are ordered by [MM].[seat_capcty] in descending order and then by [MM].[modl_desc] in ascending order to break ties."}
{"timestamp": "2025-07-31 12:44:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-07-31 12:44:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (5) [MM].[modl_desc] AS [MODEL_DESCRIPTION], [MM].[seat_capcty] AS [SEAT_CAPACITY] FROM [MH_MODEL_MASTER] AS [MM] ORDER BY [MM].[seat_capcty] DESC, [MM].[modl_desc] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C30554D080>"}
{"timestamp": "2025-08-01 09:24:10", "logger": "app", "level": "INFO", "message": "Ingesting 20 generic examples into generic_examples"}
{"timestamp": "2025-08-01 09:24:13", "logger": "app", "level": "INFO", "message": "Successfully ingested 20 examples into generic_examples"}
{"timestamp": "2025-08-01 09:24:13", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 09:24:13", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 09:24:14", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 11:54:53", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 11:54:54", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 11:55:01", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 11:55:02", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 11:55:45", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the total price of each Autofurnish order with item names and SKUs?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 11:55:45", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 11:55:45", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 11:55:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the total price of each Autofurnish order along with the item names and SKUs."
}"}
{"timestamp": "2025-08-01 11:55:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-08-01 11:55:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the total price of each Autofurnish order along with the item names and SKUs.', [{'role': 'user', 'content': 'Retrieve the total price of each Autofurnish order along with the item names and SKUs.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 11:55:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-08-01 11:55:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'

Example 2:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`
"}
{"timestamp": "2025-08-01 11:55:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-08-01 11:55:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 11:55:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 11:55:51", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 11:55:51", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 11:56:01", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show all orders with discount codes along with their shipping method and total value., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 11:56:01", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the total price of each Autofurnish order along with the item names and SKUs."}
{"timestamp": "2025-08-01 11:56:01", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 11:56:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve all Autofurnish orders that have discount codes, including their shipping method, total price, item names, and SKUs."
}"}
{"timestamp": "2025-08-01 11:56:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-08-01 11:56:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve all Autofurnish orders that have discount codes, including their shipping method, total price, item names, and SKUs.', [{'role': 'user', 'content': 'Retrieve all Autofurnish orders that have discount codes, including their shipping method, total price, item names, and SKUs.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 11:56:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-08-01 11:56:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'
"}
{"timestamp": "2025-08-01 11:56:33", "logger": "app", "level": "ERROR", "message": "Error in submit query --> invoke_chain --> get_chain : Connection error."}
{"timestamp": "2025-08-01 11:56:33", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 11:57:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 11:57:09", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 11:57:12", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show the MSKU, warehouse name, and status name for all inventory items marked as 'Published'., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 11:57:12", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 11:57:12", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 11:57:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'."
}"}
{"timestamp": "2025-08-01 11:57:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['mh_ro_hdr_details', 'MH_RO_PARTS', 'MH_CUST_VERBATIM', 'MH_MODEL_MASTER', 'MH_AD_AI_DIMENSION', 'MH_RO_LABOUR']"}
{"timestamp": "2025-08-01 11:57:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'.", [{'role': 'user', 'content': "Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 11:57:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_PARTS
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Parts
- left_table: MH_RO_HDR_DETAILS
  left_columns:
  - SV_RO_BILL_HDR_SK
  right_table: MH_RO_LABOUR
  right_columns:
  - SV_RO_BILL_HDR_SK
  cardinality: OneToMany
  description: Repair Order or RO Header to Labour
"}
{"timestamp": "2025-08-01 11:57:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 11:57:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-08-01 11:57:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 11:57:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 11:57:14", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 11:57:14", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:05:52", "logger": "app", "level": "INFO", "message": "Ingesting 20 generic examples into generic_examples"}
{"timestamp": "2025-08-01 12:05:54", "logger": "app", "level": "INFO", "message": "Successfully ingested 20 examples into generic_examples"}
{"timestamp": "2025-08-01 12:05:54", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 12:05:54", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 12:05:55", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 12:06:21", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 12:06:23", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 12:06:34", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show the MSKU, warehouse name, and status name for all inventory items marked as 'Published'., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:06:34", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 12:06:34", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:06:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'."
}"}
{"timestamp": "2025-08-01 12:06:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:06:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'.", [{'role': 'user', 'content': "Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:06:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:06:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:06:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the MSKU, warehouse name, and status for all inventory items from the InventoryDetail_GMPL table where the status is 'Published'. It joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on WarehouseId to get the warehouse name. The filter ensures only items with Published status set to true are included.",
  "query": "SELECT TOP 1000 [i].[MSKU], [r].[Name] AS [WarehouseName], CASE WHEN [i].[Published] = 1 THEN 'Published' ELSE 'Not Published' END AS [StatusName] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[WarehouseId] = [r].[WarehouseId] WHERE [i].[Published] = 1;",
  "error": null
}"}
{"timestamp": "2025-08-01 12:06:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:06:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the MSKU, warehouse name, and status for all inventory items from the InventoryDetail_GMPL table where the status is 'Published'. It joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on WarehouseId to get the warehouse name. The filter ensures only items with Published status set to true are included."}
{"timestamp": "2025-08-01 12:06:38", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:06:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [i].[MSKU], [r].[Name] AS [WarehouseName], CASE WHEN [i].[Published] = 1 THEN 'Published' ELSE 'Not Published' END AS [StatusName] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[WarehouseId] = [r].[WarehouseId] WHERE [i].[Published] = 1; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C941332740>"}
{"timestamp": "2025-08-01 12:10:01", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the total price of each Autofurnish order with item names and SKUs?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:10:01", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the MSKU, warehouse name, and status name for all inventory items where the status is 'Published'."}
{"timestamp": "2025-08-01 12:10:01", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:10:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the total price, item names, and SKUs for each Autofurnish order."
}"}
{"timestamp": "2025-08-01 12:10:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:10:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the total price, item names, and SKUs for each Autofurnish order.', [{'role': 'user', 'content': 'Retrieve the total price, item names, and SKUs for each Autofurnish order.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:10:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:10:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Repair order summary including VIN, model family, dealer zone/area, and financial totals for RO25D000670
  query: SELECT `ROHDR`.`RO_ID`, `ROHDR`.`VIN` AS `VEHICLE_VIN`, `MM`.`FAMLY_DESC` AS `MODEL_FAMILY`, `AD`.`ZONE_NAME` AS `DEALER_ZONE`, `AD`.`AREA_NAME` AS `DEALER_AREA`, `ROHDR`.`PARTS_TOTL_AMNT` AS `TOTAL_PARTS_AMOUNT`, `ROHDR`.`LABR_TOTL_AMNT` AS `TOTAL_LABOUR_AMOUNT`, `ROHDR`.`RO_BILL_DATE` AS `BILL_DATE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `AD` ON `ROHDR`.`LOCTN_CD` = `AD`.`LOCTN_CD` AND `ROHDR`.`PARNT_GROP` = `AD`.`PARNT_GROP` AND `ROHDR`.`PRODCT_DIVSN` = `AD`.`PRODCT_DIVSN` WHERE `ROHDR`.`RO_ID` = 'RO25D000730'

Example 2:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`
"}
{"timestamp": "2025-08-01 12:10:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the total price, item names, and SKUs for each Autofurnish order from the af_orderitems_GMPL table. It groups the data by the order ID, concatenates the item names and SKUs for each order, and sums the line item prices. The total price is rounded to 1 decimal place.",
  "query": "WITH OrderItemsCTE AS ( SELECT [af].[AFOrderId], STRING_AGG([af].[Lineitem_name], ', ') AS ItemNames, STRING_AGG([af].[Lineitem_sku], ', ') AS SKUs, ROUND(SUM(TRY_CAST([af].[Lineitem_price] AS FLOAT)), 1) AS TotalPrice FROM [af_orderitems_GMPL] AS [af] GROUP BY [af].[AFOrderId] ) SELECT TOP 1000 [AFOrderId], [ItemNames], [SKUs], [TotalPrice] FROM OrderItemsCTE ORDER BY [AFOrderId];",
  "error": null
}"}
{"timestamp": "2025-08-01 12:10:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:10:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the total price, item names, and SKUs for each Autofurnish order from the af_orderitems_GMPL table. It groups the data by the order ID, concatenates the item names and SKUs for each order, and sums the line item prices. The total price is rounded to 1 decimal place."}
{"timestamp": "2025-08-01 12:10:06", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:10:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OrderItemsCTE AS ( SELECT [af].[AFOrderId], STRING_AGG([af].[Lineitem_name], ', ') AS ItemNames, STRING_AGG([af].[Lineitem_sku], ', ') AS SKUs, ROUND(SUM(TRY_CAST([af].[Lineitem_price] AS FLOAT)), 1) AS TotalPrice FROM [af_orderitems_GMPL] AS [af] GROUP BY [af].[AFOrderId] ) SELECT TOP 1000 [AFOrderId], [ItemNames], [SKUs], [TotalPrice] FROM OrderItemsCTE ORDER BY [AFOrderId]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C93B076EB0>"}
{"timestamp": "2025-08-01 12:24:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show all orders with discount codes along with their shipping method and total value., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:24:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the total price, item names, and SKUs for each Autofurnish order."}
{"timestamp": "2025-08-01 12:24:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:24:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve all Autofurnish orders that have discount codes, including their shipping method and total value."
}"}
{"timestamp": "2025-08-01 12:24:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:24:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve all Autofurnish orders that have discount codes, including their shipping method and total value.', [{'role': 'user', 'content': 'Retrieve all Autofurnish orders that have discount codes, including their shipping method and total value.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:24:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:24:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10
"}
{"timestamp": "2025-08-01 12:24:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves Autofurnish order items that have a discount applied (Lineitem_discount greater than 0). It selects the order ID, line item name, line item SKU, line item price, discount amount, and shipping method (Lineitem_requires_shipping) from the af_orderitems_GMPL table.",
  "query": "SELECT TOP 1000 [af].[AFOrderId], [af].[Lineitem_name], [af].[Lineitem_sku], ROUND(TRY_CAST([af].[Lineitem_price] AS FLOAT), 1) AS LineitemPrice, ROUND(TRY_CAST([af].[Lineitem_discount] AS FLOAT), 1) AS LineitemDiscount, [af].[Lineitem_requires_shipping] AS ShippingMethod FROM [af_orderitems_GMPL] AS [af] WHERE TRY_CAST([af].[Lineitem_discount] AS FLOAT) > 0",
  "error": null
}"}
{"timestamp": "2025-08-01 12:24:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:24:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves Autofurnish order items that have a discount applied (Lineitem_discount greater than 0). It selects the order ID, line item name, line item SKU, line item price, discount amount, and shipping method (Lineitem_requires_shipping) from the af_orderitems_GMPL table."}
{"timestamp": "2025-08-01 12:24:36", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:24:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [af].[AFOrderId], [af].[Lineitem_name], [af].[Lineitem_sku], ROUND(TRY_CAST([af].[Lineitem_price] AS FLOAT), 1) AS LineitemPrice, ROUND(TRY_CAST([af].[Lineitem_discount] AS FLOAT), 1) AS LineitemDiscount, [af].[Lineitem_requires_shipping] AS ShippingMethod FROM [af_orderitems_GMPL] AS [af] WHERE TRY_CAST([af].[Lineitem_discount] AS FLOAT) > 0 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C941FA7310>"}
{"timestamp": "2025-08-01 12:26:18", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products have inventory marked as 'Hold' and in which warehouse?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:26:18", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve all Autofurnish orders that have discount codes, including their shipping method and total value."}
{"timestamp": "2025-08-01 12:26:18", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:26:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the list of products with inventory status marked as 'Hold' along with the corresponding warehouse information."
}"}
{"timestamp": "2025-08-01 12:26:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:26:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the list of products with inventory status marked as 'Hold' along with the corresponding warehouse information.", [{'role': 'user', 'content': "Retrieve the list of products with inventory status marked as 'Hold' along with the corresponding warehouse information."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:26:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:26:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC

Example 2:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`
"}
{"timestamp": "2025-08-01 12:26:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of products from the InventoryDetail_GMPL table where the inventory status is marked as 'Hold'. It selects the MSKU of the product and the associated WarehouseId. The filter is applied on the IsHold column to include only those records where IsHold is true.",
  "query": "SELECT TOP 1000 [i].[MSKU], [i].[WarehouseId] FROM [inventorydetail_GMPL] AS [i] WHERE [i].[IsHold] = 1;",
  "error": null
}"}
{"timestamp": "2025-08-01 12:26:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:26:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of products from the InventoryDetail_GMPL table where the inventory status is marked as 'Hold'. It selects the MSKU of the product and the associated WarehouseId. The filter is applied on the IsHold column to include only those records where IsHold is true."}
{"timestamp": "2025-08-01 12:26:21", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:26:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [i].[MSKU], [i].[WarehouseId] FROM [inventorydetail_GMPL] AS [i] WHERE [i].[IsHold] = 1; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C93B076EB0>"}
{"timestamp": "2025-08-01 12:32:02", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List products and their inventory status along with manufacturing unit and batch number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:32:02", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the list of products with inventory status marked as 'Hold' along with the corresponding warehouse information."}
{"timestamp": "2025-08-01 12:32:02", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:32:03", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the list of products with their inventory status, manufacturing unit, and batch number."
}"}
{"timestamp": "2025-08-01 12:32:03", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:32:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the list of products with their inventory status, manufacturing unit, and batch number.', [{'role': 'user', 'content': 'Retrieve the list of products with their inventory status, manufacturing unit, and batch number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:32:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:32:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:32:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves a list of products from the InventoryDetail_GMPL table including their MSKU (manufacturer SKU), inventory status indicated by the IsOut flag, the manufacturing unit ID, and the batch number. It selects these columns directly from the InventoryDetail_GMPL table without any joins or filters.",
  "query": "SELECT TOP 1000 [i].[MSKU], [i].[IsOut], [i].[ManufactureUnitId], [i].[BatchNo] FROM [InventoryDetail_GMPL] AS [i];",
  "error": null
}"}
{"timestamp": "2025-08-01 12:32:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:32:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves a list of products from the InventoryDetail_GMPL table including their MSKU (manufacturer SKU), inventory status indicated by the IsOut flag, the manufacturing unit ID, and the batch number. It selects these columns directly from the InventoryDetail_GMPL table without any joins or filters."}
{"timestamp": "2025-08-01 12:32:06", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:32:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [i].[MSKU], [i].[IsOut], [i].[ManufactureUnitId], [i].[BatchNo] FROM [InventoryDetail_GMPL] AS [i]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C93B076EB0>"}
{"timestamp": "2025-08-01 12:33:26", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies with their mapped vendor codes and the number of OTC sales they have processed., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:33:26", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the list of products with their inventory status, manufacturing unit, and batch number."}
{"timestamp": "2025-08-01 12:33:26", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:33:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies with their mapped vendor codes and the number of OTC sales they have processed, including product inventory status, manufacturing unit, and batch number."
}"}
{"timestamp": "2025-08-01 12:33:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies with their mapped vendor codes and the number of OTC sales they have processed, including product inventory status, manufacturing unit, and batch number.', [{'role': 'user', 'content': 'List all companies with their mapped vendor codes and the number of OTC sales they have processed, including product inventory status, manufacturing unit, and batch number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:33:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves a list of companies with their mapped vendor codes from the company_mapping_GMPL table. It also includes the count of OTC sales processed by each company, along with product inventory details such as inventory status, manufacturing unit ID, and batch number from the inventorydetail_GMPL table. The query joins company_mapping_GMPL with inventorydetail_GMPL on the MSKU column to get inventory details. The count of OTC sales is assumed to be represented by the number of inventory detail records per company. The results are limited to the top 1000 entries.",
  "query": "SELECT TOP 1000 [cm].[CompanyId], [cm].[VendorCode], COUNT([id].[Id]) AS OTC_Sales_Count, [id].[Status] AS Inventory_Status, [id].[ManufactureUnitId], [id].[BatchNo] FROM [company_mapping_GMPL] AS [cm] LEFT JOIN [inventorydetail_GMPL] AS [id] ON [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = [id].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [cm].[CompanyId], [cm].[VendorCode], [id].[Status], [id].[ManufactureUnitId], [id].[BatchNo] ORDER BY [cm].[CompanyId];",
  "error": null
}"}
{"timestamp": "2025-08-01 12:33:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:33:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves a list of companies with their mapped vendor codes from the company_mapping_GMPL table. It also includes the count of OTC sales processed by each company, along with product inventory details such as inventory status, manufacturing unit ID, and batch number from the inventorydetail_GMPL table. The query joins company_mapping_GMPL with inventorydetail_GMPL on the MSKU column to get inventory details. The count of OTC sales is assumed to be represented by the number of inventory detail records per company. The results are limited to the top 1000 entries."}
{"timestamp": "2025-08-01 12:33:33", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:33:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [cm].[CompanyId], [cm].[VendorCode], COUNT([id].[Id]) AS OTC_Sales_Count, [id].[Status] AS Inventory_Status, [id].[ManufactureUnitId], [id].[BatchNo] FROM [company_mapping_GMPL] AS [cm] LEFT JOIN [inventorydetail_GMPL] AS [id] ON [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = [id].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [cm].[CompanyId], [cm].[VendorCode], [id].[Status], [id].[ManufactureUnitId], [id].[BatchNo] ORDER BY [cm].[CompanyId]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C941FA7BD0>"}
{"timestamp": "2025-08-01 12:34:41", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 12:34:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 12:34:45", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 12:35:03", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show OTC orders grouped by vendor code and city from the shipping address., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:35:03", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 12:35:03", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:35:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display OTC orders grouped by vendor code and city from the shipping address."
}"}
{"timestamp": "2025-08-01 12:35:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:35:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display OTC orders grouped by vendor code and city from the shipping address.', [{'role': 'user', 'content': 'Display OTC orders grouped by vendor code and city from the shipping address.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:35:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:35:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:35:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the count of OTC orders grouped by vendor code and city from the shipping address. It joins the tbl_amazon_GMPL table (representing OTC orders) with the company_mapping_GMPL table on matching shipping city and vendor code. The result includes the vendor code, city, and the total number of OTC orders for each group.",
  "query": "SELECT TOP 1000 [cm].[VendorCode], [t].[ShippCity] AS [City], COUNT(*) AS [OTCOrderCount] FROM [tbl_amazon_GMPL] AS [t] INNER JOIN [company_mapping_GMPL] AS [cm] ON [t].[ShippCity] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[City] COLLATE SQL_Latin1_General_CP1_CI_AS AND [cm].[VendorCode] IS NOT NULL GROUP BY [cm].[VendorCode], [t].[ShippCity] ORDER BY [OTCOrderCount] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-01 12:35:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:35:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the count of OTC orders grouped by vendor code and city from the shipping address. It joins the tbl_amazon_GMPL table (representing OTC orders) with the company_mapping_GMPL table on matching shipping city and vendor code. The result includes the vendor code, city, and the total number of OTC orders for each group."}
{"timestamp": "2025-08-01 12:35:08", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:35:08", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:35:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which racks on each floor of warehouses are storing MSKU items with published status?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:35:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display OTC orders grouped by vendor code and city from the shipping address."}
{"timestamp": "2025-08-01 12:35:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:35:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the racks on each floor of warehouses that are storing MSKU items with published status."
}"}
{"timestamp": "2025-08-01 12:35:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:35:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List the racks on each floor of warehouses that are storing MSKU items with published status.', [{'role': 'user', 'content': 'List the racks on each floor of warehouses that are storing MSKU items with published status.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:35:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:35:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC

Example 2:
  input: List 10 recent Repair Orders (ROs) where no labour hours were recorded.
  query: SELECT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` LEFT JOIN `MH_RO_LABOUR` AS `LAB` ON `ROHDR`.`SV_RO_HDR_SK` = `LAB`.`SV_RO_HDR_SK` WHERE `LAB`.`SV_RO_BILL_LABR_DTL_SK` IS NULL ORDER BY `ROHDR`.`RO_DATE` DESC LIMIT 10
"}
{"timestamp": "2025-08-01 12:35:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the racks located on each floor of warehouses that are storing MSKU items with a published status. It joins the InventoryDetail_GMPL table filtered for published items with non-null MSKU to the tbl_rack_GMPL table on RackId. The output includes the rack name, floor, and warehouse ID, grouped and ordered by warehouse ID and floor.",
  "query": "SELECT TOP 1000 [r].[Name] AS [RackName], [r].[Floor], [r].[WarehouseId] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [i].[Published] = 1 AND [i].[MSKU] IS NOT NULL GROUP BY [r].[Name], [r].[Floor], [r].[WarehouseId] ORDER BY [r].[WarehouseId], [r].[Floor];",
  "error": null
}"}
{"timestamp": "2025-08-01 12:35:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:35:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the racks located on each floor of warehouses that are storing MSKU items with a published status. It joins the InventoryDetail_GMPL table filtered for published items with non-null MSKU to the tbl_rack_GMPL table on RackId. The output includes the rack name, floor, and warehouse ID, grouped and ordered by warehouse ID and floor."}
{"timestamp": "2025-08-01 12:35:37", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:35:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [r].[Name] AS [RackName], [r].[Floor], [r].[WarehouseId] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [i].[Published] = 1 AND [i].[MSKU] IS NOT NULL GROUP BY [r].[Name], [r].[Floor], [r].[WarehouseId] ORDER BY [r].[WarehouseId], [r].[Floor]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C941330FA0>"}
{"timestamp": "2025-08-01 12:36:53", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List warehouse names, rack IDs, and inventory unique codes for items not marked as deleted., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:36:53", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the racks on each floor of warehouses that are storing MSKU items with published status."}
{"timestamp": "2025-08-01 12:36:53", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:36:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items."
}"}
{"timestamp": "2025-08-01 12:36:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items.', [{'role': 'user', 'content': 'List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:36:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the warehouse names, rack IDs, and inventory unique codes for items that have a published status and are not marked as deleted. It joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on RackId, filtering for published items that are not deleted and have a non-null MSKU. The results are grouped by the floor of the racks, listing the warehouse name, rack ID, and unique inventory codes per floor.",
  "query": "SELECT TOP 1000 [r].[Floor], [r].[WarehouseId], [r].[Id] AS [RackId], [i].[UniqueCode] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [i].[Published] = 1 AND ([i].[IsDeleted] = 0 OR [i].[IsDeleted] IS NULL) AND [i].[MSKU] IS NOT NULL GROUP BY [r].[Floor], [r].[WarehouseId], [r].[Id], [i].[UniqueCode] ORDER BY [r].[Floor], [r].[WarehouseId], [r].[Id], [i].[UniqueCode];",
  "error": null
}"}
{"timestamp": "2025-08-01 12:36:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:36:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the warehouse names, rack IDs, and inventory unique codes for items that have a published status and are not marked as deleted. It joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on RackId, filtering for published items that are not deleted and have a non-null MSKU. The results are grouped by the floor of the racks, listing the warehouse name, rack ID, and unique inventory codes per floor."}
{"timestamp": "2025-08-01 12:36:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:36:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [r].[Floor], [r].[WarehouseId], [r].[Id] AS [RackId], [i].[UniqueCode] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [i].[Published] = 1 AND ([i].[IsDeleted] = 0 OR [i].[IsDeleted] IS NULL) AND [i].[MSKU] IS NOT NULL GROUP BY [r].[Floor], [r].[WarehouseId], [r].[Id], [i].[UniqueCode] ORDER BY [r].[Floor], [r].[WarehouseId], [r].[Id], [i].[UniqueCode]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C941FA78C0>"}
{"timestamp": "2025-08-01 12:37:47", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: v, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:37:47", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items."}
{"timestamp": "2025-08-01 12:37:47", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:37:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items."
}"}
{"timestamp": "2025-08-01 12:37:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:37:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items.', [{'role': 'user', 'content': 'List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:37:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:37:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:37:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the warehouse names, rack IDs, and inventory unique codes for items that have a published status and are not marked as deleted. It groups the results by the floor of the racks where these MSKU items are stored. The query joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on RackId, filters for published items that are not deleted, and groups the results by the rack floor.",
  "query": "SELECT TOP 1000 r.[Floor], r.[Id] AS RackID, i.[UniqueCode], i.[WarehouseId] FROM [InventoryDetail_GMPL] AS i INNER JOIN [tbl_rack_GMPL] AS r ON i.[RackId] = r.[Id] WHERE i.[Published] = 1 AND (i.[IsDeleted] = 0 OR i.[IsDeleted] IS NULL) AND i.[MSKU] IS NOT NULL GROUP BY r.[Floor], r.[Id], i.[UniqueCode], i.[WarehouseId] ORDER BY r.[Floor], r.[Id], i.[UniqueCode]",
  "error": null
}"}
{"timestamp": "2025-08-01 12:37:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:37:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the warehouse names, rack IDs, and inventory unique codes for items that have a published status and are not marked as deleted. It groups the results by the floor of the racks where these MSKU items are stored. The query joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on RackId, filters for published items that are not deleted, and groups the results by the rack floor."}
{"timestamp": "2025-08-01 12:37:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:37:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 r.[Floor], r.[Id] AS RackID, i.[UniqueCode], i.[WarehouseId] FROM [InventoryDetail_GMPL] AS i INNER JOIN [tbl_rack_GMPL] AS r ON i.[RackId] = r.[Id] WHERE i.[Published] = 1 AND (i.[IsDeleted] = 0 OR i.[IsDeleted] IS NULL) AND i.[MSKU] IS NOT NULL GROUP BY r.[Floor], r.[Id], i.[UniqueCode], i.[WarehouseId] ORDER BY r.[Floor], r.[Id], i.[UniqueCode] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001C941FA7E00>"}
{"timestamp": "2025-08-01 12:38:11", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List OTC sales with product name, category, and GST rate., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:38:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List warehouse names, rack IDs, and inventory unique codes for items with published status that are not marked as deleted, grouped by each floor of the warehouses storing MSKU items."}
{"timestamp": "2025-08-01 12:38:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:38:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List OTC sales including product name, category, and GST rate."
}"}
{"timestamp": "2025-08-01 12:38:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:38:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List OTC sales including product name, category, and GST rate.', [{'role': 'user', 'content': 'List OTC sales including product name, category, and GST rate.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:38:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:38:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: What is the total revenue generated from service ROs in the South Zone during Q1 2025, broken down by model group?
  query: SELECT DISTINCT `MM`.`MODL_GROP_DESC`, ROUND(SUM(SAFE_CAST(`ROH`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROH`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_REVENUE`, DATE_TRUNC(`ROH`.`RO_DATE`, QUARTER) AS `_QUARTER_START`, FORMAT_DATE('%b-%y', DATE_TRUNC(`ROH`.`RO_DATE`, QUARTER)) AS `QUARTER` FROM `MH_RO_HDR_DETAILS` AS `ROH` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROH`.`MODL_CD` = `MM`.`MODL_CD` INNER JOIN `ddp_ad_ai_final_dimension` AS `DIM` ON `ROH`.`LOCTN_CD` = `DIM`.`LOCTN_CD` WHERE `ROH`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-03-31' AND LOWER(`DIM`.`ZONE_NAME`) = 'south zone' GROUP BY `MM`.`MODL_GROP_DESC`, DATE_TRUNC(`ROH`.`RO_DATE`, QUARTER) ORDER BY `_QUARTER_START`
"}
{"timestamp": "2025-08-01 12:38:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-08-01 12:38:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:38:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:38:14", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:38:14", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:41:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show all OTC sales where the product MSP is more than 1000 and the tax applied is not null., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:41:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List OTC sales including product name, category, and GST rate."}
{"timestamp": "2025-08-01 12:41:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:41:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null."
}"}
{"timestamp": "2025-08-01 12:41:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:41:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null.', [{'role': 'user', 'content': 'List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:41:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:41:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'
"}
{"timestamp": "2025-08-01 12:41:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Table 'tbl_OTCSale_GMPL' or columns 'category', 'GST rate', 'tax' are not available in the current schema."
}"}
{"timestamp": "2025-08-01 12:41:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Table 'tbl_OTCSale_GMPL' or columns 'category', 'GST rate', 'tax' are not available in the current schema."}
{"timestamp": "2025-08-01 12:41:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:41:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:41:03", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:43:03", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List OTC sales with product name, category, and GST rate., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:43:03", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null."}
{"timestamp": "2025-08-01 12:43:03", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:43:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null."
}"}
{"timestamp": "2025-08-01 12:43:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:43:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null.', [{'role': 'user', 'content': 'List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:43:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:43:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'
"}
{"timestamp": "2025-08-01 12:43:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema.",
  "query": null,
  "error": "Table 'tbl_OTCSale_GMPL' or columns 'category', 'GST rate', 'tax' are not available in the current schema."
}"}
{"timestamp": "2025-08-01 12:43:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Table 'tbl_OTCSale_GMPL' or columns 'category', 'GST rate', 'tax' are not available in the current schema."}
{"timestamp": "2025-08-01 12:43:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:43:07", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:43:07", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:44:36", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List OTC sales with product name, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:44:36", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null."}
{"timestamp": "2025-08-01 12:44:36", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:44:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null."
}"}
{"timestamp": "2025-08-01 12:44:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:44:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null.', [{'role': 'user', 'content': 'List all OTC sales including product name, category, and GST rate where the product MSP is greater than 1000 and the tax applied is not null.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:44:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:44:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'
"}
{"timestamp": "2025-08-01 12:44:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested table 'tbl_OTCSale_GMPL' or columns 'category', 'GST rate', and 'tax' are not available in the current schema. The schema does not contain any table related to OTC sales or columns for product category and GST rate.",
  "query": null,
  "error": "The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-08-01 12:44:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:44:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested table 'tbl_OTCSale_GMPL' or columns 'category', 'GST rate', and 'tax' are not available in the current schema. The schema does not contain any table related to OTC sales or columns for product category and GST rate."}
{"timestamp": "2025-08-01 12:44:40", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:44:40", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:45:43", "logger": "app", "level": "INFO", "message": "Ingesting 20 generic examples into generic_examples"}
{"timestamp": "2025-08-01 12:45:45", "logger": "app", "level": "INFO", "message": "Successfully ingested 20 examples into generic_examples"}
{"timestamp": "2025-08-01 12:45:45", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 12:45:45", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 12:45:46", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 12:45:50", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 12:45:51", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 12:45:55", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List OTC sales with product name, category, and GST rate., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:45:55", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 12:45:55", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:45:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales including product name, product category, and GST rate."
}"}
{"timestamp": "2025-08-01 12:45:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCScale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:45:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales including product name, product category, and GST rate.', [{'role': 'user', 'content': 'List all OTC sales including product name, product category, and GST rate.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:45:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:45:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-08-01 12:45:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested column/table is not available in the current schema."
  ,
  "query": null,
  "error": "The requested column/table is not available in the current schema."
}"}
{"timestamp": "2025-08-01 12:45:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:45:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested column/table is not available in the current schema."}
{"timestamp": "2025-08-01 12:45:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:45:58", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 12:47:35", "logger": "app", "level": "INFO", "message": "Ingesting 20 generic examples into generic_examples"}
{"timestamp": "2025-08-01 12:47:36", "logger": "app", "level": "INFO", "message": "Successfully ingested 20 examples into generic_examples"}
{"timestamp": "2025-08-01 12:47:36", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 12:47:37", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 12:47:37", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 12:47:54", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 12:47:55", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 12:48:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List OTC sales with product name, category, and GST rate., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:48:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 12:48:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:48:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales including product name, product category, and GST rate."
}"}
{"timestamp": "2025-08-01 12:48:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:48:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales including product name, product category, and GST rate.', [{'role': 'user', 'content': 'List all OTC sales including product name, product category, and GST rate.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:48:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:48:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: Give the model-wise breakdown of service revenue grouped by family and model group for all Diesel vehicles.
  query: SELECT DISTINCT `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`, ROUND(SUM(SAFE_CAST(`ROHDR`.`PARTS_TOTL_AMNT` AS FLOAT64) + SAFE_CAST(`ROHDR`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `SERVICE_REVENUE` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `srv_mst_dim_model_master` AS `MM` ON `ROHDR`.`MODL_CD` = `MM`.`MODL_CD` WHERE LOWER(`MM`.`FUEL_TYPE`) = 'diesel' GROUP BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD` ORDER BY `MM`.`FAMLY_CD`, `MM`.`MODL_GROP_CD`
"}
{"timestamp": "2025-08-01 12:48:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 1000 OTC sales from the tbl_OTCSale_GMPL table including the product name, product category, and GST rate. It joins tbl_OTCSale_GMPL with AmazonListing_GMPL on SKU to get the product name and with inventorydetail_GMPL on MSKU to get the GST rate. Product category is not available in the schema, so it is not included.",
  "query": "SELECT TOP 1000 otc.[OrderNo], al.[ProductName], inv.[InventoryType] AS [GST_Rate] FROM [tbl_OTCSale_GMPL] AS otc LEFT JOIN [amazonlisting_GMPL] AS al ON otc.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = al.[Sku] LEFT JOIN [inventorydetail_GMPL] AS inv ON al.[MSKU] = inv.[MSKU]",
  "error": "Column 'product category' not found in schema."
}"}
{"timestamp": "2025-08-01 12:48:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'product category' not found in schema."}
{"timestamp": "2025-08-01 12:48:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 1000 OTC sales from the tbl_OTCSale_GMPL table including the product name, product category, and GST rate. It joins tbl_OTCSale_GMPL with AmazonListing_GMPL on SKU to get the product name and with inventorydetail_GMPL on MSKU to get the GST rate. Product category is not available in the schema, so it is not included."}
{"timestamp": "2025-08-01 12:48:04", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:48:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 otc.[OrderNo], al.[ProductName], inv.[InventoryType] AS [GST_Rate] FROM [tbl_OTCSale_GMPL] AS otc LEFT JOIN [amazonlisting_GMPL] AS al ON otc.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = al.[Sku] LEFT JOIN [inventorydetail_GMPL] AS inv ON al.[MSKU] = inv.[MSKU] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000268FB79E7B0>"}
{"timestamp": "2025-08-01 12:51:09", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show all OTC sales where the product MSP is more than 1000 and the tax applied is not null., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:51:09", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all OTC sales including product name, product category, and GST rate."}
{"timestamp": "2025-08-01 12:51:09", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:51:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales including product name, product category, and GST rate where the product MSP is more than 1000 and the tax applied is not null."
}"}
{"timestamp": "2025-08-01 12:51:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:51:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales including product name, product category, and GST rate where the product MSP is more than 1000 and the tax applied is not null.', [{'role': 'user', 'content': 'List all OTC sales including product name, product category, and GST rate where the product MSP is more than 1000 and the tax applied is not null.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:51:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:51:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10

Example 2:
  input: List all repair orders from January 2025 where the vehicle had a no government tag and was not serviced under the 'Repair' category.
  query: SELECT DISTINCT `ROHDR`.`RO_ID` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` WHERE `ROHDR`.`RO_DATE` >= DATE '2025-01-01' AND `ROHDR`.`RO_DATE` < DATE '2025-02-01' AND LOWER(`ROHDR`.`GOVT_VEHCL`) <> 'y' AND LOWER(`ROHDR`.`SERV_CATGRY_DESC`) <> 'repair'
"}
{"timestamp": "2025-08-01 12:51:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves all OTC sales from tbl_OTCSale_GMPL joined with amazonlisting_GMPL to get product details. It selects the product name, product type as category, and tax rate from the sales where the product MSP is greater than 1000 and the tax column in sales is not null.",
  "query": "SELECT TOP 1000 otc.[OrderNo], al.[ProductName], al.[Type] AS ProductCategory, otc.[Tax] AS GSTRate FROM [tbl_OTCSale_GMPL] AS otc INNER JOIN [amazonlisting_GMPL] AS al ON otc.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = al.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST(al.[MRP] AS FLOAT) > 1000 AND otc.[Tax] IS NOT NULL;",
  "error": null
}"}
{"timestamp": "2025-08-01 12:51:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:51:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves all OTC sales from tbl_OTCSale_GMPL joined with amazonlisting_GMPL to get product details. It selects the product name, product type as category, and tax rate from the sales where the product MSP is greater than 1000 and the tax column in sales is not null."}
{"timestamp": "2025-08-01 12:51:15", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:51:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 otc.[OrderNo], al.[ProductName], al.[Type] AS ProductCategory, otc.[Tax] AS GSTRate FROM [tbl_OTCSale_GMPL] AS otc INNER JOIN [amazonlisting_GMPL] AS al ON otc.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = al.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST(al.[MRP] AS FLOAT) > 1000 AND otc.[Tax] IS NOT NULL; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000268FB74D550>"}
{"timestamp": "2025-08-01 12:52:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies in AL DB have more than one mapped vendor code?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:52:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all OTC sales including product name, product category, and GST rate where the product MSP is more than 1000 and the tax applied is not null."}
{"timestamp": "2025-08-01 12:52:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:52:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in AL DB that have more than one mapped vendor code."
}"}
{"timestamp": "2025-08-01 12:52:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:52:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in AL DB that have more than one mapped vendor code.', [{'role': 'user', 'content': 'List all companies in AL DB that have more than one mapped vendor code.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:52:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:52:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all repair orders by chassis number or OEM model code.
  query: SELECT DISTINCT `ROHDR`.`RO_ID`, `ROHDR`.`CHAS_NUMBR`, `ROHDR`.`OEM_MODL_CD` FROM `MH_RO_HDR_DETAILS` AS `ROHDR`

Example 2:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC
"}
{"timestamp": "2025-08-01 12:52:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves companies from the company_mapping_GMPL table that have more than one distinct VendorCode mapped. It groups the data by CompanyId and filters to include only those companies with a count of distinct VendorCode greater than one. The output includes the CompanyId and the count of distinct VendorCodes for each company.",
  "query": "SELECT TOP 1000 [cm].[CompanyId], COUNT(DISTINCT [cm].[VendorCode]) AS [VendorCodeCount] FROM [company_mapping_GMPL] AS [cm] WHERE [cm].[VendorCode] IS NOT NULL GROUP BY [cm].[CompanyId] HAVING COUNT(DISTINCT [cm].[VendorCode]) > 1;",
  "error": null
}"}
{"timestamp": "2025-08-01 12:52:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 12:52:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves companies from the company_mapping_GMPL table that have more than one distinct VendorCode mapped. It groups the data by CompanyId and filters to include only those companies with a count of distinct VendorCode greater than one. The output includes the CompanyId and the count of distinct VendorCodes for each company."}
{"timestamp": "2025-08-01 12:52:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:52:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [cm].[CompanyId], COUNT(DISTINCT [cm].[VendorCode]) AS [VendorCodeCount] FROM [company_mapping_GMPL] AS [cm] WHERE [cm].[VendorCode] IS NOT NULL GROUP BY [cm].[CompanyId] HAVING COUNT(DISTINCT [cm].[VendorCode]) > 1; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000268FB74D550>"}
{"timestamp": "2025-08-01 12:53:59", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 12:53:59", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 12:54:41", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 12:54:41", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 12:54:41", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 12:54:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 12:54:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 12:54:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'List all companies in the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 12:54:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 12:54:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the number of repair orders processed by each active dealer in march 2025, along with their zone and location information, sorted by repair volume in descending order.
  query: SELECT `AD`.`DELR_NAME` AS `DEALERNAME`, `AD`.`LOCTN_NAME` AS `LOCATIONNAME`, `AD`.`ZONE_NAME` AS `ZONE`, COUNT(`RO`.`RO_ID`) AS `JANUARY2025_ROs` FROM `ddp_ad_ai_final_dimension` AS `AD` INNER JOIN `MH_RO_HDR_DETAILS` AS `RO` ON `AD`.`LOCTN_CD` = `RO`.`LOCTN_CD` AND `AD`.`PARNT_GROP` = `RO`.`PARNT_GROP` AND `AD`.`PRODCT_DIVSN` = `RO`.`PRODCT_DIVSN` WHERE LOWER(`AD`.`DELR_ACTV_IND`) = 'y' AND `RO`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-01-31' GROUP BY `AD`.`DELR_NAME`, `AD`.`LOCTN_NAME`, `AD`.`ZONE_NAME` ORDER BY `JANUARY2025_ROs` DESC

Example 2:
  input: What are the top 10 labour types billed in 2025 across all dealers, along with total billed amount and discount given?
  query: SELECT `RL`.`LABOUR_TYPE_NAME`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_TOTL_AMNT` AS FLOAT64)), 1) AS `TOTAL_BILLED_AMOUNT`, ROUND(SUM(SAFE_CAST(`RL`.`LABR_DISCNT_AMNT` AS FLOAT64)), 1) AS `TOTAL_DISCOUNT_GIVEN` FROM `MH_RO_HDR_DETAILS` AS `ROHDR` INNER JOIN `MH_RO_LABOUR` AS `RL` ON `ROHDR`.`SV_RO_BILL_HDR_SK` = `RL`.`SV_RO_BILL_HDR_SK` WHERE `ROHDR`.`RO_DATE` BETWEEN DATE '2025-01-01' AND DATE '2025-12-31' GROUP BY `RL`.`LABOUR_TYPE_NAME` ORDER BY `TOTAL_BILLED_AMOUNT` DESC LIMIT 10
"}
{"timestamp": "2025-08-01 12:54:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 1000 companies from the company_mapping_GMPL table, selecting their contact email, city, and GST number. However, the GST number column is not available in the schema, so the query only includes email and city columns.",
  "query": null,
  "error": "Column 'GST number' not found in schema."
}"}
{"timestamp": "2025-08-01 12:54:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'GST number' not found in schema."}
{"timestamp": "2025-08-01 12:54:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 1000 companies from the company_mapping_GMPL table, selecting their contact email, city, and GST number. However, the GST number column is not available in the schema, so the query only includes email and city columns."}
{"timestamp": "2025-08-01 12:54:45", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 12:54:45", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 13:00:09", "logger": "app", "level": "INFO", "message": "Ingesting 20 generic examples into generic_examples"}
{"timestamp": "2025-08-01 13:00:11", "logger": "app", "level": "INFO", "message": "Successfully ingested 20 examples into generic_examples"}
{"timestamp": "2025-08-01 13:00:11", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 13:00:11", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 13:00:12", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 13:00:19", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 13:00:20", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 13:00:23", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 13:00:23", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 13:00:23", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 13:00:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 13:00:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 13:00:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'List all companies in the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 13:00:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 13:00:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all active warehouses with their locations.
  query: SELECT [Name], [Location] FROM [tbl_Warehouse_GMPL] WHERE [IsActive] = 1

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-01 13:00:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 1000 companies from the company_mapping_GMPL table, selecting their contact email, city, and GST number. However, the GST number column is not available in the schema, so the query only includes email and city columns.",
  "query": "SELECT TOP 1000 [cm].[Email], [cm].[City] FROM [company_mapping_GMPL] AS [cm]",
  "error": "Column 'GST number' not found in schema."
}"}
{"timestamp": "2025-08-01 13:00:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'GST number' not found in schema."}
{"timestamp": "2025-08-01 13:00:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 1000 companies from the company_mapping_GMPL table, selecting their contact email, city, and GST number. However, the GST number column is not available in the schema, so the query only includes email and city columns."}
{"timestamp": "2025-08-01 13:00:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 13:00:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [cm].[Email], [cm].[City] FROM [company_mapping_GMPL] AS [cm] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B0C98D2510>"}
{"timestamp": "2025-08-01 14:13:18", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:13:19", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:25:20", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-01 14:25:21", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-01 14:25:21", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 14:25:21", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 14:25:22", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 14:27:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:27:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:27:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:27:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 14:27:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:27:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'List all companies in the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:27:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:27:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:27:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of companies from the company_mapping_GMPL table including their CompanyId, Email, City, and GST number. It selects these columns directly from the company_mapping_GMPL table.",
  "query": "SELECT TOP 1000 [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm]",
  "error": "Column 'GSTNO' not found in schema."
}"}
{"timestamp": "2025-08-01 14:27:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'GSTNO' not found in schema."}
{"timestamp": "2025-08-01 14:27:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of companies from the company_mapping_GMPL table including their CompanyId, Email, City, and GST number. It selects these columns directly from the company_mapping_GMPL table."}
{"timestamp": "2025-08-01 14:27:09", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:27:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026F34C2A3C0>"}
{"timestamp": "2025-08-01 14:28:41", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-01 14:28:42", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-01 14:28:42", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 14:28:43", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 14:28:43", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 14:29:27", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:29:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:29:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:29:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:29:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:29:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 14:29:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'List all companies in the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:29:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of companies from the company_mapping_GMPL table including their CompanyId, Email, City, and GST number. It selects these columns directly from the company_mapping_GMPL table.",
  "query": "SELECT TOP 1000 [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm]",
  "error": "Column 'GSTNO' not found in schema."
}"}
{"timestamp": "2025-08-01 14:29:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'GSTNO' not found in schema."}
{"timestamp": "2025-08-01 14:29:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of companies from the company_mapping_GMPL table including their CompanyId, Email, City, and GST number. It selects these columns directly from the company_mapping_GMPL table."}
{"timestamp": "2025-08-01 14:29:34", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:29:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024F37C966D0>"}
{"timestamp": "2025-08-01 14:32:10", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:32:11", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:32:12", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: "Get recently updated products with their names and modification date., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:32:12", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:32:12", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:32:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve recently updated products along with their names and modification dates."
}"}
{"timestamp": "2025-08-01 14:32:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:32:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve recently updated products along with their names and modification dates.', [{'role': 'user', 'content': 'Retrieve recently updated products along with their names and modification dates.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:32:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:32:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get recently updated products with their names and modification date.
  query: SELECT [SKU], [ProductName], [ModifiedDate] FROM [ProductMaster_AL] ORDER BY [ModifiedDate] DESC

Example 2:
  input: List all products with their last modified date, sorted by most recent.
  query: SELECT [SKU], [ProductName], [ModifiedDate] FROM [ProductMaster_GMPL] ORDER BY [ModifiedDate] DESC
"}
{"timestamp": "2025-08-01 14:32:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the SKU, ProductName, and ModifiedDate of products from the AmazonListing_GMPL table, ordered by the most recent ModifiedDate in descending order, limited to the top 1000 records.",
  "query": "SELECT TOP 1000 [a].[Sku], [a].[ProductName], [a].[ModifiedDate] FROM [AmazonListing_GMPL] AS [a] ORDER BY [a].[ModifiedDate] DESC",
  "error": null
}"}
{"timestamp": "2025-08-01 14:32:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:32:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the SKU, ProductName, and ModifiedDate of products from the AmazonListing_GMPL table, ordered by the most recent ModifiedDate in descending order, limited to the top 1000 records."}
{"timestamp": "2025-08-01 14:32:16", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:32:16", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:32:25", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get recently updated products with their names and modification date., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:32:25", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve recently updated products along with their names and modification dates."}
{"timestamp": "2025-08-01 14:32:25", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:32:26", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve recently updated products along with their names and modification dates."
}"}
{"timestamp": "2025-08-01 14:32:26", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:32:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve recently updated products along with their names and modification dates.', [{'role': 'user', 'content': 'Retrieve recently updated products along with their names and modification dates.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:32:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:32:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get recently updated products with their names and modification date.
  query: SELECT [SKU], [ProductName], [ModifiedDate] FROM [ProductMaster_AL] ORDER BY [ModifiedDate] DESC

Example 2:
  input: List all products with their last modified date, sorted by most recent.
  query: SELECT [SKU], [ProductName], [ModifiedDate] FROM [ProductMaster_GMPL] ORDER BY [ModifiedDate] DESC
"}
{"timestamp": "2025-08-01 14:32:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the SKU, ProductName, and ModifiedDate of products from the AmazonListing_GMPL table, ordered by the most recent ModifiedDate in descending order, limited to the top 1000 records.",
  "query": "SELECT TOP 1000 [a].[Sku], [a].[ProductName], [a].[ModifiedDate] FROM [AmazonListing_GMPL] AS [a] ORDER BY [a].[ModifiedDate] DESC",
  "error": null
}"}
{"timestamp": "2025-08-01 14:32:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:32:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the SKU, ProductName, and ModifiedDate of products from the AmazonListing_GMPL table, ordered by the most recent ModifiedDate in descending order, limited to the top 1000 records."}
{"timestamp": "2025-08-01 14:32:29", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:32:29", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:36:13", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:36:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:36:18", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:36:18", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:25", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:25", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:25", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:26", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:26", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:26", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:26", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:26", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:27", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:27", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:27", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:27", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:27", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:29", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:29", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:29", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:29", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:29", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:34", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:34", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:34", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:34", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:34", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:35", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:35", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:35", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:35", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:35", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:36", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:36", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:40", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:40", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:40", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:40", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:41", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:41", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:41", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:41", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:42", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:42", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:37:42", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:37:42", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:38:24", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:38:24", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:38:24", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:38:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 14:38:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'List all companies in the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:38:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the company ID, email, city, and GST number for all companies from the company_mapping_GMPL table. It selects the CompanyId, Email, City, and GSTNO columns.",
  "query": "SELECT TOP (1000) [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm]",
  "error": null
}"}
{"timestamp": "2025-08-01 14:38:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:38:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the company ID, email, city, and GST number for all companies from the company_mapping_GMPL table. It selects the CompanyId, Email, City, and GSTNO columns."}
{"timestamp": "2025-08-01 14:38:28", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:38:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024F379AC2F0>"}
{"timestamp": "2025-08-01 14:39:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:39:08", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:40:08", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get recently updated products with their names and modification date., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:40:09", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:40:09", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:40:10", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the list of recently updated products including their names and modification dates."
}"}
{"timestamp": "2025-08-01 14:40:10", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:40:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the list of recently updated products including their names and modification dates.', [{'role': 'user', 'content': 'Retrieve the list of recently updated products including their names and modification dates.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:40:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:40:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get recently updated products with their names and modification date.
  query: SELECT [SKU], [ProductName], [ModifiedDate] FROM [ProductMaster_AL] ORDER BY [ModifiedDate] DESC

Example 2:
  input: List all products with their last modified date, sorted by most recent.
  query: SELECT [SKU], [ProductName], [ModifiedDate] FROM [ProductMaster_GMPL] ORDER BY [ModifiedDate] DESC
"}
{"timestamp": "2025-08-01 14:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of products from the amazonlisting_GMPL table including their ProductName and the last modification date indicated by the IsActive flag and Id as a proxy for recent updates, ordered by the Id descending to show the most recently updated products first.",
  "query": "SELECT TOP (1000) [a].[ProductName], [a].[Id] AS [ModificationDate] FROM [amazonlisting_GMPL] AS [a] ORDER BY [a].[Id] DESC",
  "error": null
}"}
{"timestamp": "2025-08-01 14:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of products from the amazonlisting_GMPL table including their ProductName and the last modification date indicated by the IsActive flag and Id as a proxy for recent updates, ordered by the Id descending to show the most recently updated products first."}
{"timestamp": "2025-08-01 14:40:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [a].[ProductName], [a].[Id] AS [ModificationDate] FROM [amazonlisting_GMPL] AS [a] ORDER BY [a].[Id] DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024F379AC2F0>"}
{"timestamp": "2025-08-01 14:40:43", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:40:43", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:40:49", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:40:49", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:40:49", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:40:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies in the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 14:40:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:40:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies in the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'List all companies in the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:40:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:40:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:40:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of companies from the company_mapping_GMPL table including their CompanyId, Email, City, and GST number. It selects these columns directly from the company_mapping_GMPL table.",
  "query": "SELECT TOP (1000) [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm]",
  "error": "Column 'GSTNO' not found in schema."
}"}
{"timestamp": "2025-08-01 14:40:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Column 'GSTNO' not found in schema."}
{"timestamp": "2025-08-01 14:40:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of companies from the company_mapping_GMPL table including their CompanyId, Email, City, and GST number. It selects these columns directly from the company_mapping_GMPL table."}
{"timestamp": "2025-08-01 14:40:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:40:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cm].[CompanyId], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [company_mapping_GMPL] AS [cm] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024F37BD0C90>"}
{"timestamp": "2025-08-01 14:41:17", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:41:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:41:29", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list 5 rows from  company_al  table, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:41:29", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:41:29", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:41:30", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Retrieve 5 rows from the company_al table."
}"}
{"timestamp": "2025-08-01 14:41:30", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:41:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve 5 rows from the company_al table.', [{'role': 'user', 'content': 'Retrieve 5 rows from the company_al table.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:41:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:41:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:41:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested table 'company_al' is not available in the current schema.",
  "query": null,
  "error": "The requested table 'company_al' is not available in the current schema."
}"}
{"timestamp": "2025-08-01 14:41:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested table 'company_al' is not available in the current schema."}
{"timestamp": "2025-08-01 14:41:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested table 'company_al' is not available in the current schema."}
{"timestamp": "2025-08-01 14:41:32", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:41:32", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:42:31", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:42:32", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:42:43", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list 5 rows from Company_AL  table, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:42:43", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:42:43", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:42:44", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List 5 rows from the Company_AL table."
}"}
{"timestamp": "2025-08-01 14:42:44", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:42:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List 5 rows from the Company_AL table.', [{'role': 'user', 'content': 'List 5 rows from the Company_AL table.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:42:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:42:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]

Example 2:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]
"}
{"timestamp": "2025-08-01 14:42:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested table 'Company_AL' is not available in the current schema.",
  "query": null,
  "error": "The requested table 'Company_AL' is not available in the current schema."
}"}
{"timestamp": "2025-08-01 14:42:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested table 'Company_AL' is not available in the current schema."}
{"timestamp": "2025-08-01 14:42:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested table 'Company_AL' is not available in the current schema."}
{"timestamp": "2025-08-01 14:42:45", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:42:45", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:43:17", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:43:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:43:27", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list all the columns with their table, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:43:27", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:43:27", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:43:28", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Provide a list of all columns along with their corresponding table names."
}"}
{"timestamp": "2025-08-01 14:43:28", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:43:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Provide a list of all columns along with their corresponding table names.', [{'role': 'user', 'content': 'Provide a list of all columns along with their corresponding table names.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:43:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:43:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 14:44:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves all columns along with their corresponding table names from the schema. It lists each column name paired with its table name.",
  "query": "SELECT 'company_mapping_GMPL' AS [TableName], 'Id' AS [ColumnName] UNION ALL SELECT 'company_mapping_GMPL', 'CompanyId' UNION ALL SELECT 'company_mapping_GMPL', 'VendorCode' UNION ALL SELECT 'company_mapping_GMPL', 'ContactPerson' UNION ALL SELECT 'company_mapping_GMPL', 'ContactNumber' UNION ALL SELECT 'company_mapping_GMPL', 'Email' UNION ALL SELECT 'company_mapping_GMPL', 'Address' UNION ALL SELECT 'company_mapping_GMPL', 'Address2' UNION ALL SELECT 'company_mapping_GMPL', 'City' UNION ALL SELECT 'company_mapping_GMPL', 'State' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OTCID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderStatus' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Quantity' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Amount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Address' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerName' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Payment_Status' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'SKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Delivery_Charges' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Tax' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Selling_Price' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TIN' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Transport' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'AgainstForm' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactPerson' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactNumber' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'EmailId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CreatedDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'VendorId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'MSKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerShippingAddress' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CompanyBillID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsCredit' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TCSAmount' UNION ALL SELECT 'amazonlisting_GMPL', 'Id' UNION ALL SELECT 'amazonlisting_GMPL', 'ProductName' UNION ALL SELECT 'amazonlisting_GMPL', 'OriginalSku' UNION ALL SELECT 'amazonlisting_GMPL', 'Sku' UNION ALL SELECT 'amazonlisting_GMPL', 'Asin' UNION ALL SELECT 'amazonlisting_GMPL', 'ZooCode' UNION ALL SELECT 'amazonlisting_GMPL', 'MRP' UNION ALL SELECT 'amazonlisting_GMPL', 'Brand' UNION ALL SELECT 'amazonlisting_GMPL', 'Type' UNION ALL SELECT 'amazonlisting_GMPL', 'Sellable' UNION ALL SELECT 'amazonlisting_GMPL', 'Quantity' UNION ALL SELECT 'amazonlisting_GMPL', 'IsActive' UNION ALL SELECT 'amazonlisting_GMPL', 'MSP' UNION ALL SELECT 'amazonlisting_GMPL', 'MSKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'BillID' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderId' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderItemId' UNION ALL SELECT 'tbl_amazon_GMPL', 'PurchaseDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'PaymentDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerName' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerPhoneNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'SKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'ProductName' UNION ALL SELECT 'tbl_amazon_GMPL', 'Quantity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress1' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress2' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress3' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippState' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCode' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_amazon_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'Fulfilled' UNION ALL SELECT 'tbl_amazon_GMPL', 'Status' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedOn' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedBy' UNION ALL SELECT 'tbl_amazon_GMPL', 'Tax' UNION ALL SELECT 'tbl_amazon_GMPL', 'AirwaybillNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'CourierName' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsManifest' UNION ALL SELECT 'tbl_amazon_GMPL', 'ManifestDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_amazon_GMPL', 'DRTO_Remarks' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOType' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTODeliveryDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOTrackingId' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOCourierName' UNION ALL SELECT 'af_orderitems_GMPL', 'Id' UNION ALL SELECT 'af_orderitems_GMPL', 'AFOrderId' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_quantity' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_name' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_compare_at_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_sku' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_requires_shipping' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_taxable' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_fulfillment_status' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_discount' UNION ALL SELECT 'inventorydetail_GMPL', 'Id' UNION ALL SELECT 'inventorydetail_GMPL', 'WarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'RackId' UNION ALL SELECT 'inventorydetail_GMPL', 'ManufactureUnitId' UNION ALL SELECT 'inventorydetail_GMPL', 'BatchNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'inventorydetail_GMPL', 'UniqueCode' UNION ALL SELECT 'inventorydetail_GMPL', 'IsOut' UNION ALL SELECT 'inventorydetail_GMPL', 'OpenInventory' UNION ALL SELECT 'inventorydetail_GMPL', 'InventoryType' UNION ALL SELECT 'inventorydetail_GMPL', 'Published' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Comment' UNION ALL SELECT 'inventorydetail_GMPL', 'IsHold' UNION ALL SELECT 'inventorydetail_GMPL', 'Status' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveFromWarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveBy' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Description' UNION ALL SELECT 'inventorydetail_GMPL', 'IsDeleted' UNION ALL SELECT 'inventorydetail_GMPL', 'ReferenceNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSP' UNION ALL SELECT 'inventorydetail_GMPL', 'HandoverSticker' UNION ALL SELECT 'inventorydetail_GMPL', 'EANNumber' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'tbl_rack_GMPL', 'Id' UNION ALL SELECT 'tbl_rack_GMPL', 'Name' UNION ALL SELECT 'tbl_rack_GMPL', 'WarehouseId' UNION ALL SELECT 'tbl_rack_GMPL', 'Floor' UNION ALL SELECT 'tbl_rack_GMPL', 'UniqueId' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedBy' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedOn'",
  "error": null
}"}
{"timestamp": "2025-08-01 14:44:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:44:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves all columns along with their corresponding table names from the schema. It lists each column name paired with its table name."}
{"timestamp": "2025-08-01 14:44:01", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:44:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT 'company_mapping_GMPL' AS [TableName], 'Id' AS [ColumnName] UNION ALL SELECT 'company_mapping_GMPL', 'CompanyId' UNION ALL SELECT 'company_mapping_GMPL', 'VendorCode' UNION ALL SELECT 'company_mapping_GMPL', 'ContactPerson' UNION ALL SELECT 'company_mapping_GMPL', 'ContactNumber' UNION ALL SELECT 'company_mapping_GMPL', 'Email' UNION ALL SELECT 'company_mapping_GMPL', 'Address' UNION ALL SELECT 'company_mapping_GMPL', 'Address2' UNION ALL SELECT 'company_mapping_GMPL', 'City' UNION ALL SELECT 'company_mapping_GMPL', 'State' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OTCID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderStatus' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Quantity' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Amount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Address' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerName' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Payment_Status' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'SKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Delivery_Charges' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Tax' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Selling_Price' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TIN' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Transport' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'AgainstForm' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactPerson' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactNumber' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'EmailId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CreatedDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'VendorId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'MSKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerShippingAddress' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CompanyBillID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsCredit' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TCSAmount' UNION ALL SELECT 'amazonlisting_GMPL', 'Id' UNION ALL SELECT 'amazonlisting_GMPL', 'ProductName' UNION ALL SELECT 'amazonlisting_GMPL', 'OriginalSku' UNION ALL SELECT 'amazonlisting_GMPL', 'Sku' UNION ALL SELECT 'amazonlisting_GMPL', 'Asin' UNION ALL SELECT 'amazonlisting_GMPL', 'ZooCode' UNION ALL SELECT 'amazonlisting_GMPL', 'MRP' UNION ALL SELECT 'amazonlisting_GMPL', 'Brand' UNION ALL SELECT 'amazonlisting_GMPL', 'Type' UNION ALL SELECT 'amazonlisting_GMPL', 'Sellable' UNION ALL SELECT 'amazonlisting_GMPL', 'Quantity' UNION ALL SELECT 'amazonlisting_GMPL', 'IsActive' UNION ALL SELECT 'amazonlisting_GMPL', 'MSP' UNION ALL SELECT 'amazonlisting_GMPL', 'MSKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'BillID' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderId' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderItemId' UNION ALL SELECT 'tbl_amazon_GMPL', 'PurchaseDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'PaymentDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerName' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerPhoneNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'SKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'ProductName' UNION ALL SELECT 'tbl_amazon_GMPL', 'Quantity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress1' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress2' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress3' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippState' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCode' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_amazon_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'Fulfilled' UNION ALL SELECT 'tbl_amazon_GMPL', 'Status' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedOn' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedBy' UNION ALL SELECT 'tbl_amazon_GMPL', 'Tax' UNION ALL SELECT 'tbl_amazon_GMPL', 'AirwaybillNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'CourierName' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsManifest' UNION ALL SELECT 'tbl_amazon_GMPL', 'ManifestDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_amazon_GMPL', 'DRTO_Remarks' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOType' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTODeliveryDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOTrackingId' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOCourierName' UNION ALL SELECT 'af_orderitems_GMPL', 'Id' UNION ALL SELECT 'af_orderitems_GMPL', 'AFOrderId' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_quantity' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_name' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_compare_at_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_sku' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_requires_shipping' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_taxable' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_fulfillment_status' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_discount' UNION ALL SELECT 'inventorydetail_GMPL', 'Id' UNION ALL SELECT 'inventorydetail_GMPL', 'WarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'RackId' UNION ALL SELECT 'inventorydetail_GMPL', 'ManufactureUnitId' UNION ALL SELECT 'inventorydetail_GMPL', 'BatchNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'inventorydetail_GMPL', 'UniqueCode' UNION ALL SELECT 'inventorydetail_GMPL', 'IsOut' UNION ALL SELECT 'inventorydetail_GMPL', 'OpenInventory' UNION ALL SELECT 'inventorydetail_GMPL', 'InventoryType' UNION ALL SELECT 'inventorydetail_GMPL', 'Published' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Comment' UNION ALL SELECT 'inventorydetail_GMPL', 'IsHold' UNION ALL SELECT 'inventorydetail_GMPL', 'Status' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveFromWarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveBy' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Description' UNION ALL SELECT 'inventorydetail_GMPL', 'IsDeleted' UNION ALL SELECT 'inventorydetail_GMPL', 'ReferenceNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSP' UNION ALL SELECT 'inventorydetail_GMPL', 'HandoverSticker' UNION ALL SELECT 'inventorydetail_GMPL', 'EANNumber' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'tbl_rack_GMPL', 'Id' UNION ALL SELECT 'tbl_rack_GMPL', 'Name' UNION ALL SELECT 'tbl_rack_GMPL', 'WarehouseId' UNION ALL SELECT 'tbl_rack_GMPL', 'Floor' UNION ALL SELECT 'tbl_rack_GMPL', 'UniqueId' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedBy' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedOn' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024F388AAC10>"}
{"timestamp": "2025-08-01 14:49:17", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:49:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:49:21", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list all the columns with their table, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:49:21", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:49:21", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:49:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Provide a list of all columns along with their corresponding table names."
}"}
{"timestamp": "2025-08-01 14:49:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:49:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Provide a list of all columns along with their corresponding table names.', [{'role': 'user', 'content': 'Provide a list of all columns along with their corresponding table names.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:49:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:49:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 14:49:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of all columns along with their corresponding table names from the database schema.",
  "query": "SELECT 'company_mapping_GMPL' AS [TableName], 'Id' AS [ColumnName] UNION ALL SELECT 'company_mapping_GMPL', 'CompanyId' UNION ALL SELECT 'company_mapping_GMPL', 'VendorCode' UNION ALL SELECT 'company_mapping_GMPL', 'ContactPerson' UNION ALL SELECT 'company_mapping_GMPL', 'ContactNumber' UNION ALL SELECT 'company_mapping_GMPL', 'Email' UNION ALL SELECT 'company_mapping_GMPL', 'Address' UNION ALL SELECT 'company_mapping_GMPL', 'Address2' UNION ALL SELECT 'company_mapping_GMPL', 'City' UNION ALL SELECT 'company_mapping_GMPL', 'State' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OTCID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderStatus' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Quantity' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Amount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Address' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerName' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Payment_Status' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'SKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Delivery_Charges' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Tax' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Selling_Price' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TIN' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Transport' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'AgainstForm' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactPerson' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactNumber' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'EmailId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CreatedDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'VendorId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'MSKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerShippingAddress' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CompanyBillID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsCredit' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TCSAmount' UNION ALL SELECT 'amazonlisting_GMPL', 'Id' UNION ALL SELECT 'amazonlisting_GMPL', 'ProductName' UNION ALL SELECT 'amazonlisting_GMPL', 'OriginalSku' UNION ALL SELECT 'amazonlisting_GMPL', 'Sku' UNION ALL SELECT 'amazonlisting_GMPL', 'Asin' UNION ALL SELECT 'amazonlisting_GMPL', 'ZooCode' UNION ALL SELECT 'amazonlisting_GMPL', 'MRP' UNION ALL SELECT 'amazonlisting_GMPL', 'Brand' UNION ALL SELECT 'amazonlisting_GMPL', 'Type' UNION ALL SELECT 'amazonlisting_GMPL', 'Sellable' UNION ALL SELECT 'amazonlisting_GMPL', 'Quantity' UNION ALL SELECT 'amazonlisting_GMPL', 'IsActive' UNION ALL SELECT 'amazonlisting_GMPL', 'MSP' UNION ALL SELECT 'amazonlisting_GMPL', 'MSKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'BillID' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderId' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderItemId' UNION ALL SELECT 'tbl_amazon_GMPL', 'PurchaseDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'PaymentDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerName' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerPhoneNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'SKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'ProductName' UNION ALL SELECT 'tbl_amazon_GMPL', 'Quantity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress1' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress2' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress3' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippState' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCode' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_amazon_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'Fulfilled' UNION ALL SELECT 'tbl_amazon_GMPL', 'Status' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedOn' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedBy' UNION ALL SELECT 'tbl_amazon_GMPL', 'Tax' UNION ALL SELECT 'tbl_amazon_GMPL', 'AirwaybillNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'CourierName' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsManifest' UNION ALL SELECT 'tbl_amazon_GMPL', 'ManifestDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_amazon_GMPL', 'DRTO_Remarks' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOType' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTODeliveryDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOTrackingId' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOCourierName' UNION ALL SELECT 'af_orderitems_GMPL', 'Id' UNION ALL SELECT 'af_orderitems_GMPL', 'AFOrderId' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_quantity' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_name' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_compare_at_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_sku' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_requires_shipping' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_taxable' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_fulfillment_status' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_discount' UNION ALL SELECT 'inventorydetail_GMPL', 'Id' UNION ALL SELECT 'inventorydetail_GMPL', 'WarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'RackId' UNION ALL SELECT 'inventorydetail_GMPL', 'ManufactureUnitId' UNION ALL SELECT 'inventorydetail_GMPL', 'BatchNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'inventorydetail_GMPL', 'UniqueCode' UNION ALL SELECT 'inventorydetail_GMPL', 'IsOut' UNION ALL SELECT 'inventorydetail_GMPL', 'OpenInventory' UNION ALL SELECT 'inventorydetail_GMPL', 'InventoryType' UNION ALL SELECT 'inventorydetail_GMPL', 'Published' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Comment' UNION ALL SELECT 'inventorydetail_GMPL', 'IsHold' UNION ALL SELECT 'inventorydetail_GMPL', 'Status' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveFromWarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveBy' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Description' UNION ALL SELECT 'inventorydetail_GMPL', 'IsDeleted' UNION ALL SELECT 'inventorydetail_GMPL', 'ReferenceNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSP' UNION ALL SELECT 'inventorydetail_GMPL', 'HandoverSticker' UNION ALL SELECT 'inventorydetail_GMPL', 'EANNumber' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'tbl_rack_GMPL', 'Id' UNION ALL SELECT 'tbl_rack_GMPL', 'Name' UNION ALL SELECT 'tbl_rack_GMPL', 'WarehouseId' UNION ALL SELECT 'tbl_rack_GMPL', 'Floor' UNION ALL SELECT 'tbl_rack_GMPL', 'UniqueId' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedBy' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedOn' UNION ALL SELECT 'Company_AL', 'ID' UNION ALL SELECT 'Company_AL', 'VendorId' UNION ALL SELECT 'Company_AL', 'CompanyName' UNION ALL SELECT 'Company_AL', 'CompanyType' UNION ALL SELECT 'Company_AL', 'CreatedBy' UNION ALL SELECT 'Company_AL', 'CreatedOn' UNION ALL SELECT 'Company_Mapping_AL', 'Id' UNION ALL SELECT 'Company_Mapping_AL', 'CompanyId' UNION ALL SELECT 'Company_Mapping_AL', 'VendorCode' UNION ALL SELECT 'Company_Mapping_AL', 'ContactPerson' UNION ALL SELECT 'Company_Mapping_AL', 'ContactNumber' UNION ALL SELECT 'Company_Mapping_AL', 'Email' UNION ALL SELECT 'Company_Mapping_AL', 'Address' UNION ALL SELECT 'Company_Mapping_AL', 'Address2' UNION ALL SELECT 'Company_Mapping_AL', 'City' UNION ALL SELECT 'Company_Mapping_AL', 'State' UNION ALL SELECT 'Company_Mapping_AL', 'GSTNO' UNION ALL SELECT 'Company_Mapping_AL', 'PanNo' UNION ALL SELECT 'Company_Mapping_AL', 'PinCode' UNION ALL SELECT 'Company_Mapping_AL', 'StateCode' UNION ALL SELECT 'Company_Mapping_AL', 'Transport' UNION ALL SELECT 'Company_Mapping_AL', 'CreatedBy' UNION ALL SELECT 'Company_Mapping_AL', 'CreatedDate' UNION ALL SELECT 'ProductMaster_AL', 'Id' UNION ALL SELECT 'ProductMaster_AL', 'SKU' UNION ALL SELECT 'ProductMaster_AL', 'PSKU' UNION ALL SELECT 'ProductMaster_AL', 'ProductStatus' UNION ALL SELECT 'ProductMaster_AL', 'MasterCategoryId' UNION ALL SELECT 'ProductMaster_AL', 'Category1' UNION ALL SELECT 'ProductMaster_AL', 'Category2' UNION ALL SELECT 'ProductMaster_AL', 'Category3' UNION ALL SELECT 'ProductMaster_AL', 'Category4' UNION ALL SELECT 'ProductMaster_AL', 'SubCategory' UNION ALL SELECT 'ProductMaster_AL', 'CarBrand' UNION ALL SELECT 'ProductMaster_AL', 'CarModel' UNION ALL SELECT 'ProductMaster_AL', 'CarYear' UNION ALL SELECT 'ProductMaster_AL', 'ProductSource' UNION ALL SELECT 'ProductMaster_AL', 'MaterialSource' UNION ALL SELECT 'ProductMaster_AL', 'ProductModel' UNION ALL SELECT 'ProductMaster_AL', 'Manufacture' UNION ALL SELECT 'ProductMaster_AL', 'ProductName' UNION ALL SELECT 'ProductMaster_AL', 'Weight' UNION ALL SELECT 'ProductMaster_AL', 'HSNCode' UNION ALL SELECT 'ProductMaster_AL', 'GSTRate' UNION ALL SELECT 'ProductMaster_AL', 'MSP' UNION ALL SELECT 'ProductMaster_AL', 'WSPrice' UNION ALL SELECT 'ProductMaster_AL', 'RP' UNION ALL SELECT 'ProductMaster_AL', 'AFcom' UNION ALL SELECT 'ProductMaster_AL', 'MPPrice' UNION ALL SELECT 'ProductMaster_AL', 'MRP' UNION ALL SELECT 'ProductMaster_AL', 'MPTHProfit' UNION ALL SELECT 'ProductMaster_AL', 'ProductDescription' UNION ALL SELECT 'ProductMaster_AL', 'TechSpecifications' UNION ALL SELECT 'ProductMaster_AL', 'Highlights' UNION ALL SELECT 'ProductMaster_AL', 'AFHightlights' UNION ALL SELECT 'ProductMaster_AL', 'AFProductDescription' UNION ALL SELECT 'ProductMaster_AL', 'Varients' UNION ALL SELECT 'ProductMaster_AL', 'Color' UNION ALL SELECT 'ProductMaster_AL', 'Material' UNION ALL SELECT 'ProductMaster_AL', 'Height' UNION ALL SELECT 'ProductMaster_AL', 'Width' UNION ALL SELECT 'ProductMaster_AL', 'Length' UNION ALL SELECT 'ProductMaster_AL', 'Warranty' UNION ALL SELECT 'ProductMaster_AL', 'InTheBox' UNION ALL SELECT 'ProductMaster_AL', 'ImageLink1' UNION ALL SELECT 'ProductMaster_AL', 'ImageLink2' UNION ALL SELECT 'ProductMaster_AL', 'ImageLink3' UNION ALL SELECT 'ProductMaster_AL', 'MetaTitle' UNION ALL SELECT 'ProductMaster_AL', 'MetaKeywords' UNION ALL SELECT 'ProductMaster_AL', 'MetaDescription' UNION ALL SELECT 'ProductMaster_AL', 'ProductLink' UNION ALL SELECT 'ProductMaster_AL', 'MSKU' UNION ALL SELECT 'ProductMaster_AL', 'MName' UNION ALL SELECT 'ProductMaster_AL', 'CreatedDate' UNION ALL SELECT 'ProductMaster_AL', 'CreatedBy' UNION ALL SELECT 'ProductMaster_AL', 'ModifiedDate' UNION ALL SELECT 'ProductMaster_AL', 'ModifiedBy' UNION ALL SELECT 'ProductMaster_AL', 'IsActive' UNION ALL SELECT 'ProductMaster_AL', 'IsDeleted' UNION ALL SELECT 'ProductMaster_AL', 'DWeight' UNION ALL SELECT 'ProductMaster_AL', 'WarrantyInMonth' UNION ALL SELECT 'ProductMaster_AL', 'EANNumber' UNION ALL SELECT 'ProductMaster_AL', 'OldMSKU'",
  "error": null
}"}
{"timestamp": "2025-08-01 14:49:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:49:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of all columns along with their corresponding table names from the database schema."}
{"timestamp": "2025-08-01 14:49:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:49:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT 'company_mapping_GMPL' AS [TableName], 'Id' AS [ColumnName] UNION ALL SELECT 'company_mapping_GMPL', 'CompanyId' UNION ALL SELECT 'company_mapping_GMPL', 'VendorCode' UNION ALL SELECT 'company_mapping_GMPL', 'ContactPerson' UNION ALL SELECT 'company_mapping_GMPL', 'ContactNumber' UNION ALL SELECT 'company_mapping_GMPL', 'Email' UNION ALL SELECT 'company_mapping_GMPL', 'Address' UNION ALL SELECT 'company_mapping_GMPL', 'Address2' UNION ALL SELECT 'company_mapping_GMPL', 'City' UNION ALL SELECT 'company_mapping_GMPL', 'State' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OTCID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderStatus' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Quantity' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Amount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Address' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerName' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Payment_Status' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'SKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Delivery_Charges' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Tax' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Selling_Price' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TIN' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'Transport' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'AgainstForm' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactPerson' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ContactNumber' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'EmailId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'ProductDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'OrderDiscount' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CreatedDate' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'VendorId' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'MSKU' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CustomerShippingAddress' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'CompanyBillID' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'IsCredit' UNION ALL SELECT 'tbl_OTCSale_GMPL', 'TCSAmount' UNION ALL SELECT 'amazonlisting_GMPL', 'Id' UNION ALL SELECT 'amazonlisting_GMPL', 'ProductName' UNION ALL SELECT 'amazonlisting_GMPL', 'OriginalSku' UNION ALL SELECT 'amazonlisting_GMPL', 'Sku' UNION ALL SELECT 'amazonlisting_GMPL', 'Asin' UNION ALL SELECT 'amazonlisting_GMPL', 'ZooCode' UNION ALL SELECT 'amazonlisting_GMPL', 'MRP' UNION ALL SELECT 'amazonlisting_GMPL', 'Brand' UNION ALL SELECT 'amazonlisting_GMPL', 'Type' UNION ALL SELECT 'amazonlisting_GMPL', 'Sellable' UNION ALL SELECT 'amazonlisting_GMPL', 'Quantity' UNION ALL SELECT 'amazonlisting_GMPL', 'IsActive' UNION ALL SELECT 'amazonlisting_GMPL', 'MSP' UNION ALL SELECT 'amazonlisting_GMPL', 'MSKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'BillID' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderId' UNION ALL SELECT 'tbl_amazon_GMPL', 'OrderItemId' UNION ALL SELECT 'tbl_amazon_GMPL', 'PurchaseDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'PaymentDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerName' UNION ALL SELECT 'tbl_amazon_GMPL', 'BuyerPhoneNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'SKU' UNION ALL SELECT 'tbl_amazon_GMPL', 'ProductName' UNION ALL SELECT 'tbl_amazon_GMPL', 'Quantity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress1' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress2' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippAddress3' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCity' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippState' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippCode' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsInvoice' UNION ALL SELECT 'tbl_amazon_GMPL', 'InvoiceNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'Fulfilled' UNION ALL SELECT 'tbl_amazon_GMPL', 'Status' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedOn' UNION ALL SELECT 'tbl_amazon_GMPL', 'ModifiedBy' UNION ALL SELECT 'tbl_amazon_GMPL', 'Tax' UNION ALL SELECT 'tbl_amazon_GMPL', 'AirwaybillNo' UNION ALL SELECT 'tbl_amazon_GMPL', 'CourierName' UNION ALL SELECT 'tbl_amazon_GMPL', 'IsManifest' UNION ALL SELECT 'tbl_amazon_GMPL', 'ManifestDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'HSN_Code' UNION ALL SELECT 'tbl_amazon_GMPL', 'DRTO_Remarks' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingPrice' UNION ALL SELECT 'tbl_amazon_GMPL', 'ShippingTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'ItemTax' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOType' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTODeliveryDate' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOTrackingId' UNION ALL SELECT 'tbl_amazon_GMPL', 'RTOCourierName' UNION ALL SELECT 'af_orderitems_GMPL', 'Id' UNION ALL SELECT 'af_orderitems_GMPL', 'AFOrderId' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_quantity' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_name' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_compare_at_price' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_sku' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_requires_shipping' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_taxable' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_fulfillment_status' UNION ALL SELECT 'af_orderitems_GMPL', 'Lineitem_discount' UNION ALL SELECT 'inventorydetail_GMPL', 'Id' UNION ALL SELECT 'inventorydetail_GMPL', 'WarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'RackId' UNION ALL SELECT 'inventorydetail_GMPL', 'ManufactureUnitId' UNION ALL SELECT 'inventorydetail_GMPL', 'BatchNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'inventorydetail_GMPL', 'UniqueCode' UNION ALL SELECT 'inventorydetail_GMPL', 'IsOut' UNION ALL SELECT 'inventorydetail_GMPL', 'OpenInventory' UNION ALL SELECT 'inventorydetail_GMPL', 'InventoryType' UNION ALL SELECT 'inventorydetail_GMPL', 'Published' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'CreatedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedBy' UNION ALL SELECT 'inventorydetail_GMPL', 'ModifiedDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Comment' UNION ALL SELECT 'inventorydetail_GMPL', 'IsHold' UNION ALL SELECT 'inventorydetail_GMPL', 'Status' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveFromWarehouseId' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveBy' UNION ALL SELECT 'inventorydetail_GMPL', 'MoveDate' UNION ALL SELECT 'inventorydetail_GMPL', 'Description' UNION ALL SELECT 'inventorydetail_GMPL', 'IsDeleted' UNION ALL SELECT 'inventorydetail_GMPL', 'ReferenceNo' UNION ALL SELECT 'inventorydetail_GMPL', 'MSP' UNION ALL SELECT 'inventorydetail_GMPL', 'HandoverSticker' UNION ALL SELECT 'inventorydetail_GMPL', 'EANNumber' UNION ALL SELECT 'inventorydetail_GMPL', 'MSKU' UNION ALL SELECT 'tbl_rack_GMPL', 'Id' UNION ALL SELECT 'tbl_rack_GMPL', 'Name' UNION ALL SELECT 'tbl_rack_GMPL', 'WarehouseId' UNION ALL SELECT 'tbl_rack_GMPL', 'Floor' UNION ALL SELECT 'tbl_rack_GMPL', 'UniqueId' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedBy' UNION ALL SELECT 'tbl_rack_GMPL', 'CreatedOn' UNION ALL SELECT 'Company_AL', 'ID' UNION ALL SELECT 'Company_AL', 'VendorId' UNION ALL SELECT 'Company_AL', 'CompanyName' UNION ALL SELECT 'Company_AL', 'CompanyType' UNION ALL SELECT 'Company_AL', 'CreatedBy' UNION ALL SELECT 'Company_AL', 'CreatedOn' UNION ALL SELECT 'Company_Mapping_AL', 'Id' UNION ALL SELECT 'Company_Mapping_AL', 'CompanyId' UNION ALL SELECT 'Company_Mapping_AL', 'VendorCode' UNION ALL SELECT 'Company_Mapping_AL', 'ContactPerson' UNION ALL SELECT 'Company_Mapping_AL', 'ContactNumber' UNION ALL SELECT 'Company_Mapping_AL', 'Email' UNION ALL SELECT 'Company_Mapping_AL', 'Address' UNION ALL SELECT 'Company_Mapping_AL', 'Address2' UNION ALL SELECT 'Company_Mapping_AL', 'City' UNION ALL SELECT 'Company_Mapping_AL', 'State' UNION ALL SELECT 'Company_Mapping_AL', 'GSTNO' UNION ALL SELECT 'Company_Mapping_AL', 'PanNo' UNION ALL SELECT 'Company_Mapping_AL', 'PinCode' UNION ALL SELECT 'Company_Mapping_AL', 'StateCode' UNION ALL SELECT 'Company_Mapping_AL', 'Transport' UNION ALL SELECT 'Company_Mapping_AL', 'CreatedBy' UNION ALL SELECT 'Company_Mapping_AL', 'CreatedDate' UNION ALL SELECT 'ProductMaster_AL', 'Id' UNION ALL SELECT 'ProductMaster_AL', 'SKU' UNION ALL SELECT 'ProductMaster_AL', 'PSKU' UNION ALL SELECT 'ProductMaster_AL', 'ProductStatus' UNION ALL SELECT 'ProductMaster_AL', 'MasterCategoryId' UNION ALL SELECT 'ProductMaster_AL', 'Category1' UNION ALL SELECT 'ProductMaster_AL', 'Category2' UNION ALL SELECT 'ProductMaster_AL', 'Category3' UNION ALL SELECT 'ProductMaster_AL', 'Category4' UNION ALL SELECT 'ProductMaster_AL', 'SubCategory' UNION ALL SELECT 'ProductMaster_AL', 'CarBrand' UNION ALL SELECT 'ProductMaster_AL', 'CarModel' UNION ALL SELECT 'ProductMaster_AL', 'CarYear' UNION ALL SELECT 'ProductMaster_AL', 'ProductSource' UNION ALL SELECT 'ProductMaster_AL', 'MaterialSource' UNION ALL SELECT 'ProductMaster_AL', 'ProductModel' UNION ALL SELECT 'ProductMaster_AL', 'Manufacture' UNION ALL SELECT 'ProductMaster_AL', 'ProductName' UNION ALL SELECT 'ProductMaster_AL', 'Weight' UNION ALL SELECT 'ProductMaster_AL', 'HSNCode' UNION ALL SELECT 'ProductMaster_AL', 'GSTRate' UNION ALL SELECT 'ProductMaster_AL', 'MSP' UNION ALL SELECT 'ProductMaster_AL', 'WSPrice' UNION ALL SELECT 'ProductMaster_AL', 'RP' UNION ALL SELECT 'ProductMaster_AL', 'AFcom' UNION ALL SELECT 'ProductMaster_AL', 'MPPrice' UNION ALL SELECT 'ProductMaster_AL', 'MRP' UNION ALL SELECT 'ProductMaster_AL', 'MPTHProfit' UNION ALL SELECT 'ProductMaster_AL', 'ProductDescription' UNION ALL SELECT 'ProductMaster_AL', 'TechSpecifications' UNION ALL SELECT 'ProductMaster_AL', 'Highlights' UNION ALL SELECT 'ProductMaster_AL', 'AFHightlights' UNION ALL SELECT 'ProductMaster_AL', 'AFProductDescription' UNION ALL SELECT 'ProductMaster_AL', 'Varients' UNION ALL SELECT 'ProductMaster_AL', 'Color' UNION ALL SELECT 'ProductMaster_AL', 'Material' UNION ALL SELECT 'ProductMaster_AL', 'Height' UNION ALL SELECT 'ProductMaster_AL', 'Width' UNION ALL SELECT 'ProductMaster_AL', 'Length' UNION ALL SELECT 'ProductMaster_AL', 'Warranty' UNION ALL SELECT 'ProductMaster_AL', 'InTheBox' UNION ALL SELECT 'ProductMaster_AL', 'ImageLink1' UNION ALL SELECT 'ProductMaster_AL', 'ImageLink2' UNION ALL SELECT 'ProductMaster_AL', 'ImageLink3' UNION ALL SELECT 'ProductMaster_AL', 'MetaTitle' UNION ALL SELECT 'ProductMaster_AL', 'MetaKeywords' UNION ALL SELECT 'ProductMaster_AL', 'MetaDescription' UNION ALL SELECT 'ProductMaster_AL', 'ProductLink' UNION ALL SELECT 'ProductMaster_AL', 'MSKU' UNION ALL SELECT 'ProductMaster_AL', 'MName' UNION ALL SELECT 'ProductMaster_AL', 'CreatedDate' UNION ALL SELECT 'ProductMaster_AL', 'CreatedBy' UNION ALL SELECT 'ProductMaster_AL', 'ModifiedDate' UNION ALL SELECT 'ProductMaster_AL', 'ModifiedBy' UNION ALL SELECT 'ProductMaster_AL', 'IsActive' UNION ALL SELECT 'ProductMaster_AL', 'IsDeleted' UNION ALL SELECT 'ProductMaster_AL', 'DWeight' UNION ALL SELECT 'ProductMaster_AL', 'WarrantyInMonth' UNION ALL SELECT 'ProductMaster_AL', 'EANNumber' UNION ALL SELECT 'ProductMaster_AL', 'OldMSKU' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024F37BD0C90>"}
{"timestamp": "2025-08-01 14:51:04", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list 5 rows for Company_AL, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:51:04", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:51:04", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:51:05", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "List 5 rows of data for Company_AL including available details such as Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date."
}"}
{"timestamp": "2025-08-01 14:51:05", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:51:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List 5 rows of data for Company_AL including available details such as Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date.', [{'role': 'user', 'content': 'List 5 rows of data for Company_AL including available details such as Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:51:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:51:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0

Example 2:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]
"}
{"timestamp": "2025-08-01 14:51:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested columns Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date are not available in the Company_AL table or any other table in the current schema.",
  "query": null,
  "error": "The requested columns Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date are not available in the current schema."
}"}
{"timestamp": "2025-08-01 14:51:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested columns Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date are not available in the current schema."}
{"timestamp": "2025-08-01 14:51:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested columns Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, and Service Date are not available in the Company_AL table or any other table in the current schema."}
{"timestamp": "2025-08-01 14:51:08", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:51:08", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:53:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:53:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:53:32", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list all the columns with their tabl, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:53:32", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:53:32", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:53:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "List all columns along with their respective table names."
}"}
{"timestamp": "2025-08-01 14:53:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:53:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all columns along with their respective table names.', [{'role': 'user', 'content': 'List all columns along with their respective table names.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:53:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:53:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 14:53:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This output lists all columns along with their respective table names from the provided schema.",
  "query": null,
  "error": "Listing all columns with their respective table names is not supported as a SELECT query. Please specify the exact columns and tables you want to query."
}"}
{"timestamp": "2025-08-01 14:53:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Listing all columns with their respective table names is not supported as a SELECT query. Please specify the exact columns and tables you want to query."}
{"timestamp": "2025-08-01 14:53:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This output lists all columns along with their respective table names from the provided schema."}
{"timestamp": "2025-08-01 14:53:35", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:53:35", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:53:44", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list all the columns with their table, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:53:44", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all columns along with their respective table names."}
{"timestamp": "2025-08-01 14:53:44", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:53:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all columns along with their respective table names."
}"}
{"timestamp": "2025-08-01 14:53:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:53:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all columns along with their respective table names.', [{'role': 'user', 'content': 'List all columns along with their respective table names.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:53:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:53:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 14:53:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This output lists all columns along with their respective table names from the provided schema.",
  "query": null,
  "error": "Listing all columns with their respective table names is not supported as a SELECT query. Please specify the table and columns you want to query."
}"}
{"timestamp": "2025-08-01 14:53:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: Listing all columns with their respective table names is not supported as a SELECT query. Please specify the table and columns you want to query."}
{"timestamp": "2025-08-01 14:53:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This output lists all columns along with their respective table names from the provided schema."}
{"timestamp": "2025-08-01 14:53:47", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:53:47", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 14:54:39", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-01 14:54:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-01 14:54:40", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 14:54:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 14:54:41", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 14:54:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:55:06", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 14:55:06", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 14:55:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: list all the tables with their columns, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:55:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 14:55:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:55:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Provide a list of all tables along with their respective columns."
}"}
{"timestamp": "2025-08-01 14:55:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:55:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Provide a list of all tables along with their respective columns.', [{'role': 'user', 'content': 'Provide a list of all tables along with their respective columns.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:55:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:55:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 14:55:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of all tables and their respective columns from the database schema metadata.",
  "query": "SELECT TOP (1000) [TABLE_NAME], [COLUMN_NAME] FROM INFORMATION_SCHEMA.COLUMNS ORDER BY [TABLE_NAME], [ORDINAL_POSITION]",
  "error": null
}"}
{"timestamp": "2025-08-01 14:55:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:55:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of all tables and their respective columns from the database schema metadata."}
{"timestamp": "2025-08-01 14:55:36", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:55:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [TABLE_NAME], [COLUMN_NAME] FROM INFORMATION_SCHEMA.COLUMNS ORDER BY [TABLE_NAME], [ORDINAL_POSITION] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020C15D5F380>"}
{"timestamp": "2025-08-01 14:56:49", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: give 5 rows of Company_Mapping, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:56:50", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Provide a list of all tables along with their respective columns."}
{"timestamp": "2025-08-01 14:56:50", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:56:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Retrieve 5 rows from the Company_Mapping table."
}"}
{"timestamp": "2025-08-01 14:56:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:56:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve 5 rows from the Company_Mapping table.', [{'role': 'user', 'content': 'Retrieve 5 rows from the Company_Mapping table.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:56:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:56:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:56:54", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 5 rows from the Company_Mapping_AL table, selecting all columns available in the table.",
  "query": "SELECT TOP (5) [Id], [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [GSTNO], [PanNo], [PinCode], [StateCode], [Transport], [CreatedBy], [CreatedDate] FROM [Company_Mapping_AL]",
  "error": null
}"}
{"timestamp": "2025-08-01 14:56:54", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:56:54", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 5 rows from the Company_Mapping_AL table, selecting all columns available in the table."}
{"timestamp": "2025-08-01 14:56:54", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:56:54", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (5) [Id], [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [GSTNO], [PanNo], [PinCode], [StateCode], [Transport], [CreatedBy], [CreatedDate] FROM [Company_Mapping_AL] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020C15CAA270>"}
{"timestamp": "2025-08-01 14:57:47", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all companies in AL DB with their email, city, and GST number., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 14:57:47", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve 5 rows from the Company_Mapping table."}
{"timestamp": "2025-08-01 14:57:47", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 14:57:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve all companies from the AL database along with their email, city, and GST number."
}"}
{"timestamp": "2025-08-01 14:57:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 14:57:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve all companies from the AL database along with their email, city, and GST number.', [{'role': 'user', 'content': 'Retrieve all companies from the AL database along with their email, city, and GST number.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 14:57:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 14:57:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 14:57:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves all companies from the Company_AL table joined with their extended contact details from Company_Mapping_AL. It selects the company name, email, city, and GST number from the mapping table for each company.",
  "query": "SELECT TOP (1000) [c].[CompanyName], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [Company_AL] AS [c] JOIN [Company_Mapping_AL] AS [cm] ON [c].[ID] = [cm].[CompanyId]",
  "error": null
}"}
{"timestamp": "2025-08-01 14:57:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 14:57:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves all companies from the Company_AL table joined with their extended contact details from Company_Mapping_AL. It selects the company name, email, city, and GST number from the mapping table for each company."}
{"timestamp": "2025-08-01 14:57:51", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 14:57:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [c].[CompanyName], [cm].[Email], [cm].[City], [cm].[GSTNO] FROM [Company_AL] AS [c] JOIN [Company_Mapping_AL] AS [cm] ON [c].[ID] = [cm].[CompanyId] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020C15D5E190>"}
{"timestamp": "2025-08-01 15:04:34", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which SKUs from AF orders have a GST rate above 18%?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:04:34", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve all companies from the AL database along with their email, city, and GST number."}
{"timestamp": "2025-08-01 15:04:34", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:04:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve SKUs from AF orders where the GST rate is above 18%."
}"}
{"timestamp": "2025-08-01 15:04:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:04:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve SKUs from AF orders where the GST rate is above 18%.', [{'role': 'user', 'content': 'Retrieve SKUs from AF orders where the GST rate is above 18%.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:04:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:04:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products with missing HSN codes.
  query: SELECT [SKU], [MSKU], [ProductName] FROM [ProductMaster_GMPL] WHERE [HSNCode] IS NULL OR [HSNCode] = ''

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 15:04:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the distinct SKUs from Autofurnish order items where the corresponding product's GST rate is greater than 18%. It joins the af_orderitems_GMPL table with the ProductMaster_AL table on SKU and filters products with GST rates above 18%.",
  "query": "SELECT DISTINCT [af].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE TRY_CAST(REPLACE([pm].[GSTRate], '%', '') AS FLOAT) > 18",
  "error": null
}"}
{"timestamp": "2025-08-01 15:04:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:04:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the distinct SKUs from Autofurnish order items where the corresponding product's GST rate is greater than 18%. It joins the af_orderitems_GMPL table with the ProductMaster_AL table on SKU and filters products with GST rates above 18%."}
{"timestamp": "2025-08-01 15:04:39", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:04:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT [af].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE TRY_CAST(REPLACE([pm].[GSTRate], '%', '') AS FLOAT) > 18 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020C15D5DE80>"}
{"timestamp": "2025-08-01 15:06:13", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List AF order items with product description and brand information., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:06:13", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve SKUs from AF orders where the GST rate is above 18%."}
{"timestamp": "2025-08-01 15:06:13", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:06:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve SKUs from AF orders where the GST rate is above 18%, including product description and brand information."
}"}
{"timestamp": "2025-08-01 15:06:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:06:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve SKUs from AF orders where the GST rate is above 18%, including product description and brand information.', [{'role': 'user', 'content': 'Retrieve SKUs from AF orders where the GST rate is above 18%, including product description and brand information.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:06:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:06:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Find products with missing HSN codes.
  query: SELECT [SKU], [MSKU], [ProductName] FROM [ProductMaster_GMPL] WHERE [HSNCode] IS NULL OR [HSNCode] = ''
"}
{"timestamp": "2025-08-01 15:06:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves SKUs from Autofurnish order items joined with the ProductMaster_AL table to include product description and brand information. It filters products where the GST rate is greater than 18%. The output includes the SKU from the order items, the GST rate, product description, and brand. The GST rate comparison is done by casting the numeric part of the GST rate string to float after removing the '%' sign.",
  "query": "SELECT TOP (1000) [af].[Lineitem_sku] AS [SKU], [pm].[GSTRate], [pm].[ProductDescription], [pm].[CarBrand] FROM [af_orderitems_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE TRY_CAST(REPLACE([pm].[GSTRate], '%', '') AS FLOAT) > 18",
  "error": null
}"}
{"timestamp": "2025-08-01 15:06:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:06:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves SKUs from Autofurnish order items joined with the ProductMaster_AL table to include product description and brand information. It filters products where the GST rate is greater than 18%. The output includes the SKU from the order items, the GST rate, product description, and brand. The GST rate comparison is done by casting the numeric part of the GST rate string to float after removing the '%' sign."}
{"timestamp": "2025-08-01 15:06:19", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:06:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[Lineitem_sku] AS [SKU], [pm].[GSTRate], [pm].[ProductDescription], [pm].[CarBrand] FROM [af_orderitems_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE TRY_CAST(REPLACE([pm].[GSTRate], '%', '') AS FLOAT) > 18 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020C15D5E120>"}
{"timestamp": "2025-08-01 15:07:38", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show AmazonFlex orders grouped by ship city and match with vendor contact information where available., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:07:38", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve SKUs from AF orders where the GST rate is above 18%, including product description and brand information."}
{"timestamp": "2025-08-01 15:07:38", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:07:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available."
}"}
{"timestamp": "2025-08-01 15:07:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:07:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available.', [{'role': 'user', 'content': 'Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:07:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:07:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 15:07:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the count of AmazonFlex orders grouped by shipping city from the tbl_amazon_GMPL table. It left joins the Company_Mapping_AL table on matching city names to include vendor contact information such as ContactPerson, ContactNumber, and Email where available. The results are limited to the top 1000 cities with their respective order counts and vendor contact details.",
  "query": "SELECT TOP (1000) [a].[ShippCity], COUNT(*) AS [OrderCount], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] FROM [tbl_amazon_GMPL] AS [a] LEFT JOIN [Company_Mapping_AL] AS [cm] ON [a].[ShippCity] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[City] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [a].[ShippCity], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] ORDER BY [a].[ShippCity]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-01 15:07:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:07:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the count of AmazonFlex orders grouped by shipping city from the tbl_amazon_GMPL table. It left joins the Company_Mapping_AL table on matching city names to include vendor contact information such as ContactPerson, ContactNumber, and Email where available. The results are limited to the top 1000 cities with their respective order counts and vendor contact details."}
{"timestamp": "2025-08-01 15:07:44", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:07:45", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 15:12:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: show details abbout amazonflex, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:12:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available."}
{"timestamp": "2025-08-01 15:12:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:12:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available."
}"}
{"timestamp": "2025-08-01 15:12:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:12:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available.', [{'role': 'user', 'content': 'Retrieve AmazonFlex orders grouped by ship city and include matching vendor contact information where available.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:12:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:12:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 15:12:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the count of AmazonFlex orders grouped by shipping city from the tbl_amazon_GMPL table. It left joins the Company_Mapping_AL table on the VendorCode matching the VendorId from tbl_amazon_GMPL to include vendor contact information such as ContactPerson, ContactNumber, and Email where available. The results are grouped by the shipping city and vendor contact details, and limited to the top 1000 records.",
  "query": "SELECT TOP (1000) [a].[ShippCity], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email], COUNT(*) AS [OrderCount] FROM [tbl_amazon_GMPL] AS [a] LEFT JOIN [Company_Mapping_AL] AS [cm] ON [a].[VendorId] = TRY_CAST([cm].[VendorCode] AS INT) GROUP BY [a].[ShippCity], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] ORDER BY [a].[ShippCity]",
  "error": null
}"}
{"timestamp": "2025-08-01 15:12:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:12:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the count of AmazonFlex orders grouped by shipping city from the tbl_amazon_GMPL table. It left joins the Company_Mapping_AL table on the VendorCode matching the VendorId from tbl_amazon_GMPL to include vendor contact information such as ContactPerson, ContactNumber, and Email where available. The results are grouped by the shipping city and vendor contact details, and limited to the top 1000 records."}
{"timestamp": "2025-08-01 15:12:17", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:12:18", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 15:32:51", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-01 15:32:52", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-01 15:32:52", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 15:32:52", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 15:32:53", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 15:34:36", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 15:34:38", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 15:34:45", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show AmazonFlex orders grouped by ship city and match with vendor contact information where available., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:34:45", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 15:34:45", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:34:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available."
}"}
{"timestamp": "2025-08-01 15:34:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:34:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available.', [{'role': 'user', 'content': 'Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:34:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:34:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 15:34:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves AmazonFlex orders from tbl_amazon_GMPL grouped by shipping city. It aggregates the total quantity and total item price for each shipping city. It left joins Company_Mapping_AL to include matching vendor contact information such as ContactPerson, ContactNumber, and Email based on the shipping city matching the company city. The output includes the shipping city, total quantity, total item price, and vendor contact details.",
  "query": "WITH OrderAggregates AS ( SELECT [t].[ShippCity], SUM(TRY_CAST([t].[Quantity] AS FLOAT)) AS TotalQuantity, SUM(TRY_CAST([t].[ItemPrice] AS FLOAT)) AS TotalItemPrice FROM [tbl_amazon_GMPL] AS [t] WHERE [t].[ShippCity] IS NOT NULL GROUP BY [t].[ShippCity] ) SELECT TOP (1000) [oa].[ShippCity], ROUND([oa].[TotalQuantity], 1) AS TotalQuantity, ROUND([oa].[TotalItemPrice], 1) AS TotalItemPrice, [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] FROM [OrderAggregates] AS [oa] LEFT JOIN [Company_Mapping_AL] AS [cm] ON [oa].[ShippCity] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[City] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [oa].[ShippCity];",
  "error": null
}"}
{"timestamp": "2025-08-01 15:34:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:34:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves AmazonFlex orders from tbl_amazon_GMPL grouped by shipping city. It aggregates the total quantity and total item price for each shipping city. It left joins Company_Mapping_AL to include matching vendor contact information such as ContactPerson, ContactNumber, and Email based on the shipping city matching the company city. The output includes the shipping city, total quantity, total item price, and vendor contact details."}
{"timestamp": "2025-08-01 15:34:51", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:34:53", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 15:39:47", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-01 15:39:48", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-01 15:39:48", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 15:39:48", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 15:39:49", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 15:40:01", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 15:40:02", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 15:40:14", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show AmazonFlex orders grouped by ship city and match with vendor contact information where available., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:40:14", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 15:40:14", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:40:15", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available."
}"}
{"timestamp": "2025-08-01 15:40:15", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:40:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available.', [{'role': 'user', 'content': 'Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:40:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:40:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 15:40:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves AmazonFlex orders from tbl_amazon_GMPL grouped by shipping city. It aggregates the total quantity and total item price for each shipping city. It left joins with Company_Mapping_AL to include matching vendor contact information based on the shipping city matching the company city. The output includes the shipping city, total quantity, total item price, and vendor contact details such as contact person, contact number, and email.",
  "query": "WITH OrderAggregates AS ( SELECT [t].[ShippCity], SUM(TRY_CAST([t].[Quantity] AS FLOAT)) AS [TotalQuantity], SUM(TRY_CAST([t].[ItemPrice] AS FLOAT)) AS [TotalItemPrice] FROM [tbl_amazon_GMPL] AS [t] WHERE [t].[ShippCity] IS NOT NULL GROUP BY [t].[ShippCity] ) SELECT TOP (1000) [oa].[ShippCity], ROUND([oa].[TotalQuantity], 1) AS [TotalQuantity], ROUND([oa].[TotalItemPrice], 1) AS [TotalItemPrice], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] FROM [OrderAggregates] AS [oa] LEFT JOIN [Company_Mapping_AL] AS [cm] ON [oa].[ShippCity] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[City] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [oa].[ShippCity];",
  "error": null
}"}
{"timestamp": "2025-08-01 15:40:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:40:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves AmazonFlex orders from tbl_amazon_GMPL grouped by shipping city. It aggregates the total quantity and total item price for each shipping city. It left joins with Company_Mapping_AL to include matching vendor contact information based on the shipping city matching the company city. The output includes the shipping city, total quantity, total item price, and vendor contact details such as contact person, contact number, and email."}
{"timestamp": "2025-08-01 15:40:20", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:40:22", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 15:45:35", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-01 15:45:36", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-01 15:45:36", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-01 15:45:36", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-01 15:45:37", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-01 15:45:52", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 15:45:53", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 15:45:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show AmazonFlex orders grouped by ship city and match with vendor contact information where available., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 15:45:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 15:45:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 15:45:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available."
}"}
{"timestamp": "2025-08-01 15:45:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 15:45:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available.', [{'role': 'user', 'content': 'Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 15:45:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 15:45:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 15:46:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the count of Amazon Flex orders grouped by ship city from the tbl_AmazonFlex_GMPL table. It left joins the company_mapping_GMPL table on the VendorCode matching the ship city to include vendor contact information such as ContactPerson, ContactNumber, and Email where available. The results are limited to the top 1000 ship cities with their respective order counts and vendor contact details.",
  "query": "SELECT TOP (1000) [af].[shipcity], COUNT(*) AS [OrderCount], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] FROM [tbl_AmazonFlex_GMPL] AS [af] LEFT JOIN [company_mapping_GMPL] AS [cm] ON [af].[shipcity] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [af].[shipcity], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] ORDER BY [af].[shipcity];",
  "error": null
}"}
{"timestamp": "2025-08-01 15:46:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 15:46:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the count of Amazon Flex orders grouped by ship city from the tbl_AmazonFlex_GMPL table. It left joins the company_mapping_GMPL table on the VendorCode matching the ship city to include vendor contact information such as ContactPerson, ContactNumber, and Email where available. The results are limited to the top 1000 ship cities with their respective order counts and vendor contact details."}
{"timestamp": "2025-08-01 15:46:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 15:46:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[shipcity], COUNT(*) AS [OrderCount], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] FROM [tbl_AmazonFlex_GMPL] AS [af] LEFT JOIN [company_mapping_GMPL] AS [cm] ON [af].[shipcity] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [af].[shipcity], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] ORDER BY [af].[shipcity]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21EB310>"}
{"timestamp": "2025-08-01 16:07:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the shipping tax and city for all AmazonFlex orders for products with MSP > 500?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:07:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display AmazonFlex orders grouped by ship city and include matching vendor contact information where available."}
{"timestamp": "2025-08-01 16:07:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:07:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the shipping tax and ship city for all AmazonFlex orders where the product's MSP is greater than 500, including matching vendor contact information where available."
}"}
{"timestamp": "2025-08-01 16:07:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:07:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Display the shipping tax and ship city for all AmazonFlex orders where the product's MSP is greater than 500, including matching vendor contact information where available.", [{'role': 'user', 'content': "Display the shipping tax and ship city for all AmazonFlex orders where the product's MSP is greater than 500, including matching vendor contact information where available."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:07:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:07:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-01 16:07:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the shipping tax and ship city from Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on SKU to filter by MSP, and left joins Company_Mapping_AL on VendorCode matching VendorId from AmazonFlex to include vendor contact information where available.",
  "query": "SELECT TOP (1000) af.[ShippingTax], af.[shipcity], cm.[ContactPerson], cm.[ContactNumber], cm.[Email] FROM [tbl_AmazonFlex_GMPL] AS af JOIN [ProductMaster_AL] AS pm ON af.[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = pm.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN [Company_Mapping_AL] AS cm ON TRY_CAST(af.[VendorId] AS NVARCHAR(200)) COLLATE SQL_Latin1_General_CP1_CI_AS = cm.[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST(pm.[MSP] AS FLOAT) > 500",
  "error": null
}"}
{"timestamp": "2025-08-01 16:07:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:07:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the shipping tax and ship city from Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on SKU to filter by MSP, and left joins Company_Mapping_AL on VendorCode matching VendorId from AmazonFlex to include vendor contact information where available."}
{"timestamp": "2025-08-01 16:07:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:07:52", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 16:11:57", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 16:11:57", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 16:12:03", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Give me vendor id, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:12:03", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 16:12:03", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:12:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the vendor ID."
}"}
{"timestamp": "2025-08-01 16:12:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:12:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the vendor ID.', [{'role': 'user', 'content': 'Retrieve the vendor ID.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:12:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:12:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-01 16:12:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 1000 vendor IDs from the Company_AL table.",
  "query": "SELECT TOP (1000) [c].[VendorId] FROM [Company_AL] AS [c];",
  "error": null
}"}
{"timestamp": "2025-08-01 16:12:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:12:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 1000 vendor IDs from the Company_AL table."}
{"timestamp": "2025-08-01 16:12:07", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:12:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [c].[VendorId] FROM [Company_AL] AS [c]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9B00>"}
{"timestamp": "2025-08-01 16:14:15", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 16:14:15", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 16:14:28", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Give me vendor id GMPL db, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:14:28", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 16:14:28", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:14:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the vendor ID from the GMPL database."
}"}
{"timestamp": "2025-08-01 16:14:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:14:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the vendor ID from the GMPL database.', [{'role': 'user', 'content': 'Retrieve the vendor ID from the GMPL database.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:14:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:14:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]
"}
{"timestamp": "2025-08-01 16:14:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 1000 vendor IDs from the Company_Mapping_GMPL table in the GMPL database.",
  "query": "SELECT TOP (1000) [cmap].[VendorCode] FROM [company_mapping_GMPL] AS [cmap]",
  "error": null
}"}
{"timestamp": "2025-08-01 16:14:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:14:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 1000 vendor IDs from the Company_Mapping_GMPL table in the GMPL database."}
{"timestamp": "2025-08-01 16:14:32", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:14:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cmap].[VendorCode] FROM [company_mapping_GMPL] AS [cmap] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC79A0>"}
{"timestamp": "2025-08-01 16:17:06", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 16:17:07", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 16:17:10", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the shipping tax and city for all AmazonFlex orders for products with MSP > 500?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:17:10", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 16:17:10", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:17:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."
}"}
{"timestamp": "2025-08-01 16:17:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:17:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500.", [{'role': 'user', 'content': "Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:17:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:17:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product pricing (MRP, MSP, RP) for each product.
  query: SELECT [ProductName], [SKU], [MRP], [MSP], [RP] FROM [ProductMaster_AL] WHERE [IsActive] = 1

Example 2:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1
"}
{"timestamp": "2025-08-01 16:17:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the shipping tax and ship city from the Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on the SKU and MSKU columns to filter orders based on the MSP value from the product master. The MSP is cast to float for numeric comparison.",
  "query": "SELECT TOP (1000) [af].[ShippingTax], [af].[shipcity] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([pm].[MSP] AS FLOAT) > 500",
  "error": null
}"}
{"timestamp": "2025-08-01 16:17:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:17:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the shipping tax and ship city from the Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on the SKU and MSKU columns to filter orders based on the MSP value from the product master. The MSP is cast to float for numeric comparison."}
{"timestamp": "2025-08-01 16:17:15", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:17:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[ShippingTax], [af].[shipcity] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([pm].[MSP] AS FLOAT) > 500 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2153230>"}
{"timestamp": "2025-08-01 16:17:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 16:17:45", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 16:17:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List Amazon listed products with their brand and MRP from ProductMaster., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:17:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 16:17:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:17:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products listed on Amazon from the ProductMaster table, including their brand and MRP."
}"}
{"timestamp": "2025-08-01 16:17:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products listed on Amazon from the ProductMaster table, including their brand and MRP.', [{'role': 'user', 'content': 'List all products listed on Amazon from the ProductMaster table, including their brand and MRP.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product pricing (MRP, MSP, RP) for each product.
  query: SELECT [ProductName], [SKU], [MRP], [MSP], [RP] FROM [ProductMaster_AL] WHERE [IsActive] = 1

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 16:17:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 products that are listed on Amazon by joining the AmazonListing_GMPL table with the ProductMaster_AL table on the SKU and OriginalSku columns. It selects the product's ProductName from AmazonListing, the CarBrand, and the MRP from ProductMaster. Only active and non-deleted products are included.",
  "query": "SELECT TOP (1000) a.[ProductName], p.[CarBrand], p.[MRP] FROM [AmazonListing_GMPL] AS a JOIN [ProductMaster_AL] AS p ON a.[OriginalSku] = p.[SKU] WHERE p.[IsActive] = 1 AND p.[IsDeleted] = 0",
  "error": null
}"}
{"timestamp": "2025-08-01 16:17:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:17:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 products that are listed on Amazon by joining the AmazonListing_GMPL table with the ProductMaster_AL table on the SKU and OriginalSku columns. It selects the product's ProductName from AmazonListing, the CarBrand, and the MRP from ProductMaster. Only active and non-deleted products are included."}
{"timestamp": "2025-08-01 16:17:53", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:17:54", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) a.[ProductName], p.[CarBrand], p.[MRP] FROM [AmazonListing_GMPL] AS a JOIN [ProductMaster_AL] AS p ON a.[OriginalSku] = p.[SKU] WHERE p.[IsActive] = 1 AND p.[IsDeleted] = 0 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21500C0>"}
{"timestamp": "2025-08-01 16:27:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-01 16:27:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-01 16:27:36", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the shipping tax and city for all AmazonFlex orders for products with MSP > 500?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:27:36", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-01 16:27:36", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:27:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."
}"}
{"timestamp": "2025-08-01 16:27:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:27:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500.", [{'role': 'user', 'content': "Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:27:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:27:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product pricing (MRP, MSP, RP) for each product.
  query: SELECT [ProductName], [SKU], [MRP], [MSP], [RP] FROM [ProductMaster_AL] WHERE [IsActive] = 1

Example 2:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1
"}
{"timestamp": "2025-08-01 16:27:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the shipping tax and ship city from the Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on the SKU and MSKU columns to filter orders based on the MSP value from the product master. The MSP is cast to float for numeric comparison.",
  "query": "SELECT TOP (1000) [af].[ShippingTax], [af].[shipcity] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([pm].[MSP] AS FLOAT) > 500",
  "error": null
}"}
{"timestamp": "2025-08-01 16:27:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:27:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the shipping tax and ship city from the Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on the SKU and MSKU columns to filter orders based on the MSP value from the product master. The MSP is cast to float for numeric comparison."}
{"timestamp": "2025-08-01 16:27:41", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:27:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[ShippingTax], [af].[shipcity] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([pm].[MSP] AS FLOAT) > 500 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21EB460>"}
{"timestamp": "2025-08-01 16:29:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the shipping tax and city for all AmazonFlex orders for products with MSP > 500?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:29:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."}
{"timestamp": "2025-08-01 16:29:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:29:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."
}"}
{"timestamp": "2025-08-01 16:29:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:29:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500.", [{'role': 'user', 'content': "Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:29:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:29:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product pricing (MRP, MSP, RP) for each product.
  query: SELECT [ProductName], [SKU], [MRP], [MSP], [RP] FROM [ProductMaster_AL] WHERE [IsActive] = 1

Example 2:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1
"}
{"timestamp": "2025-08-01 16:29:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the shipping tax and ship city from the Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on the SKU and MSKU columns to filter orders based on the MSP value from the product master. The MSP is cast to float for numeric comparison.",
  "query": "SELECT TOP (1000) [af].[ShippingTax], [af].[shipcity] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([pm].[MSP] AS FLOAT) > 500",
  "error": null
}"}
{"timestamp": "2025-08-01 16:29:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:29:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the shipping tax and ship city from the Amazon Flex orders where the product's MSP is greater than 500. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on the SKU and MSKU columns to filter orders based on the MSP value from the product master. The MSP is cast to float for numeric comparison."}
{"timestamp": "2025-08-01 16:29:10", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:29:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[ShippingTax], [af].[shipcity] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([pm].[MSP] AS FLOAT) > 500 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9EF0>"}
{"timestamp": "2025-08-01 16:29:22", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which orders (OTC and Autofurnish) share the same SKU and what are their selling prices?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:29:22", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the shipping tax and city for all AmazonFlex orders where the product's MSP is greater than 500."}
{"timestamp": "2025-08-01 16:29:22", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:29:23", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the orders from OTC and Autofurnish that share the same SKU and list their selling prices."
}"}
{"timestamp": "2025-08-01 16:29:23", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:29:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the orders from OTC and Autofurnish that share the same SKU and list their selling prices.', [{'role': 'user', 'content': 'Retrieve the orders from OTC and Autofurnish that share the same SKU and list their selling prices.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:29:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:29:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3
"}
{"timestamp": "2025-08-01 16:29:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves orders from both tbl_OTCSale_GMPL and af_orderitems_GMPL that share the same SKU. It joins tbl_OTCSale_GMPL and af_orderitems_GMPL on SKU and Lineitem_sku respectively, and selects the SKU along with the selling price from OTC sales and the line item price from Autofurnish orders.",
  "query": "SELECT TOP (1000) otc.[SKU], otc.[Selling_Price], CAST(af.[Lineitem_price] AS VARCHAR) AS [AF_Lineitem_Price] FROM [tbl_OTCSale_GMPL] AS otc INNER JOIN [af_orderitems_GMPL] AS af ON otc.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = af.[Lineitem_sku] COLLATE SQL_Latin1_General_CP1_CI_AS",
  "error": null
}"}
{"timestamp": "2025-08-01 16:29:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:29:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves orders from both tbl_OTCSale_GMPL and af_orderitems_GMPL that share the same SKU. It joins tbl_OTCSale_GMPL and af_orderitems_GMPL on SKU and Lineitem_sku respectively, and selects the SKU along with the selling price from OTC sales and the line item price from Autofurnish orders."}
{"timestamp": "2025-08-01 16:29:27", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:29:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) otc.[SKU], otc.[Selling_Price], CAST(af.[Lineitem_price] AS VARCHAR) AS [AF_Lineitem_Price] FROM [tbl_OTCSale_GMPL] AS otc INNER JOIN [af_orderitems_GMPL] AS af ON otc.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = af.[Lineitem_sku] COLLATE SQL_Latin1_General_CP1_CI_AS : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9EF0>"}
{"timestamp": "2025-08-01 16:31:03", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the warehouses storing items from the most sold MSKU in OTC sales., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:31:03", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the orders from OTC and Autofurnish that share the same SKU and list their selling prices."}
{"timestamp": "2025-08-01 16:31:03", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:31:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the warehouses that store items corresponding to the most sold MSKU in OTC sales."
}"}
{"timestamp": "2025-08-01 16:31:04", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the warehouses that store items corresponding to the most sold MSKU in OTC sales.', [{'role': 'user', 'content': 'Identify the warehouses that store items corresponding to the most sold MSKU in OTC sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 16:31:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the warehouses that store items corresponding to the most sold MSKU in OTC sales. It first calculates the MSKU with the highest total quantity sold in tbl_OTCSale_GMPL by summing the TRY_CAST of Quantity as FLOAT, then selects distinct WarehouseId from InventoryDetail_GMPL where the MSKU matches the most sold MSKU.",
  "query": "WITH MostSoldMSKU_CTE AS ( SELECT TOP (1) [t].[MSKU], SUM(TRY_CAST([t].[Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[MSKU] IS NOT NULL GROUP BY [t].[MSKU] ORDER BY TotalQuantity DESC ) SELECT DISTINCT [i].[WarehouseId] FROM [InventoryDetail_GMPL] AS [i] JOIN MostSoldMSKU_CTE AS [m] ON [i].[MSKU] = [m].[MSKU];",
  "error": null
}"}
{"timestamp": "2025-08-01 16:31:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:31:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the warehouses that store items corresponding to the most sold MSKU in OTC sales. It first calculates the MSKU with the highest total quantity sold in tbl_OTCSale_GMPL by summing the TRY_CAST of Quantity as FLOAT, then selects distinct WarehouseId from InventoryDetail_GMPL where the MSKU matches the most sold MSKU."}
{"timestamp": "2025-08-01 16:31:08", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:31:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH MostSoldMSKU_CTE AS ( SELECT TOP (1) [t].[MSKU], SUM(TRY_CAST([t].[Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[MSKU] IS NOT NULL GROUP BY [t].[MSKU] ORDER BY TotalQuantity DESC ) SELECT DISTINCT [i].[WarehouseId] FROM [InventoryDetail_GMPL] AS [i] JOIN MostSoldMSKU_CTE AS [m] ON [i].[MSKU] = [m].[MSKU]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC6510>"}
{"timestamp": "2025-08-01 16:33:23", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which vendor has the highest number of unique products sold through OTC sales?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:33:23", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the warehouses that store items corresponding to the most sold MSKU in OTC sales."}
{"timestamp": "2025-08-01 16:33:23", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:33:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the vendor with the highest number of unique products sold through OTC sales."
}"}
{"timestamp": "2025-08-01 16:33:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:33:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the vendor with the highest number of unique products sold through OTC sales.', [{'role': 'user', 'content': 'Identify the vendor with the highest number of unique products sold through OTC sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:33:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:33:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 16:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the vendor with the highest number of unique products sold through OTC sales. It counts distinct SKUs sold per VendorId from the tbl_OTCSale_GMPL table, groups by VendorId, orders the count in descending order, and selects the top vendor with the highest unique product count.",
  "query": "SELECT TOP (1) [t].[VendorId], COUNT(DISTINCT [t].[SKU]) AS [UniqueProductCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[VendorId] IS NOT NULL GROUP BY [t].[VendorId] ORDER BY COUNT(DISTINCT [t].[SKU]) DESC",
  "error": null
}"}
{"timestamp": "2025-08-01 16:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the vendor with the highest number of unique products sold through OTC sales. It counts distinct SKUs sold per VendorId from the tbl_OTCSale_GMPL table, groups by VendorId, orders the count in descending order, and selects the top vendor with the highest unique product count."}
{"timestamp": "2025-08-01 16:33:28", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:33:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1) [t].[VendorId], COUNT(DISTINCT [t].[SKU]) AS [UniqueProductCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[VendorId] IS NOT NULL GROUP BY [t].[VendorId] ORDER BY COUNT(DISTINCT [t].[SKU]) DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9EF0>"}
{"timestamp": "2025-08-01 16:36:53", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show a summary of total sales (Autofurnish + OTC) grouped by product and GST rate., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:36:53", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the vendor with the highest number of unique products sold through OTC sales."}
{"timestamp": "2025-08-01 16:36:53", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:36:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show a summary of total sales combining Autofurnish and OTC sales, grouped by product and GST rate."
}"}
{"timestamp": "2025-08-01 16:36:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show a summary of total sales combining Autofurnish and OTC sales, grouped by product and GST rate.', [{'role': 'user', 'content': 'Show a summary of total sales combining Autofurnish and OTC sales, grouped by product and GST rate.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 16:37:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total sales amount from Autofurnish order items and OTC sales, grouped by product SKU and GST rate. It uses two CTEs to aggregate sales from each source separately, summing the line item prices for Autofurnish and the Amount for OTC sales after casting to float. The results are then combined using a full outer join on SKU and GST rate, with nulls replaced by 'Unknown' for SKU and 'Not Specified' for GST rate. The final output shows SKU, GST rate, and the combined total sales amount rounded to one decimal place, ordered by SKU and GST rate.",
  "query": "WITH AutofurnishSales AS ( SELECT [af].[Lineitem_sku] AS [SKU], 'Unknown' AS [GSTRate], ROUND(SUM(TRY_CAST([af].[Lineitem_price] AS FLOAT)), 1) AS [TotalSales] FROM [af_orderitems_GMPL] AS [af] GROUP BY [af].[Lineitem_sku] ), OTCSales AS ( SELECT [otc].[SKU], COALESCE([pm].[GSTRate], 'Not Specified') AS [GSTRate], ROUND(SUM(TRY_CAST([otc].[Amount] AS FLOAT)), 1) AS [TotalSales] FROM [tbl_OTCSale_GMPL] AS [otc] LEFT JOIN [ProductMaster_AL] AS [pm] ON [otc].[SKU] = [pm].[SKU] GROUP BY [otc].[SKU], COALESCE([pm].[GSTRate], 'Not Specified') ) SELECT COALESCE([a].[SKU], [o].[SKU]) AS [SKU], COALESCE([a].[GSTRate], [o].[GSTRate]) AS [GSTRate], ROUND(COALESCE([a].[TotalSales], 0) + COALESCE([o].[TotalSales], 0), 1) AS [TotalSales] FROM [AutofurnishSales] AS [a] FULL OUTER JOIN [OTCSales] AS [o] ON [a].[SKU] = [o].[SKU] AND [a].[GSTRate] = [o].[GSTRate] ORDER BY [SKU], [GSTRate]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-01 16:37:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:37:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total sales amount from Autofurnish order items and OTC sales, grouped by product SKU and GST rate. It uses two CTEs to aggregate sales from each source separately, summing the line item prices for Autofurnish and the Amount for OTC sales after casting to float. The results are then combined using a full outer join on SKU and GST rate, with nulls replaced by 'Unknown' for SKU and 'Not Specified' for GST rate. The final output shows SKU, GST rate, and the combined total sales amount rounded to one decimal place, ordered by SKU and GST rate."}
{"timestamp": "2025-08-01 16:37:02", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:37:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AutofurnishSales AS ( SELECT [af].[Lineitem_sku] AS [SKU], 'Unknown' AS [GSTRate], ROUND(SUM(TRY_CAST([af].[Lineitem_price] AS FLOAT)), 1) AS [TotalSales] FROM [af_orderitems_GMPL] AS [af] GROUP BY [af].[Lineitem_sku] ), OTCSales AS ( SELECT [otc].[SKU], COALESCE([pm].[GSTRate], 'Not Specified') AS [GSTRate], ROUND(SUM(TRY_CAST([otc].[Amount] AS FLOAT)), 1) AS [TotalSales] FROM [tbl_OTCSale_GMPL] AS [otc] LEFT JOIN [ProductMaster_AL] AS [pm] ON [otc].[SKU] = [pm].[SKU] GROUP BY [otc].[SKU], COALESCE([pm].[GSTRate], 'Not Specified') ) SELECT COALESCE([a].[SKU], [o].[SKU]) AS [SKU], COALESCE([a].[GSTRate], [o].[GSTRate]) AS [GSTRate], ROUND(COALESCE([a].[TotalSales], 0) + COALESCE([o].[TotalSales], 0), 1) AS [TotalSales] FROM [AutofurnishSales] AS [a] FULL OUTER JOIN [OTCSales] AS [o] ON [a].[SKU] = [o].[SKU] AND [a].[GSTRate] = [o].[GSTRate] ORDER BY [SKU], [GSTRate] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21212B0>"}
{"timestamp": "2025-08-01 16:40:11", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which Amazon Flex orders were shipped for products listed in AmazonListing?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 16:40:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Show a summary of total sales combining Autofurnish and OTC sales, grouped by product and GST rate."}
{"timestamp": "2025-08-01 16:40:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 16:40:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all Amazon Flex orders that were shipped for products listed in AmazonListing."
}"}
{"timestamp": "2025-08-01 16:40:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 16:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all Amazon Flex orders that were shipped for products listed in AmazonListing.', [{'role': 'user', 'content': 'List all Amazon Flex orders that were shipped for products listed in AmazonListing.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 16:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 16:40:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1

Example 2:
  input: Get all Amazon listings with missing ASIN values.
  query: SELECT [MSKU], [OriginalSku], [Asin] FROM [AmazonListing_GMPL] WHERE [Asin] IS NULL OR [Asin] = '#N/A'
"}
{"timestamp": "2025-08-01 16:40:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 Amazon Flex orders that have a non-null ship city, indicating they were shipped, and whose SKU matches the SKU of products listed in the AmazonListing_GMPL table. It selects the Amazon Flex order ID, SKU, product name, ship city, and purchase date.",
  "query": "SELECT TOP (1000) [af].[Id], [af].[sku], [af].[productname], [af].[shipcity], [af].[purchasedate] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [AmazonListing_GMPL] AS [al] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [al].[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE [af].[shipcity] IS NOT NULL",
  "error": null
}"}
{"timestamp": "2025-08-01 16:40:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 16:40:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 Amazon Flex orders that have a non-null ship city, indicating they were shipped, and whose SKU matches the SKU of products listed in the AmazonListing_GMPL table. It selects the Amazon Flex order ID, SKU, product name, ship city, and purchase date."}
{"timestamp": "2025-08-01 16:40:17", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 16:40:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[Id], [af].[sku], [af].[productname], [af].[shipcity], [af].[purchasedate] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [AmazonListing_GMPL] AS [al] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [al].[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE [af].[shipcity] IS NOT NULL : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F22C5A20>"}
{"timestamp": "2025-08-01 17:07:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List the product name, category, and inventory status for each product stored in the warehouse., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:07:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all Amazon Flex orders that were shipped for products listed in AmazonListing."}
{"timestamp": "2025-08-01 17:07:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:07:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the product name, category, and inventory status for each product stored in the warehouse, including only those products that have Amazon Flex orders shipped and are listed in AmazonListing."
}"}
{"timestamp": "2025-08-01 17:07:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:07:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List the product name, category, and inventory status for each product stored in the warehouse, including only those products that have Amazon Flex orders shipped and are listed in AmazonListing.', [{'role': 'user', 'content': 'List the product name, category, and inventory status for each product stored in the warehouse, including only those products that have Amazon Flex orders shipped and are listed in AmazonListing.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:07:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:07:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-01 17:07:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the product name, primary category, and inventory status for products that are stored in the warehouse, have Amazon Flex orders shipped, and are listed in the AmazonListing table. It joins ProductMaster with InventoryDetail on MSKU, filters InventoryDetail for non-null MSKU, joins AmazonListing on MSKU, and joins tbl_AmazonFlex on SKU matching AmazonListing.Sku. It filters Amazon Flex orders with non-null shipservicelevel indicating shipped orders. The output includes the product's ProductName, Category1, and InventoryType.",
  "query": "SELECT TOP (1000) p.[ProductName], p.[Category1], i.[InventoryType] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] JOIN [AmazonListing_GMPL] AS a ON p.[MSKU] = a.[MSKU] JOIN [tbl_AmazonFlex_GMPL] AS af ON a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = af.[sku] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE af.[shipservicelevel] IS NOT NULL"
  ,
  "error": null
}"}
{"timestamp": "2025-08-01 17:07:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:07:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the product name, primary category, and inventory status for products that are stored in the warehouse, have Amazon Flex orders shipped, and are listed in the AmazonListing table. It joins ProductMaster with InventoryDetail on MSKU, filters InventoryDetail for non-null MSKU, joins AmazonListing on MSKU, and joins tbl_AmazonFlex on SKU matching AmazonListing.Sku. It filters Amazon Flex orders with non-null shipservicelevel indicating shipped orders. The output includes the product's ProductName, Category1, and InventoryType."}
{"timestamp": "2025-08-01 17:07:53", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:07:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[ProductName], p.[Category1], i.[InventoryType] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] JOIN [AmazonListing_GMPL] AS a ON p.[MSKU] = a.[MSKU] JOIN [tbl_AmazonFlex_GMPL] AS af ON a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = af.[sku] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE af.[shipservicelevel] IS NOT NULL : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9E10>"}
{"timestamp": "2025-08-01 17:11:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which racks in the warehouse are storing items from the ProductMaster table with GST greater than 12?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:11:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the product name, category, and inventory status for each product stored in the warehouse, including only those products that have Amazon Flex orders shipped and are listed in AmazonListing."}
{"timestamp": "2025-08-01 17:11:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:11:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the racks in the warehouse that are storing products from the ProductMaster table where the GST is greater than 12, considering only those products that have Amazon Flex orders shipped and are listed in AmazonListing."
}"}
{"timestamp": "2025-08-01 17:11:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:11:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List the racks in the warehouse that are storing products from the ProductMaster table where the GST is greater than 12, considering only those products that have Amazon Flex orders shipped and are listed in AmazonListing.', [{'role': 'user', 'content': 'List the racks in the warehouse that are storing products from the ProductMaster table where the GST is greater than 12, considering only those products that have Amazon Flex orders shipped and are listed in AmazonListing.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:11:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:11:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: Count the number of racks per warehouse.
  query: SELECT w.[Name] AS WarehouseName, COUNT(r.[ID]) AS RackCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [tbl_Rack_GMPL] r ON w.[ID] = r.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-01 17:11:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the distinct racks that store products from ProductMaster with a GST rate greater than 12%. It joins InventoryDetail with ProductMaster on MSKU, filters products with GST rate > 12%, and ensures these products have corresponding Amazon Flex orders shipped (joined on SKU) and are listed in AmazonListing (joined on MSKU). The output includes the rack names.",
  "query": "SELECT DISTINCT [r].[Name] AS [RackName] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] INNER JOIN [ProductMaster_AL] AS [p] ON [i].[MSKU] = [p].[MSKU] INNER JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS INNER JOIN [AmazonListing_GMPL] AS [al] ON [al].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST(REPLACE([p].[GSTRate], '%', '') AS FLOAT) > 12 AND [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Shipped'",
  "error": null
}"}
{"timestamp": "2025-08-01 17:11:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:11:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the distinct racks that store products from ProductMaster with a GST rate greater than 12%. It joins InventoryDetail with ProductMaster on MSKU, filters products with GST rate > 12%, and ensures these products have corresponding Amazon Flex orders shipped (joined on SKU) and are listed in AmazonListing (joined on MSKU). The output includes the rack names."}
{"timestamp": "2025-08-01 17:11:14", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:11:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT [r].[Name] AS [RackName] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] INNER JOIN [ProductMaster_AL] AS [p] ON [i].[MSKU] = [p].[MSKU] INNER JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS INNER JOIN [AmazonListing_GMPL] AS [al] ON [al].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST(REPLACE([p].[GSTRate], '%', '') AS FLOAT) > 12 AND [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Shipped' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9A90>"}
{"timestamp": "2025-08-01 17:17:42", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What are the warehouse names where products with 'Draft' status are stored?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:17:42", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the racks in the warehouse that are storing products from the ProductMaster table where the GST is greater than 12, considering only those products that have Amazon Flex orders shipped and are listed in AmazonListing."}
{"timestamp": "2025-08-01 17:17:42", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:17:44", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the warehouse names where products with 'Draft' status are stored, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped and are listed in AmazonListing."
}"}
{"timestamp": "2025-08-01 17:17:44", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:17:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("List the warehouse names where products with 'Draft' status are stored, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped and are listed in AmazonListing.", [{'role': 'user', 'content': "List the warehouse names where products with 'Draft' status are stored, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped and are listed in AmazonListing."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:17:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:17:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all active warehouses with their locations.
  query: SELECT [Name], [Location] FROM [tbl_Warehouse_GMPL] WHERE [IsActive] = 1
"}
{"timestamp": "2025-08-01 17:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the distinct warehouse names where products with 'Draft' status from ProductMaster_AL, having GST rate greater than 12%, are stored. It joins ProductMaster_AL with AmazonListing_GMPL on MSKU, then joins with tbl_AmazonFlex_GMPL on SKU to filter only shipped Amazon Flex orders. Finally, it joins with InventoryDetail_GMPL and tbl_rack_GMPL to get the warehouse names where these products are stored.",
  "query": "SELECT DISTINCT [r].[Name] AS [WarehouseName] FROM [ProductMaster_AL] AS [p] JOIN [AmazonListing_GMPL] AS [a] ON [p].[MSKU] = [a].[MSKU] JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [a].[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [p].[ProductStatus] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Draft' AND TRY_CAST(REPLACE([p].[GSTRate], '%', '') AS FLOAT) > 12 AND [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Shipped'",
  "error": null
}"}
{"timestamp": "2025-08-01 17:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the distinct warehouse names where products with 'Draft' status from ProductMaster_AL, having GST rate greater than 12%, are stored. It joins ProductMaster_AL with AmazonListing_GMPL on MSKU, then joins with tbl_AmazonFlex_GMPL on SKU to filter only shipped Amazon Flex orders. Finally, it joins with InventoryDetail_GMPL and tbl_rack_GMPL to get the warehouse names where these products are stored."}
{"timestamp": "2025-08-01 17:17:50", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:17:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT [r].[Name] AS [WarehouseName] FROM [ProductMaster_AL] AS [p] JOIN [AmazonListing_GMPL] AS [a] ON [p].[MSKU] = [a].[MSKU] JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [a].[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [p].[ProductStatus] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Draft' AND TRY_CAST(REPLACE([p].[GSTRate], '%', '') AS FLOAT) > 12 AND [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Shipped' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F22C5A20>"}
{"timestamp": "2025-08-01 17:18:39", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the product name and vendor contact person for products listed in AmazonListing., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:18:39", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the warehouse names where products with 'Draft' status are stored, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped and are listed in AmazonListing."}
{"timestamp": "2025-08-01 17:18:39", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:18:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the product name and vendor contact person for products listed in AmazonListing, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped, and are stored in warehouses where products with 'Draft' status are kept."
}"}
{"timestamp": "2025-08-01 17:18:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:18:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve the product name and vendor contact person for products listed in AmazonListing, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped, and are stored in warehouses where products with 'Draft' status are kept.", [{'role': 'user', 'content': "Retrieve the product name and vendor contact person for products listed in AmazonListing, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped, and are stored in warehouses where products with 'Draft' status are kept."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:18:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:18:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 17:18:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the product name from AmazonListing_GMPL and the contact person from Company_Mapping_AL for products that meet the following criteria: The product's GST rate in ProductMaster_AL is greater than 12%, the product has been shipped in Amazon Flex orders (tbl_AmazonFlex_GMPL with non-null shipcity), and the product is stored in warehouses where inventory items with 'Draft' status exist in InventoryDetail_GMPL. The query joins AmazonListing_GMPL with ProductMaster_AL on MSKU, joins Amazon Flex orders on SKU, and filters InventoryDetail_GMPL for 'Draft' status. It also joins Company_Mapping_AL to get the vendor contact person based on VendorCode matching VendorId from AmazonListing_GMPL. The result includes the AmazonListing product name and the vendor contact person.",
  "query": "WITH DraftWarehouses AS ( SELECT DISTINCT [i].[WarehouseId] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[Status] = 7201 ), ShippedAmazonFlex AS ( SELECT DISTINCT [af].[sku] FROM [tbl_AmazonFlex_GMPL] AS [af] WHERE [af].[shipcity] IS NOT NULL ), EligibleProducts AS ( SELECT [a].[Id], [a].[ProductName], [a].[MSKU], [a].[VendorCode] FROM [AmazonListing_GMPL] AS [a] JOIN [ProductMaster_AL] AS [p] ON [a].[OriginalSku] = [p].[SKU] WHERE TRY_CAST(REPLACE([p].[GSTRate], '%', '') AS FLOAT) > 12 ), ProductsInDraftWarehouses AS ( SELECT DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[WarehouseId] IN (SELECT [WarehouseId] FROM DraftWarehouses) ) SELECT TOP (1000) [ep].[ProductName], [cm].[ContactPerson] FROM EligibleProducts AS [ep] JOIN ShippedAmazonFlex AS [saf] ON [ep].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [saf].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN ProductsInDraftWarehouses AS [pidw] ON [ep].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [pidw].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN [Company_Mapping_AL] AS [cm] ON [ep].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [ep].[ProductName];",
  "error": null
}"}
{"timestamp": "2025-08-01 17:18:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:18:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the product name from AmazonListing_GMPL and the contact person from Company_Mapping_AL for products that meet the following criteria: The product's GST rate in ProductMaster_AL is greater than 12%, the product has been shipped in Amazon Flex orders (tbl_AmazonFlex_GMPL with non-null shipcity), and the product is stored in warehouses where inventory items with 'Draft' status exist in InventoryDetail_GMPL. The query joins AmazonListing_GMPL with ProductMaster_AL on MSKU, joins Amazon Flex orders on SKU, and filters InventoryDetail_GMPL for 'Draft' status. It also joins Company_Mapping_AL to get the vendor contact person based on VendorCode matching VendorId from AmazonListing_GMPL. The result includes the AmazonListing product name and the vendor contact person."}
{"timestamp": "2025-08-01 17:18:50", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:18:50", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 17:19:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies have mapped vendor codes that appear in more than 3 OTC sales?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:19:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the product name and vendor contact person for products listed in AmazonListing, considering only those products from the ProductMaster table where the GST is greater than 12, that have Amazon Flex orders shipped, and are stored in warehouses where products with 'Draft' status are kept."}
{"timestamp": "2025-08-01 17:19:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:19:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the list of companies that have mapped vendor codes appearing in more than 3 OTC sales."
}"}
{"timestamp": "2025-08-01 17:19:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:19:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the list of companies that have mapped vendor codes appearing in more than 3 OTC sales.', [{'role': 'user', 'content': 'Retrieve the list of companies that have mapped vendor codes appearing in more than 3 OTC sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:19:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:19:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of companies from company_mapping_GMPL that have vendor codes appearing in more than 3 OTC sales in tbl_OTCSale_GMPL. It joins the company_mapping_GMPL table with tbl_OTCSale_GMPL on VendorCode, groups by company mapping Id and company details, and filters for those having count of OTC sales greater than 3. The output includes CompanyId, VendorCode, ContactPerson, ContactNumber, Email, and the count of OTC sales.",
  "query": "SELECT TOP (1000) [cm].[CompanyId], [cm].[VendorCode], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email], COUNT([ots].[OTCID]) AS [OTCSaleCount] FROM [company_mapping_GMPL] AS [cm] JOIN [tbl_OTCSale_GMPL] AS [ots] ON [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = [ots].[VendorId] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [cm].[Id], [cm].[CompanyId], [cm].[VendorCode], [cm].[ContactPerson], [cm].[ContactNumber], [cm].[Email] HAVING COUNT([ots].[OTCID]) > 3 ORDER BY [OTCSaleCount] DESC",
  "error": null
}"}
{"timestamp": "2025-08-01 17:19:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:19:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of companies from company_mapping_GMPL that have vendor codes appearing in more than 3 OTC sales in tbl_OTCSale_GMPL. It joins the company_mapping_GMPL table with tbl_OTCSale_GMPL on VendorCode, groups by company mapping Id and company details, and filters for those having count of OTC sales greater than 3. The output includes CompanyId, VendorCode, ContactPerson, ContactNumber, Email, and the count of OTC sales."}
{"timestamp": "2025-08-01 17:19:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:19:53", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 17:20:08", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show all Autofurnish orders where the product belongs to a brand starting with 'A'., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:20:08", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the list of companies that have mapped vendor codes appearing in more than 3 OTC sales."}
{"timestamp": "2025-08-01 17:20:08", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:20:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve all Autofurnish orders where the product brand starts with the letter 'A'."
}"}
{"timestamp": "2025-08-01 17:20:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:20:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Retrieve all Autofurnish orders where the product brand starts with the letter 'A'.", [{'role': 'user', 'content': "Retrieve all Autofurnish orders where the product brand starts with the letter 'A'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:20:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:20:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 17:20:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 Autofurnish order items where the associated product's CarBrand starts with the letter 'A' (case-insensitive). It joins the af_orderitems_GMPL table with the ProductMaster_AL table on the SKU and filters the CarBrand using a case-insensitive LIKE condition.",
  "query": "SELECT TOP (1000) [af].[AFOrderId], [af].[Lineitem_quantity], [af].[Lineitem_name], [af].[Lineitem_price], [af].[Lineitem_sku], [pm].[CarBrand] FROM [af_orderitems_GMPL] AS [af] INNER JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE [pm].[CarBrand] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE 'A%'",
  "error": null
}"}
{"timestamp": "2025-08-01 17:20:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:20:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 Autofurnish order items where the associated product's CarBrand starts with the letter 'A' (case-insensitive). It joins the af_orderitems_GMPL table with the ProductMaster_AL table on the SKU and filters the CarBrand using a case-insensitive LIKE condition."}
{"timestamp": "2025-08-01 17:20:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:20:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[AFOrderId], [af].[Lineitem_quantity], [af].[Lineitem_name], [af].[Lineitem_price], [af].[Lineitem_sku], [pm].[CarBrand] FROM [af_orderitems_GMPL] AS [af] INNER JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE [pm].[CarBrand] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE 'A%' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9F60>"}
{"timestamp": "2025-08-01 17:26:43", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List Amazon Flex order item details for each SKU and show if that SKU is also in the ProductMaster., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:26:43", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve all Autofurnish orders where the product brand starts with the letter 'A'."}
{"timestamp": "2025-08-01 17:26:43", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:26:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List Amazon Flex order item details for each SKU and indicate whether that SKU exists in the ProductMaster."
}"}
{"timestamp": "2025-08-01 17:26:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:26:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List Amazon Flex order item details for each SKU and indicate whether that SKU exists in the ProductMaster.', [{'role': 'user', 'content': 'List Amazon Flex order item details for each SKU and indicate whether that SKU exists in the ProductMaster.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:26:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:26:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]

Example 2:
  input: Show all active products with their MSKU and status.
  query: SELECT [SKU], [MSKU], [ProductName], [ProductStatus] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-01 17:26:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves Amazon Flex order item details including SKU, product name, quantity, and item price from tbl_AmazonFlex_GMPL. It left joins with ProductMaster_AL on SKU to indicate whether each SKU exists in the ProductMaster by checking if the ProductMaster SKU is not null. The output includes SKU, product name, quantity, item price, and a flag indicating SKU existence in ProductMaster.",
  "query": "SELECT TOP (1000) [af].[sku] AS [SKU], [af].[productname] AS [ProductName], [af].[quantity] AS [Quantity], [af].[itemprice] AS [ItemPrice], CASE WHEN [pm].[SKU] IS NOT NULL THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS [ExistsInProductMaster] FROM [tbl_AmazonFlex_GMPL] AS [af] LEFT JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS",
  "error": null
}"}
{"timestamp": "2025-08-01 17:26:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:26:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves Amazon Flex order item details including SKU, product name, quantity, and item price from tbl_AmazonFlex_GMPL. It left joins with ProductMaster_AL on SKU to indicate whether each SKU exists in the ProductMaster by checking if the ProductMaster SKU is not null. The output includes SKU, product name, quantity, item price, and a flag indicating SKU existence in ProductMaster."}
{"timestamp": "2025-08-01 17:26:49", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:26:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[sku] AS [SKU], [af].[productname] AS [ProductName], [af].[quantity] AS [Quantity], [af].[itemprice] AS [ItemPrice], CASE WHEN [pm].[SKU] IS NOT NULL THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS [ExistsInProductMaster] FROM [tbl_AmazonFlex_GMPL] AS [af] LEFT JOIN [ProductMaster_AL] AS [pm] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC7310>"}
{"timestamp": "2025-08-01 17:29:27", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What are the total quantities of products sold through both OTC and Autofurnish platforms?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:29:27", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List Amazon Flex order item details for each SKU and indicate whether that SKU exists in the ProductMaster."}
{"timestamp": "2025-08-01 17:29:27", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:29:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the total quantities of products sold through both OTC and Autofurnish platforms."
}"}
{"timestamp": "2025-08-01 17:29:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:29:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate the total quantities of products sold through both OTC and Autofurnish platforms.', [{'role': 'user', 'content': 'Calculate the total quantities of products sold through both OTC and Autofurnish platforms.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:29:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:29:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 17:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total quantities of products sold through the OTC and Autofurnish platforms by separately summing the quantities from tbl_OTCSale_GMPL and af_orderitems_GMPL tables. It then combines these totals to provide the overall total quantity sold across both platforms.",
  "query": "WITH OTC_Sales AS ( SELECT SUM(TRY_CAST([tots].[Quantity] AS FLOAT)) AS TotalOTCQuantity FROM [tbl_OTCSale_GMPL] AS [tots] WHERE TRY_CAST([tots].[Quantity] AS FLOAT) IS NOT NULL ), Autofurnish_Sales AS ( SELECT SUM(TRY_CAST([af].[Lineitem_quantity] AS FLOAT)) AS TotalAFQuantity FROM [af_orderitems_GMPL] AS [af] WHERE TRY_CAST([af].[Lineitem_quantity] AS FLOAT) IS NOT NULL ) SELECT ROUND(COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([af].[TotalAFQuantity], 0), 1) AS TotalQuantitySold FROM OTC_Sales AS [otc] CROSS JOIN Autofurnish_Sales AS [af];",
  "error": null
}"}
{"timestamp": "2025-08-01 17:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total quantities of products sold through the OTC and Autofurnish platforms by separately summing the quantities from tbl_OTCSale_GMPL and af_orderitems_GMPL tables. It then combines these totals to provide the overall total quantity sold across both platforms."}
{"timestamp": "2025-08-01 17:29:32", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:29:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Sales AS ( SELECT SUM(TRY_CAST([tots].[Quantity] AS FLOAT)) AS TotalOTCQuantity FROM [tbl_OTCSale_GMPL] AS [tots] WHERE TRY_CAST([tots].[Quantity] AS FLOAT) IS NOT NULL ), Autofurnish_Sales AS ( SELECT SUM(TRY_CAST([af].[Lineitem_quantity] AS FLOAT)) AS TotalAFQuantity FROM [af_orderitems_GMPL] AS [af] WHERE TRY_CAST([af].[Lineitem_quantity] AS FLOAT) IS NOT NULL ) SELECT ROUND(COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([af].[TotalAFQuantity], 0), 1) AS TotalQuantitySold FROM OTC_Sales AS [otc] CROSS JOIN Autofurnish_Sales AS [af]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21EA740>"}
{"timestamp": "2025-08-01 17:31:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies have mapped multiple shipping addresses used in OTC sales?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:31:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Calculate the total quantities of products sold through both OTC and Autofurnish platforms."}
{"timestamp": "2025-08-01 17:31:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:31:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify companies that have multiple shipping addresses mapped and are used in OTC sales."
}"}
{"timestamp": "2025-08-01 17:31:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:31:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify companies that have multiple shipping addresses mapped and are used in OTC sales.', [{'role': 'user', 'content': 'Identify companies that have multiple shipping addresses mapped and are used in OTC sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:31:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies companies that have multiple distinct shipping addresses mapped in the company_mapping_GMPL table and are referenced in OTC sales in the tbl_OTCSale_GMPL table. It joins the company_mapping_GMPL and tbl_OTCSale_GMPL tables on the company mapping's CompanyId and the OTC sale's VendorId. It groups by CompanyId and filters to include only those companies having more than one distinct shipping address in the mapping. The output includes the CompanyId and the count of distinct shipping addresses.",
  "query": "SELECT TOP (1000) [cm].[CompanyId], COUNT(DISTINCT [cm].[Address]) AS [DistinctShippingAddressCount] FROM [company_mapping_GMPL] AS [cm] JOIN [tbl_OTCSale_GMPL] AS [otc] ON [cm].[CompanyId] = [otc].[VendorId] WHERE [cm].[Address] IS NOT NULL GROUP BY [cm].[CompanyId] HAVING COUNT(DISTINCT [cm].[Address]) > 1 ORDER BY [cm].[CompanyId];",
  "error": null
}"}
{"timestamp": "2025-08-01 17:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies companies that have multiple distinct shipping addresses mapped in the company_mapping_GMPL table and are referenced in OTC sales in the tbl_OTCSale_GMPL table. It joins the company_mapping_GMPL and tbl_OTCSale_GMPL tables on the company mapping's CompanyId and the OTC sale's VendorId. It groups by CompanyId and filters to include only those companies having more than one distinct shipping address in the mapping. The output includes the CompanyId and the count of distinct shipping addresses."}
{"timestamp": "2025-08-01 17:31:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:31:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cm].[CompanyId], COUNT(DISTINCT [cm].[Address]) AS [DistinctShippingAddressCount] FROM [company_mapping_GMPL] AS [cm] JOIN [tbl_OTCSale_GMPL] AS [otc] ON [cm].[CompanyId] = [otc].[VendorId] WHERE [cm].[Address] IS NOT NULL GROUP BY [cm].[CompanyId] HAVING COUNT(DISTINCT [cm].[Address]) > 1 ORDER BY [cm].[CompanyId]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2121240>"}
{"timestamp": "2025-08-01 17:31:51", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all cities where company addresses match with the delivery location in Autofurnish orders., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:31:51", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify companies that have multiple shipping addresses mapped and are used in OTC sales."}
{"timestamp": "2025-08-01 17:31:51", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:31:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all cities where company shipping addresses, for companies that have multiple shipping addresses mapped and are used in OTC sales, match the delivery location in Autofurnish orders."
}"}
{"timestamp": "2025-08-01 17:31:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:31:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all cities where company shipping addresses, for companies that have multiple shipping addresses mapped and are used in OTC sales, match the delivery location in Autofurnish orders.', [{'role': 'user', 'content': 'List all cities where company shipping addresses, for companies that have multiple shipping addresses mapped and are used in OTC sales, match the delivery location in Autofurnish orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:31:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:31:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3
"}
{"timestamp": "2025-08-01 17:31:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves distinct cities where company shipping addresses from company_mapping_GMPL are used in OTC sales and match delivery locations in Autofurnish orders. It identifies companies with multiple shipping addresses mapped, joins OTC sales and Autofurnish orders on matching addresses, and selects the distinct cities from the company mapping.",
  "query": "WITH MultipleShippingAddresses AS ( SELECT [cm].[CompanyId] FROM [company_mapping_GMPL] AS [cm] GROUP BY [cm].[CompanyId] HAVING COUNT(DISTINCT [cm].[Address]) > 1 ), OTCAddresses AS ( SELECT DISTINCT [ots].[Address] FROM [tbl_OTCSale_GMPL] AS [ots] WHERE [ots].[Address] IS NOT NULL ), AutofurnishAddresses AS ( SELECT DISTINCT [af].[CustomerShippingAddress] FROM [tbl_OTCSale_GMPL] AS [af] WHERE [af].[CustomerShippingAddress] IS NOT NULL ) SELECT DISTINCT [cm].[City] FROM [company_mapping_GMPL] AS [cm] JOIN [MultipleShippingAddresses] AS [msa] ON [cm].[CompanyId] = [msa].[CompanyId] JOIN [tbl_OTCSale_GMPL] AS [ots] ON [ots].[Address] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[Address] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN [tbl_OTCSale_GMPL] AS [af] ON [af].[CustomerShippingAddress] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[Address] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE [ots].[Address] IS NOT NULL AND [af].[CustomerShippingAddress] IS NOT NULL;",
  "error": null
}"}
{"timestamp": "2025-08-01 17:31:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:31:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves distinct cities where company shipping addresses from company_mapping_GMPL are used in OTC sales and match delivery locations in Autofurnish orders. It identifies companies with multiple shipping addresses mapped, joins OTC sales and Autofurnish orders on matching addresses, and selects the distinct cities from the company mapping."}
{"timestamp": "2025-08-01 17:31:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:31:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH MultipleShippingAddresses AS ( SELECT [cm].[CompanyId] FROM [company_mapping_GMPL] AS [cm] GROUP BY [cm].[CompanyId] HAVING COUNT(DISTINCT [cm].[Address]) > 1 ), OTCAddresses AS ( SELECT DISTINCT [ots].[Address] FROM [tbl_OTCSale_GMPL] AS [ots] WHERE [ots].[Address] IS NOT NULL ), AutofurnishAddresses AS ( SELECT DISTINCT [af].[CustomerShippingAddress] FROM [tbl_OTCSale_GMPL] AS [af] WHERE [af].[CustomerShippingAddress] IS NOT NULL ) SELECT DISTINCT [cm].[City] FROM [company_mapping_GMPL] AS [cm] JOIN [MultipleShippingAddresses] AS [msa] ON [cm].[CompanyId] = [msa].[CompanyId] JOIN [tbl_OTCSale_GMPL] AS [ots] ON [ots].[Address] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[Address] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN [tbl_OTCSale_GMPL] AS [af] ON [af].[CustomerShippingAddress] COLLATE SQL_Latin1_General_CP1_CI_AS = [cm].[Address] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE [ots].[Address] IS NOT NULL AND [af].[CustomerShippingAddress] IS NOT NULL; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F22C5A20>"}
{"timestamp": "2025-08-01 17:32:44", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the GST and MSP of products that have been ordered more than 5 times in Amazon Flex?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:32:44", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all cities where company shipping addresses, for companies that have multiple shipping addresses mapped and are used in OTC sales, match the delivery location in Autofurnish orders."}
{"timestamp": "2025-08-01 17:32:44", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:32:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the GST and MSP of products that have been ordered more than 5 times in Amazon Flex."
}"}
{"timestamp": "2025-08-01 17:32:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:32:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the GST and MSP of products that have been ordered more than 5 times in Amazon Flex.', [{'role': 'user', 'content': 'Retrieve the GST and MSP of products that have been ordered more than 5 times in Amazon Flex.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:32:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:32:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]

Example 2:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3
"}
{"timestamp": "2025-08-01 17:32:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the GST rate and MSP of products from ProductMaster_AL that have been ordered more than 5 times in tbl_AmazonFlex_GMPL. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on SKU and groups by GST rate and MSP, filtering for products with total ordered quantity greater than 5.",
  "query": "SELECT TOP (1000) [p].[GSTRate], [p].[MSP] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [p] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [p].[GSTRate], [p].[MSP] HAVING SUM(TRY_CAST([af].[quantity] AS FLOAT)) > 5",
  "error": null
}"}
{"timestamp": "2025-08-01 17:32:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:32:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the GST rate and MSP of products from ProductMaster_AL that have been ordered more than 5 times in tbl_AmazonFlex_GMPL. It joins tbl_AmazonFlex_GMPL with ProductMaster_AL on SKU and groups by GST rate and MSP, filtering for products with total ordered quantity greater than 5."}
{"timestamp": "2025-08-01 17:32:49", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:32:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [p].[GSTRate], [p].[MSP] FROM [tbl_AmazonFlex_GMPL] AS [af] JOIN [ProductMaster_AL] AS [p] ON [af].[sku] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [p].[GSTRate], [p].[MSP] HAVING SUM(TRY_CAST([af].[quantity] AS FLOAT)) > 5 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F22C7380>"}
{"timestamp": "2025-08-01 17:34:58", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which vendors have both OTC and Amazon sales activity?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:34:58", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the GST and MSP of products that have been ordered more than 5 times in Amazon Flex."}
{"timestamp": "2025-08-01 17:34:58", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:35:00", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify vendors that have sales activity in both OTC and Amazon platforms."
}"}
{"timestamp": "2025-08-01 17:35:00", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:35:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify vendors that have sales activity in both OTC and Amazon platforms.', [{'role': 'user', 'content': 'Identify vendors that have sales activity in both OTC and Amazon platforms.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:35:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:35:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies vendors who have sales activity in both the OTC sales platform and the Amazon orders platform. It selects distinct VendorId values from tbl_OTCSale_GMPL and tbl_amazon_GMPL where VendorId is not null, then finds the intersection of these VendorIds to list vendors active in both platforms.",
  "query": "SELECT TOP (1000) otc.[VendorId] FROM (SELECT DISTINCT TRY_CAST([VendorId] AS INT) AS [VendorId] FROM [tbl_OTCSale_GMPL] WHERE [VendorId] IS NOT NULL) AS otc INNER JOIN (SELECT DISTINCT TRY_CAST([VendorId] AS INT) AS [VendorId] FROM [tbl_amazon_GMPL] WHERE [VendorId] IS NOT NULL) AS amz ON otc.[VendorId] = amz.[VendorId]",
  "error": null
}"}
{"timestamp": "2025-08-01 17:35:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:35:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies vendors who have sales activity in both the OTC sales platform and the Amazon orders platform. It selects distinct VendorId values from tbl_OTCSale_GMPL and tbl_amazon_GMPL where VendorId is not null, then finds the intersection of these VendorIds to list vendors active in both platforms."}
{"timestamp": "2025-08-01 17:35:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:35:03", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 17:35:19", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the products that are listed on Amazon but not found in any OTC sale., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:35:19", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify vendors that have sales activity in both OTC and Amazon platforms."}
{"timestamp": "2025-08-01 17:35:19", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:35:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that have sales activity on the Amazon platform but have no sales recorded on the OTC platform."
}"}
{"timestamp": "2025-08-01 17:35:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:35:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that have sales activity on the Amazon platform but have no sales recorded on the OTC platform.', [{'role': 'user', 'content': 'Identify products that have sales activity on the Amazon platform but have no sales recorded on the OTC platform.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:35:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:35:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products that have sales activity on the Amazon platform but have no sales recorded on the OTC platform. It selects distinct SKUs from the Amazon orders table and excludes those SKUs that appear in the OTC sales table. The output includes the SKU and ProductName from the Amazon orders table for products sold on Amazon but not on OTC.",
  "query": "SELECT DISTINCT [a].[SKU], [a].[ProductName] FROM [tbl_amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL AND [a].[SKU] NOT IN (SELECT DISTINCT [o].[SKU] FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[SKU] IS NOT NULL);",
  "error": null
}"}
{"timestamp": "2025-08-01 17:35:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:35:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products that have sales activity on the Amazon platform but have no sales recorded on the OTC platform. It selects distinct SKUs from the Amazon orders table and excludes those SKUs that appear in the OTC sales table. The output includes the SKU and ProductName from the Amazon orders table for products sold on Amazon but not on OTC."}
{"timestamp": "2025-08-01 17:35:25", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:35:25", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 17:35:34", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List vendor names and the number of SKUs they have in ProductMaster table., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:35:34", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that have sales activity on the Amazon platform but have no sales recorded on the OTC platform."}
{"timestamp": "2025-08-01 17:35:34", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:35:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List vendor names and the count of SKUs they have in the ProductMaster table."
}"}
{"timestamp": "2025-08-01 17:35:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:35:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List vendor names and the count of SKUs they have in the ProductMaster table.', [{'role': 'user', 'content': 'List vendor names and the count of SKUs they have in the ProductMaster table.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:35:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:35:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all active products with their MSKU and status.
  query: SELECT [SKU], [MSKU], [ProductName], [ProductStatus] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0

Example 2:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-01 17:35:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the vendor names from the Company_AL table and counts the number of SKUs they have in the ProductMaster_AL table. It joins the two tables on the vendor identifier and groups the results by the vendor name to provide the count of SKUs per vendor.",
  "query": "SELECT TOP (1000) [c].[CompanyName], COUNT([p].[SKU]) AS [SKU_Count] FROM [Company_AL] AS [c] JOIN [ProductMaster_AL] AS [p] ON TRY_CAST([c].[ID] AS INT) = TRY_CAST([p].[Id] AS INT) GROUP BY [c].[CompanyName] ORDER BY [SKU_Count] DESC",
  "error": null
}"}
{"timestamp": "2025-08-01 17:35:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:35:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the vendor names from the Company_AL table and counts the number of SKUs they have in the ProductMaster_AL table. It joins the two tables on the vendor identifier and groups the results by the vendor name to provide the count of SKUs per vendor."}
{"timestamp": "2025-08-01 17:35:38", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:35:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [c].[CompanyName], COUNT([p].[SKU]) AS [SKU_Count] FROM [Company_AL] AS [c] JOIN [ProductMaster_AL] AS [p] ON TRY_CAST([c].[ID] AS INT) = TRY_CAST([p].[Id] AS INT) GROUP BY [c].[CompanyName] ORDER BY [SKU_Count] DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F22C7380>"}
{"timestamp": "2025-08-01 17:38:41", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which inventory items have been marked 'In Stock' and belong to the 'Furniture' category?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:38:41", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List vendor names and the count of SKUs they have in the ProductMaster table."}
{"timestamp": "2025-08-01 17:38:41", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:38:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List inventory items that are marked 'In Stock' and belong to the 'Furniture' category."
}"}
{"timestamp": "2025-08-01 17:38:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:38:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("List inventory items that are marked 'In Stock' and belong to the 'Furniture' category.", [{'role': 'user', 'content': "List inventory items that are marked 'In Stock' and belong to the 'Furniture' category."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:38:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:38:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-01 17:38:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves inventory items from InventoryDetail_GMPL that are marked as 'In Stock' and belong to the 'Furniture' category in ProductMaster_AL. It joins InventoryDetail_GMPL with ProductMaster_AL on MSKU to filter by the category. The output includes the inventory item's Id, MSKU, UniqueCode, and the product's Category1.",
  "query": "SELECT TOP (1000) [i].[Id], [i].[MSKU], [i].[UniqueCode], [p].[Category1] FROM [InventoryDetail_GMPL] AS [i] JOIN [ProductMaster_AL] AS [p] ON [i].[MSKU] = [p].[MSKU] WHERE [i].[IsOut] = 0 AND [p].[Category1] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Furniture'",
  "error": null
}"}
{"timestamp": "2025-08-01 17:38:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:38:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves inventory items from InventoryDetail_GMPL that are marked as 'In Stock' and belong to the 'Furniture' category in ProductMaster_AL. It joins InventoryDetail_GMPL with ProductMaster_AL on MSKU to filter by the category. The output includes the inventory item's Id, MSKU, UniqueCode, and the product's Category1."}
{"timestamp": "2025-08-01 17:38:46", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:38:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [i].[Id], [i].[MSKU], [i].[UniqueCode], [p].[Category1] FROM [InventoryDetail_GMPL] AS [i] JOIN [ProductMaster_AL] AS [p] ON [i].[MSKU] = [p].[MSKU] WHERE [i].[IsOut] = 0 AND [p].[Category1] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Furniture' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F1EFC8A0>"}
{"timestamp": "2025-08-01 17:40:12", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show total OTC sales by company state along with the number of mapped vendor codes., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:40:12", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List inventory items that are marked 'In Stock' and belong to the 'Furniture' category."}
{"timestamp": "2025-08-01 17:40:12", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:40:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the total OTC sales grouped by company state along with the count of mapped vendor codes for each state."
}"}
{"timestamp": "2025-08-01 17:40:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:40:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the total OTC sales grouped by company state along with the count of mapped vendor codes for each state.', [{'role': 'user', 'content': 'Display the total OTC sales grouped by company state along with the count of mapped vendor codes for each state.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:40:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:40:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 17:40:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total OTC sales amount grouped by the company state from the company_mapping_GMPL table joined with tbl_OTCSale_GMPL on VendorCode and VendorId. It also counts the distinct mapped vendor codes for each state. The total sales amount is summed by converting the Amount column to float safely. The results are grouped and ordered by the company state.",
  "query": "SELECT TOP (1000) [cm].[State], COUNT(DISTINCT [cm].[VendorCode]) AS VendorCodeCount, ROUND(SUM(TRY_CAST([ots].[Amount] AS FLOAT)), 1) AS TotalOTCSalesAmount FROM [company_mapping_GMPL] AS [cm] INNER JOIN [tbl_OTCSale_GMPL] AS [ots] ON [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = TRY_CAST([ots].[VendorId] AS NVARCHAR(200)) GROUP BY [cm].[State] ORDER BY [cm].[State]",
  "error": null
}"}
{"timestamp": "2025-08-01 17:40:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:40:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total OTC sales amount grouped by the company state from the company_mapping_GMPL table joined with tbl_OTCSale_GMPL on VendorCode and VendorId. It also counts the distinct mapped vendor codes for each state. The total sales amount is summed by converting the Amount column to float safely. The results are grouped and ordered by the company state."}
{"timestamp": "2025-08-01 17:40:18", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:40:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cm].[State], COUNT(DISTINCT [cm].[VendorCode]) AS VendorCodeCount, ROUND(SUM(TRY_CAST([ots].[Amount] AS FLOAT)), 1) AS TotalOTCSalesAmount FROM [company_mapping_GMPL] AS [cm] INNER JOIN [tbl_OTCSale_GMPL] AS [ots] ON [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = TRY_CAST([ots].[VendorId] AS NVARCHAR(200)) GROUP BY [cm].[State] ORDER BY [cm].[State] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F22C5A20>"}
{"timestamp": "2025-08-01 17:41:13", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 MSKUs by quantity from OTC sales and display their warehouse and rack info., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:41:13", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the total OTC sales grouped by company state along with the count of mapped vendor codes for each state."}
{"timestamp": "2025-08-01 17:41:13", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:41:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "From OTC sales, find the top 5 MSKUs by quantity and display their corresponding warehouse and rack information."
}"}
{"timestamp": "2025-08-01 17:41:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:41:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('From OTC sales, find the top 5 MSKUs by quantity and display their corresponding warehouse and rack information.', [{'role': 'user', 'content': 'From OTC sales, find the top 5 MSKUs by quantity and display their corresponding warehouse and rack information.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:41:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:41:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-01 17:41:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 5 MSKUs from OTC sales based on the total quantity sold. It aggregates the quantity from tbl_OTCSale_GMPL by MSKU, converting the Quantity column to float for accurate summation. Then it joins with InventoryDetail_GMPL to get warehouse and rack information for each MSKU. The result includes MSKU, total quantity sold, WarehouseId, and RackId, ordered by total quantity descending.",
  "query": "WITH QuantitySum AS ( SELECT TOP 5 [t].[MSKU], SUM(TRY_CAST([t].[Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[MSKU] IS NOT NULL GROUP BY [t].[MSKU] ORDER BY TotalQuantity DESC ) SELECT [q].[MSKU], ROUND([q].[TotalQuantity], 1) AS TotalQuantity, [i].[WarehouseId], [i].[RackId] FROM QuantitySum AS [q] JOIN [InventoryDetail_GMPL] AS [i] ON [q].[MSKU] = [i].[MSKU] ORDER BY [q].[TotalQuantity] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-01 17:41:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:41:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 5 MSKUs from OTC sales based on the total quantity sold. It aggregates the quantity from tbl_OTCSale_GMPL by MSKU, converting the Quantity column to float for accurate summation. Then it joins with InventoryDetail_GMPL to get warehouse and rack information for each MSKU. The result includes MSKU, total quantity sold, WarehouseId, and RackId, ordered by total quantity descending."}
{"timestamp": "2025-08-01 17:41:19", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:41:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH QuantitySum AS ( SELECT TOP 5 [t].[MSKU], SUM(TRY_CAST([t].[Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[MSKU] IS NOT NULL GROUP BY [t].[MSKU] ORDER BY TotalQuantity DESC ) SELECT [q].[MSKU], ROUND([q].[TotalQuantity], 1) AS TotalQuantity, [i].[WarehouseId], [i].[RackId] FROM QuantitySum AS [q] JOIN [InventoryDetail_GMPL] AS [i] ON [q].[MSKU] = [i].[MSKU] ORDER BY [q].[TotalQuantity] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2FD74D0>"}
{"timestamp": "2025-08-01 17:43:37", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which orders from Amazon Flex are associated with products having 'Accessory' in their description?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:43:37", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: From OTC sales, find the top 5 MSKUs by quantity and display their corresponding warehouse and rack information."}
{"timestamp": "2025-08-01 17:43:37", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:43:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find all orders from Amazon Flex that are associated with products having 'Accessory' in their description."
}"}
{"timestamp": "2025-08-01 17:43:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:43:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Find all orders from Amazon Flex that are associated with products having 'Accessory' in their description.", [{'role': 'user', 'content': "Find all orders from Amazon Flex that are associated with products having 'Accessory' in their description."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:43:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves all orders from the tbl_AmazonFlex_GMPL table where the product description in the productname column contains the word 'Accessory' in a case-insensitive manner. It selects the top 1000 records including order details such as amazonorderid, merchantorderid, purchasedate, orderstatus, productname, sku, asin, quantity, and itemprice.",
  "query": "SELECT TOP (1000) [af].[amazonorderid], [af].[merchantorderid], [af].[purchasedate], [af].[orderstatus], [af].[productname], [af].[sku], [af].[asin], [af].[quantity], [af].[itemprice] FROM [tbl_AmazonFlex_GMPL] AS [af] WHERE [af].[productname] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%Accessory%'",
  "error": null
}"}
{"timestamp": "2025-08-01 17:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves all orders from the tbl_AmazonFlex_GMPL table where the product description in the productname column contains the word 'Accessory' in a case-insensitive manner. It selects the top 1000 records including order details such as amazonorderid, merchantorderid, purchasedate, orderstatus, productname, sku, asin, quantity, and itemprice."}
{"timestamp": "2025-08-01 17:43:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:43:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[amazonorderid], [af].[merchantorderid], [af].[purchasedate], [af].[orderstatus], [af].[productname], [af].[sku], [af].[asin], [af].[quantity], [af].[itemprice] FROM [tbl_AmazonFlex_GMPL] AS [af] WHERE [af].[productname] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%Accessory%' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2FD74D0>"}
{"timestamp": "2025-08-01 17:45:16", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List Autofurnish orders with payment method 'COD' and include product name and brand., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:45:16", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Find all orders from Amazon Flex that are associated with products having 'Accessory' in their description."}
{"timestamp": "2025-08-01 17:45:16", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:45:17", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all Autofurnish orders where the payment method is 'COD', including the product name and brand."
}"}
{"timestamp": "2025-08-01 17:45:17", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:45:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("List all Autofurnish orders where the payment method is 'COD', including the product name and brand.", [{'role': 'user', 'content': "List all Autofurnish orders where the payment method is 'COD', including the product name and brand."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:45:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:45:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-01 17:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 Autofurnish orders where the payment method is 'COD'. It selects the order ID, product name, and brand from the ProductMaster_AL table joined with the af_orderitems_GMPL table on SKU. The filter is applied on the payment method 'COD' in the af_orderitems_GMPL table.",
  "query": "SELECT TOP (1000) [af].[AFOrderId], [pm].[ProductName], [pm].[CarBrand] FROM [af_orderitems_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE [af].[AFOrderId] IN (SELECT DISTINCT [AFOrderId] FROM [af_orderitems_GMPL] WHERE [Lineitem_name] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%COD%')",
  "error": null
}"}
{"timestamp": "2025-08-01 17:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 Autofurnish orders where the payment method is 'COD'. It selects the order ID, product name, and brand from the ProductMaster_AL table joined with the af_orderitems_GMPL table on SKU. The filter is applied on the payment method 'COD' in the af_orderitems_GMPL table."}
{"timestamp": "2025-08-01 17:45:21", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[AFOrderId], [pm].[ProductName], [pm].[CarBrand] FROM [af_orderitems_GMPL] AS [af] JOIN [ProductMaster_AL] AS [pm] ON [af].[Lineitem_sku] = [pm].[SKU] WHERE [af].[AFOrderId] IN (SELECT DISTINCT [AFOrderId] FROM [af_orderitems_GMPL] WHERE [Lineitem_name] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%COD%') : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC6740>"}
{"timestamp": "2025-08-01 17:46:50", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show Amazon listing prices and their respective GST rates from ProductMaster., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:46:50", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all Autofurnish orders where the payment method is 'COD', including the product name and brand."}
{"timestamp": "2025-08-01 17:46:50", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:46:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List Amazon listing prices and their respective GST rates from ProductMaster."
}"}
{"timestamp": "2025-08-01 17:46:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:46:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List Amazon listing prices and their respective GST rates from ProductMaster.', [{'role': 'user', 'content': 'List Amazon listing prices and their respective GST rates from ProductMaster.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:46:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:46:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product pricing (MRP, MSP, RP) for each product.
  query: SELECT [ProductName], [SKU], [MRP], [MSP], [RP] FROM [ProductMaster_AL] WHERE [IsActive] = 1

Example 2:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-01 17:46:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the Amazon listing prices (MRP) and their respective GST rates from the ProductMaster_AL table. It selects the MRP and GSTRate columns for up to 1000 products.",
  "query": "SELECT TOP (1000) [p].[MRP], [p].[GSTRate] FROM [ProductMaster_AL] AS [p]",
  "error": null
}"}
{"timestamp": "2025-08-01 17:46:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:46:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the Amazon listing prices (MRP) and their respective GST rates from the ProductMaster_AL table. It selects the MRP and GSTRate columns for up to 1000 products."}
{"timestamp": "2025-08-01 17:46:56", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:46:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [p].[MRP], [p].[GSTRate] FROM [ProductMaster_AL] AS [p] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9B00>"}
{"timestamp": "2025-08-01 17:47:58", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies have orders in both tbl_OTCSale and Autofurnish_OrderS?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:47:58", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List Amazon listing prices and their respective GST rates from ProductMaster."}
{"timestamp": "2025-08-01 17:47:58", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:47:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the companies that have orders recorded in both tbl_OTCSale and Autofurnish_OrderS."
}"}
{"timestamp": "2025-08-01 17:47:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:47:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List the companies that have orders recorded in both tbl_OTCSale and Autofurnish_OrderS.', [{'role': 'user', 'content': 'List the companies that have orders recorded in both tbl_OTCSale and Autofurnish_OrderS.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:47:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:47:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3
"}
{"timestamp": "2025-08-01 17:48:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of companies that have orders recorded in both tbl_OTCSale_GMPL and af_orderitems_GMPL. It joins tbl_OTCSale_GMPL and af_orderitems_GMPL on matching MSKU values, then joins with ProductMaster_AL to get the SKU for af_orderitems_GMPL. It then joins with company_mapping_GMPL and Company_AL to get the company details for the orders. The output includes distinct company IDs and company names that have orders in both tables.",
  "query": "SELECT DISTINCT [cm].[CompanyId], [c].[CompanyName] FROM [tbl_OTCSale_GMPL] AS [otc] JOIN [ProductMaster_AL] AS [pm] ON [otc].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[SKU] JOIN [af_orderitems_GMPL] AS [af] ON [pm].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[Lineitem_sku] JOIN [company_mapping_GMPL] AS [cm] ON [cm].[VendorCode] COLLATE SQL_Latin1_General_CP1_CI_AS = [otc].[VendorId] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN [Company_AL] AS [c] ON [c].[ID] = [cm].[CompanyId]",
  "error": null
}"}
{"timestamp": "2025-08-01 17:48:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:48:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of companies that have orders recorded in both tbl_OTCSale_GMPL and af_orderitems_GMPL. It joins tbl_OTCSale_GMPL and af_orderitems_GMPL on matching MSKU values, then joins with ProductMaster_AL to get the SKU for af_orderitems_GMPL. It then joins with company_mapping_GMPL and Company_AL to get the company details for the orders. The output includes distinct company IDs and company names that have orders in both tables."}
{"timestamp": "2025-08-01 17:48:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:48:05", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-01 17:48:21", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all racks storing items marked as 'Hold' and manufactured by 'AFPL'., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:48:21", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the companies that have orders recorded in both tbl_OTCSale and Autofurnish_OrderS."}
{"timestamp": "2025-08-01 17:48:21", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:48:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all racks that store items marked as 'Hold' and manufactured by 'AFPL'."
}"}
{"timestamp": "2025-08-01 17:48:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:48:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("List all racks that store items marked as 'Hold' and manufactured by 'AFPL'.", [{'role': 'user', 'content': "List all racks that store items marked as 'Hold' and manufactured by 'AFPL'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:48:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:48:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all racks and their corresponding warehouse names.
  query: SELECT r.[Name] AS RackName, w.[Name] AS WarehouseName FROM [tbl_Rack_GMPL] r INNER JOIN [tbl_Warehouse_GMPL] w ON r.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-01 17:48:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves all distinct racks that store inventory items marked as 'Hold' and manufactured by 'AFPL'. It joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on RackId. The query filters for inventory items where IsHold is true and ManufactureUnitId corresponds to 'AFPL' manufacturer. Since ManufactureUnitId is an int and 'AFPL' is a string, and no direct mapping table is provided for ManufactureUnitId to manufacturer name, the query filters only on IsHold = 1 and includes racks related to those items. The output includes the rack Id and rack Name.",
  "query": "SELECT DISTINCT [r].[Id], [r].[Name] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [i].[IsHold] = 1",
  "error": null
}"}
{"timestamp": "2025-08-01 17:48:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:48:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves all distinct racks that store inventory items marked as 'Hold' and manufactured by 'AFPL'. It joins the InventoryDetail_GMPL table with the tbl_rack_GMPL table on RackId. The query filters for inventory items where IsHold is true and ManufactureUnitId corresponds to 'AFPL' manufacturer. Since ManufactureUnitId is an int and 'AFPL' is a string, and no direct mapping table is provided for ManufactureUnitId to manufacturer name, the query filters only on IsHold = 1 and includes racks related to those items. The output includes the rack Id and rack Name."}
{"timestamp": "2025-08-01 17:48:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:48:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT [r].[Id], [r].[Name] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] WHERE [i].[IsHold] = 1 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21EAE40>"}
{"timestamp": "2025-08-01 17:49:14", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show inventory items stored on 'Ground Floor' racks and sold through OTC sales., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:49:14", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all racks that store items marked as 'Hold' and manufactured by 'AFPL'."}
{"timestamp": "2025-08-01 17:49:14", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:49:16", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all inventory items stored on racks located on the 'Ground Floor' that are sold through OTC sales, including only those racks that store items marked as 'Hold' and manufactured by 'AFPL'."
}"}
{"timestamp": "2025-08-01 17:49:16", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:49:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("List all inventory items stored on racks located on the 'Ground Floor' that are sold through OTC sales, including only those racks that store items marked as 'Hold' and manufactured by 'AFPL'.", [{'role': 'user', 'content': "List all inventory items stored on racks located on the 'Ground Floor' that are sold through OTC sales, including only those racks that store items marked as 'Hold' and manufactured by 'AFPL'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:49:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:49:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 17:49:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 inventory items stored on racks located on the 'Ground' floor that are marked as 'Hold' and manufactured by 'AFPL'. It joins InventoryDetail with tbl_rack on RackId and filters racks by floor. It also joins with tbl_OTCSale to include only those inventory items whose MSKU matches the SKU in OTC sales. The output includes inventory Id, MSKU, Rack name, Hold status, ManufactureUnitId, and OTC sale SKU.",
  "query": "SELECT TOP (1000) [i].[Id], [i].[MSKU], [r].[Name] AS [RackName], [i].[IsHold], [i].[ManufactureUnitId], [o].[SKU] AS [OTCSaleSKU] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] INNER JOIN [tbl_OTCSale_GMPL] AS [o] ON [i].[MSKU] = [o].[SKU] WHERE [r].[Floor] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Ground' AND [i].[IsHold] = 1 AND [i].[ManufactureUnitId] = (SELECT TOP 1 [Id] FROM [Company_AL] WHERE [CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS = 'AFPL')",
  "error": null
}"}
{"timestamp": "2025-08-01 17:49:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:49:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 inventory items stored on racks located on the 'Ground' floor that are marked as 'Hold' and manufactured by 'AFPL'. It joins InventoryDetail with tbl_rack on RackId and filters racks by floor. It also joins with tbl_OTCSale to include only those inventory items whose MSKU matches the SKU in OTC sales. The output includes inventory Id, MSKU, Rack name, Hold status, ManufactureUnitId, and OTC sale SKU."}
{"timestamp": "2025-08-01 17:49:20", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:49:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [i].[Id], [i].[MSKU], [r].[Name] AS [RackName], [i].[IsHold], [i].[ManufactureUnitId], [o].[SKU] AS [OTCSaleSKU] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] INNER JOIN [tbl_OTCSale_GMPL] AS [o] ON [i].[MSKU] = [o].[SKU] WHERE [r].[Floor] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Ground' AND [i].[IsHold] = 1 AND [i].[ManufactureUnitId] = (SELECT TOP 1 [Id] FROM [Company_AL] WHERE [CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS = 'AFPL') : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC7F50>"}
{"timestamp": "2025-08-01 17:50:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies have the same contact number in Company and Company_Mapping tables?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:50:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all inventory items stored on racks located on the 'Ground Floor' that are sold through OTC sales, including only those racks that store items marked as 'Hold' and manufactured by 'AFPL'."}
{"timestamp": "2025-08-01 17:50:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:50:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all companies that have the same contact number in both the Company and Company_Mapping tables."
}"}
{"timestamp": "2025-08-01 17:50:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:50:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all companies that have the same contact number in both the Company and Company_Mapping tables.', [{'role': 'user', 'content': 'List all companies that have the same contact number in both the Company and Company_Mapping tables.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:50:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:50:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: List all companies with their type and creation date.
  query: SELECT [CompanyName], [CompanyType], [CreatedBy], [CreatedOn] FROM [Company_AL]
"}
{"timestamp": "2025-08-01 17:50:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves companies that have the same contact number in both the Company_AL and Company_Mapping_AL tables. It joins the two tables on the company ID and filters for rows where the ContactNumber in Company_Mapping_AL matches the VendorId in Company_AL, assuming VendorId represents contact number in Company_AL. The output includes the company ID, company name, and the matching contact number from Company_Mapping_AL.",
  "query": "SELECT TOP (1000) [cm].[CompanyId], [c].[CompanyName], [cm].[ContactNumber] FROM [Company_Mapping_AL] AS [cm] INNER JOIN [Company_AL] AS [c] ON [cm].[CompanyId] = [c].[ID] WHERE [cm].[ContactNumber] COLLATE SQL_Latin1_General_CP1_CI_AS = [c].[VendorId] COLLATE SQL_Latin1_General_CP1_CI_AS",
  "error": null
}"}
{"timestamp": "2025-08-01 17:50:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:50:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves companies that have the same contact number in both the Company_AL and Company_Mapping_AL tables. It joins the two tables on the company ID and filters for rows where the ContactNumber in Company_Mapping_AL matches the VendorId in Company_AL, assuming VendorId represents contact number in Company_AL. The output includes the company ID, company name, and the matching contact number from Company_Mapping_AL."}
{"timestamp": "2025-08-01 17:50:10", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:50:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cm].[CompanyId], [c].[CompanyName], [cm].[ContactNumber] FROM [Company_Mapping_AL] AS [cm] INNER JOIN [Company_AL] AS [c] ON [cm].[CompanyId] = [c].[ID] WHERE [cm].[ContactNumber] COLLATE SQL_Latin1_General_CP1_CI_AS = [c].[VendorId] COLLATE SQL_Latin1_General_CP1_CI_AS : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2FD7E00>"}
{"timestamp": "2025-08-01 17:50:56", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List the cities where OTC sales occurred and match with company address in Company_Mapping., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-01 17:50:56", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all companies that have the same contact number in both the Company and Company_Mapping tables."}
{"timestamp": "2025-08-01 17:50:56", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-01 17:50:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the cities where OTC sales occurred and match these cities with the company addresses in the Company_Mapping table."
}"}
{"timestamp": "2025-08-01 17:50:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-01 17:50:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List the cities where OTC sales occurred and match these cities with the company addresses in the Company_Mapping table.', [{'role': 'user', 'content': 'List the cities where OTC sales occurred and match these cities with the company addresses in the Company_Mapping table.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-01 17:50:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-01 17:50:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show the contact details and address for each mapped company.
  query: SELECT [CompanyId], [VendorCode], [ContactPerson], [ContactNumber], [Email], [Address], [Address2], [City], [State], [PinCode], [GSTNO], [PanNo], [StateCode], [Transport] FROM [Company_Mapping_AL]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-01 17:51:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the distinct cities where OTC sales occurred from tbl_OTCSale_GMPL and matches these cities with the cities in the Company_Mapping_GMPL table. It selects the distinct city names from both tables where the city names match case-insensitively using COLLATE SQL_Latin1_General_CP1_CI_AS.",
  "query": "SELECT DISTINCT otc.[Address] AS OTCSaleAddressCity, cm.[City] AS CompanyMappingCity FROM [tbl_OTCSale_GMPL] AS otc JOIN [company_mapping_GMPL] AS cm ON otc.[Address] COLLATE SQL_Latin1_General_CP1_CI_AS = cm.[City] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE otc.[Address] IS NOT NULL AND cm.[City] IS NOT NULL",
  "error": null
}"}
{"timestamp": "2025-08-01 17:51:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-01 17:51:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the distinct cities where OTC sales occurred from tbl_OTCSale_GMPL and matches these cities with the cities in the Company_Mapping_GMPL table. It selects the distinct city names from both tables where the city names match case-insensitively using COLLATE SQL_Latin1_General_CP1_CI_AS."}
{"timestamp": "2025-08-01 17:51:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-01 17:51:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT otc.[Address] AS OTCSaleAddressCity, cm.[City] AS CompanyMappingCity FROM [tbl_OTCSale_GMPL] AS otc JOIN [company_mapping_GMPL] AS cm ON otc.[Address] COLLATE SQL_Latin1_General_CP1_CI_AS = cm.[City] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE otc.[Address] IS NOT NULL AND cm.[City] IS NOT NULL : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9E10>"}
{"timestamp": "2025-08-04 09:23:39", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which SKUs are common in both AF_OrderItemS and AmazonListing?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:23:39", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the cities where OTC sales occurred and match these cities with the company addresses in the Company_Mapping table."}
{"timestamp": "2025-08-04 09:23:39", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:23:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List the SKUs that are common in both the AF_OrderItemS and AmazonListing tables."
}"}
{"timestamp": "2025-08-04 09:23:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:23:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List the SKUs that are common in both the AF_OrderItemS and AmazonListing tables.', [{'role': 'user', 'content': 'List the SKUs that are common in both the AF_OrderItemS and AmazonListing tables.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:23:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:23:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]

Example 2:
  input: Get all Amazon listings with missing ASIN values.
  query: SELECT [MSKU], [OriginalSku], [Asin] FROM [AmazonListing_GMPL] WHERE [Asin] IS NULL OR [Asin] = '#N/A'
"}
{"timestamp": "2025-08-04 09:23:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the SKUs that are common between the AF_OrderItems_GMPL and AmazonListing_GMPL tables by performing an inner join on the SKU columns from both tables. It selects the SKU from AF_OrderItems_GMPL where the SKU matches with AmazonListing_GMPL.",
  "query": "SELECT TOP (1000) [af].[Lineitem_sku] AS [SKU] FROM [af_orderitems_GMPL] AS [af] INNER JOIN [AmazonListing_GMPL] AS [amz] ON [af].[Lineitem_sku] = [amz].[Sku]",
  "error": null
}"}
{"timestamp": "2025-08-04 09:23:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:23:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the SKUs that are common between the AF_OrderItems_GMPL and AmazonListing_GMPL tables by performing an inner join on the SKU columns from both tables. It selects the SKU from AF_OrderItems_GMPL where the SKU matches with AmazonListing_GMPL."}
{"timestamp": "2025-08-04 09:23:43", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:23:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[Lineitem_sku] AS [SKU] FROM [af_orderitems_GMPL] AS [af] INNER JOIN [AmazonListing_GMPL] AS [amz] ON [af].[Lineitem_sku] = [amz].[Sku] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2FD7770>"}
{"timestamp": "2025-08-04 09:26:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the Amazon orders that match the MSKU and GST rate with OTC orders., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:26:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List the SKUs that are common in both the AF_OrderItemS and AmazonListing tables."}
{"timestamp": "2025-08-04 09:26:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:26:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find the Amazon orders that have matching MSKU and GST rate with OTC orders."
}"}
{"timestamp": "2025-08-04 09:26:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:26:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find the Amazon orders that have matching MSKU and GST rate with OTC orders.', [{'role': 'user', 'content': 'Find the Amazon orders that have matching MSKU and GST rate with OTC orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:26:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:26:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-04 09:27:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves Amazon orders and OTC sales orders that have matching MSKU and GST rate values. It joins tbl_amazon_GMPL (Amazon orders) with tbl_OTCSale_GMPL (OTC sales) on the MSKU and GST rate columns. The output includes the Amazon order's BillID, MSKU, and GST rate, along with the OTC order's OrderNo, MSKU, and GST rate.",
  "query": "SELECT TOP (1000) [amz].[BillID], [amz].[MSKU], [pm].[GSTRate], [otc].[OrderNo], [otc].[MSKU], [pm].[GSTRate] AS [OTC_GSTRate] FROM [tbl_amazon_GMPL] AS [amz] JOIN [tbl_OTCSale_GMPL] AS [otc] ON [amz].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [otc].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS JOIN [ProductMaster_AL] AS [pm] ON [amz].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [pm].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE [pm].[GSTRate] COLLATE SQL_Latin1_General_CP1_CI_AS = (SELECT TOP 1 [GSTRate] FROM [ProductMaster_AL] WHERE [MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [otc].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS) ORDER BY [amz].[BillID]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-04 09:27:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:27:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves Amazon orders and OTC sales orders that have matching MSKU and GST rate values. It joins tbl_amazon_GMPL (Amazon orders) with tbl_OTCSale_GMPL (OTC sales) on the MSKU and GST rate columns. The output includes the Amazon order's BillID, MSKU, and GST rate, along with the OTC order's OrderNo, MSKU, and GST rate."}
{"timestamp": "2025-08-04 09:27:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:27:03", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 09:27:41", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which warehouse has the highest number of products marked 'Published'?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:27:41", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Find the Amazon orders that have matching MSKU and GST rate with OTC orders."}
{"timestamp": "2025-08-04 09:27:41", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:27:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the warehouse with the highest number of products marked as 'Published'."
}"}
{"timestamp": "2025-08-04 09:27:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:27:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Identify the warehouse with the highest number of products marked as 'Published'.", [{'role': 'user', 'content': "Identify the warehouse with the highest number of products marked as 'Published'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:27:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:27:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]

Example 2:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]
"}
{"timestamp": "2025-08-04 09:27:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the warehouse with the highest count of products marked as 'Published' in the InventoryDetail_GMPL table. It counts the number of published products per warehouse and returns the warehouse ID along with the count, ordered by the count in descending order, limited to the top 1 result.",
  "query": "SELECT TOP (1) [i].[WarehouseId], COUNT([i].[Id]) AS [PublishedProductCount] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[Published] = 1 GROUP BY [i].[WarehouseId] ORDER BY COUNT([i].[Id]) DESC",
  "error": null
}"}
{"timestamp": "2025-08-04 09:27:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:27:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the warehouse with the highest count of products marked as 'Published' in the InventoryDetail_GMPL table. It counts the number of published products per warehouse and returns the warehouse ID along with the count, ordered by the count in descending order, limited to the top 1 result."}
{"timestamp": "2025-08-04 09:27:45", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:27:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1) [i].[WarehouseId], COUNT([i].[Id]) AS [PublishedProductCount] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[Published] = 1 GROUP BY [i].[WarehouseId] ORDER BY COUNT([i].[Id]) DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F1EFC8A0>"}
{"timestamp": "2025-08-04 09:28:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all SKUs listed on Amazon and sold through Amazon Flex with prices., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:28:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the warehouse with the highest number of products marked as 'Published'."}
{"timestamp": "2025-08-04 09:28:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:28:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all SKUs that are listed on Amazon and sold through Amazon Flex, including their prices."
}"}
{"timestamp": "2025-08-04 09:28:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:28:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all SKUs that are listed on Amazon and sold through Amazon Flex, including their prices.', [{'role': 'user', 'content': 'List all SKUs that are listed on Amazon and sold through Amazon Flex, including their prices.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:28:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:28:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show average selling price of Amazon orders by SKU.
  query: SELECT [SKU], AVG(TRY_CAST([Selling_Price] AS DECIMAL(10,2))) AS AvgPrice FROM [tbl_Amazon_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-04 09:29:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the list of SKUs that are listed on Amazon and also sold through Amazon Flex. It joins the AmazonListing_GMPL table with the tbl_AmazonFlex_GMPL table on the SKU column. The output includes the SKU from AmazonListing, the ProductName from AmazonListing, and the itemprice from AmazonFlex. The query limits the result to the top 1000 records.",
  "query": "SELECT TOP (1000) [a].[Sku], [a].[ProductName], [af].[itemprice] FROM [AmazonListing_GMPL] AS [a] INNER JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [a].[Sku] = [af].[sku]",
  "error": null
}"}
{"timestamp": "2025-08-04 09:29:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:29:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the list of SKUs that are listed on Amazon and also sold through Amazon Flex. It joins the AmazonListing_GMPL table with the tbl_AmazonFlex_GMPL table on the SKU column. The output includes the SKU from AmazonListing, the ProductName from AmazonListing, and the itemprice from AmazonFlex. The query limits the result to the top 1000 records."}
{"timestamp": "2025-08-04 09:29:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:29:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [a].[Sku], [a].[ProductName], [af].[itemprice] FROM [AmazonListing_GMPL] AS [a] INNER JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [a].[Sku] = [af].[sku] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC4EC0>"}
{"timestamp": "2025-08-04 09:30:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show all OTC sales grouped by product brand and vendor contact city., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:30:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all SKUs that are listed on Amazon and sold through Amazon Flex, including their prices."}
{"timestamp": "2025-08-04 09:30:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:30:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all OTC sales grouped by product brand and vendor contact city."
}"}
{"timestamp": "2025-08-04 09:30:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:30:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all OTC sales grouped by product brand and vendor contact city.', [{'role': 'user', 'content': 'List all OTC sales grouped by product brand and vendor contact city.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:30:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:30:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-04 09:30:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the total OTC sales amount grouped by product brand and vendor contact city. It joins tbl_OTCSale_GMPL with ProductMaster_AL on SKU to get the product brand, and joins with Company_Mapping_AL on VendorId to get the vendor contact city. The query sums the Amount after casting it to float and rounds the result to 1 decimal place. Results are grouped by product brand and city, limited to top 1000.",
  "query": "SELECT TOP (1000) p.[CarBrand] AS ProductBrand, cm.[City] AS VendorContactCity, ROUND(SUM(TRY_CAST(t.[Amount] AS FLOAT)), 1) AS TotalOTCSalesAmount FROM [tbl_OTCSale_GMPL] AS t JOIN [ProductMaster_AL] AS p ON t.[SKU] = p.[SKU] JOIN [Company_Mapping_AL] AS cm ON TRY_CAST(t.[VendorId] AS INT) = cm.[CompanyId] GROUP BY p.[CarBrand], cm.[City] ORDER BY p.[CarBrand], cm.[City]",
  "error": null
}"}
{"timestamp": "2025-08-04 09:30:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:30:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the total OTC sales amount grouped by product brand and vendor contact city. It joins tbl_OTCSale_GMPL with ProductMaster_AL on SKU to get the product brand, and joins with Company_Mapping_AL on VendorId to get the vendor contact city. The query sums the Amount after casting it to float and rounds the result to 1 decimal place. Results are grouped by product brand and city, limited to top 1000."}
{"timestamp": "2025-08-04 09:30:38", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:30:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[CarBrand] AS ProductBrand, cm.[City] AS VendorContactCity, ROUND(SUM(TRY_CAST(t.[Amount] AS FLOAT)), 1) AS TotalOTCSalesAmount FROM [tbl_OTCSale_GMPL] AS t JOIN [ProductMaster_AL] AS p ON t.[SKU] = p.[SKU] JOIN [Company_Mapping_AL] AS cm ON TRY_CAST(t.[VendorId] AS INT) = cm.[CompanyId] GROUP BY p.[CarBrand], cm.[City] ORDER BY p.[CarBrand], cm.[City] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F2EC4EC0>"}
{"timestamp": "2025-08-04 09:31:42", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies have mapped multiple shipping addresses used in OTC sales?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:31:42", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all OTC sales grouped by product brand and vendor contact city."}
{"timestamp": "2025-08-04 09:31:42", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:31:43", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List companies that have multiple shipping addresses associated with their OTC sales."
}"}
{"timestamp": "2025-08-04 09:31:43", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:31:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List companies that have multiple shipping addresses associated with their OTC sales.', [{'role': 'user', 'content': 'List companies that have multiple shipping addresses associated with their OTC sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:31:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:31:44", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-04 09:31:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves companies that have multiple distinct shipping addresses associated with their OTC sales. It groups the OTC sales by VendorId and counts distinct CustomerShippingAddress values, filtering for those with more than one distinct shipping address. The output includes the VendorId and the count of distinct shipping addresses.",
  "query": "SELECT TOP (1000) [t].[VendorId], COUNT(DISTINCT [t].[CustomerShippingAddress]) AS [DistinctShippingAddressCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[VendorId] IS NOT NULL AND [t].[CustomerShippingAddress] IS NOT NULL GROUP BY [t].[VendorId] HAVING COUNT(DISTINCT [t].[CustomerShippingAddress]) > 1 ORDER BY [DistinctShippingAddressCount] DESC",
  "error": null
}"}
{"timestamp": "2025-08-04 09:31:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:31:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves companies that have multiple distinct shipping addresses associated with their OTC sales. It groups the OTC sales by VendorId and counts distinct CustomerShippingAddress values, filtering for those with more than one distinct shipping address. The output includes the VendorId and the count of distinct shipping addresses."}
{"timestamp": "2025-08-04 09:31:47", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:31:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [t].[VendorId], COUNT(DISTINCT [t].[CustomerShippingAddress]) AS [DistinctShippingAddressCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[VendorId] IS NOT NULL AND [t].[CustomerShippingAddress] IS NOT NULL GROUP BY [t].[VendorId] HAVING COUNT(DISTINCT [t].[CustomerShippingAddress]) > 1 ORDER BY [DistinctShippingAddressCount] DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F1EFC8A0>"}
{"timestamp": "2025-08-04 09:35:54", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which companies have orders in both tbl_OTCSale and Autofurnish_OrderS?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:35:54", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List companies that have multiple shipping addresses associated with their OTC sales."}
{"timestamp": "2025-08-04 09:35:54", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:35:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List companies that have orders in both tbl_OTCSale and Autofurnish_OrderS."
}"}
{"timestamp": "2025-08-04 09:35:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:35:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List companies that have orders in both tbl_OTCSale and Autofurnish_OrderS.', [{'role': 'user', 'content': 'List companies that have orders in both tbl_OTCSale and Autofurnish_OrderS.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:35:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:35:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-04 09:35:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves companies that have orders in both tbl_OTCSale_GMPL and Autofurnish_OrderS_GMPL tables. It selects the top 1000 distinct CompanyBillID values from tbl_OTCSale_GMPL and AFOrderId values from Autofurnish_OrderS_GMPL, then finds the intersection of these order identifiers to list companies with orders in both tables.",
  "query": "WITH OTCOrders AS ( SELECT DISTINCT TOP (1000) [t1].[CompanyBillID] FROM [tbl_OTCSale_GMPL] AS [t1] WHERE [t1].[CompanyBillID] IS NOT NULL ), AFOrders AS ( SELECT DISTINCT TOP (1000) [t2].[AFOrderId] FROM [Autofurnish_OrderS_GMPL] AS [t2] WHERE [t2].[AFOrderId] IS NOT NULL ) SELECT TOP (1000) [otc].[CompanyBillID] AS [OrderIdentifier] FROM [OTCOrders] AS [otc] INNER JOIN [AFOrders] AS [af] ON [otc].[CompanyBillID] = [af].[AFOrderId] ORDER BY [otc].[CompanyBillID];",
  "error": null
}"}
{"timestamp": "2025-08-04 09:35:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:35:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves companies that have orders in both tbl_OTCSale_GMPL and Autofurnish_OrderS_GMPL tables. It selects the top 1000 distinct CompanyBillID values from tbl_OTCSale_GMPL and AFOrderId values from Autofurnish_OrderS_GMPL, then finds the intersection of these order identifiers to list companies with orders in both tables."}
{"timestamp": "2025-08-04 09:35:59", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:35:59", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 09:41:09", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 09:41:10", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 09:41:12", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show OTC orders grouped by vendor code and city from the shipping address., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 09:41:12", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 09:41:12", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 09:41:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display OTC orders grouped by vendor code and city from the shipping address."
}"}
{"timestamp": "2025-08-04 09:41:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 09:41:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display OTC orders grouped by vendor code and city from the shipping address.', [{'role': 'user', 'content': 'Display OTC orders grouped by vendor code and city from the shipping address.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 09:41:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 09:41:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get OTC sale orders with their status, amount, and payment status.
  query: SELECT [OrderNo], [OrderStatus], [Amount], [Payment_Status], [OrderDate], [CustomerName] FROM [tbl_OTCSale_AL] ORDER BY [OrderDate] DESC

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-04 09:41:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the count of OTC orders grouped by vendor code and city from the shipping address. It joins tbl_OTCSale_GMPL with company_mapping_GMPL on VendorId and CompanyId to get the vendor code and city. The output includes VendorCode, City, and the count of orders for each group.",
  "query": "SELECT TOP (1000) [cm].[VendorCode], [cm].[City], COUNT(*) AS [OrderCount] FROM [tbl_OTCSale_GMPL] AS [otc] INNER JOIN [company_mapping_GMPL] AS [cm] ON TRY_CAST([otc].[VendorId] AS INT) = [cm].[CompanyId] GROUP BY [cm].[VendorCode], [cm].[City] ORDER BY [cm].[VendorCode], [cm].[City]",
  "error": null
}"}
{"timestamp": "2025-08-04 09:41:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 09:41:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the count of OTC orders grouped by vendor code and city from the shipping address. It joins tbl_OTCSale_GMPL with company_mapping_GMPL on VendorId and CompanyId to get the vendor code and city. The output includes VendorCode, City, and the count of orders for each group."}
{"timestamp": "2025-08-04 09:41:16", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 09:41:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [cm].[VendorCode], [cm].[City], COUNT(*) AS [OrderCount] FROM [tbl_OTCSale_GMPL] AS [otc] INNER JOIN [company_mapping_GMPL] AS [cm] ON TRY_CAST([otc].[VendorId] AS INT) = [cm].[CompanyId] GROUP BY [cm].[VendorCode], [cm].[City] ORDER BY [cm].[VendorCode], [cm].[City] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000244F21E9A90>"}
{"timestamp": "2025-08-04 09:59:33", "logger": "app", "level": "INFO", "message": "Ingesting 27 generic examples into generic_examples"}
{"timestamp": "2025-08-04 09:59:35", "logger": "app", "level": "INFO", "message": "Successfully ingested 27 examples into generic_examples"}
{"timestamp": "2025-08-04 09:59:35", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-04 09:59:35", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-04 09:59:36", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-04 10:06:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 10:06:47", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 10:06:52", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the Amazon orders that match the MSKU and GST rate with OTC orders., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 10:06:52", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 10:06:52", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 10:06:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find Amazon orders where the MSKU and GST rate match those of OTC orders."
}"}
{"timestamp": "2025-08-04 10:06:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 10:06:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find Amazon orders where the MSKU and GST rate match those of OTC orders.', [{'role': 'user', 'content': 'Find Amazon orders where the MSKU and GST rate match those of OTC orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 10:06:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 10:07:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves Amazon orders from tbl_amazon_GMPL and OTC sales from tbl_OTCSale_GMPL where the MSKU and GST rate match. It joins tbl_amazon_GMPL with ProductMaster_AL on SKU to get GST rate, and joins tbl_OTCSale_GMPL with ProductMaster_AL on SKU to get GST rate. It then filters for records where the MSKU and GST rate from Amazon orders match those from OTC orders. The output includes Amazon order details and OTC order details with their MSKU and GST rate.",
  "query": "WITH AmazonOrders AS ( SELECT TOP (1000) [am].[BillID], [am].[OrderId], [am].[SKU] AS [AmazonSKU], [pm].[MSKU] AS [AmazonMSKU], [pm].[GSTRate] AS [AmazonGSTRate] FROM [tbl_amazon_GMPL] AS [am] JOIN [ProductMaster_AL] AS [pm] ON [am].[SKU] = [pm].[SKU] WHERE [pm].[MSKU] IS NOT NULL AND [pm].[GSTRate] IS NOT NULL ), OTCOrders AS ( SELECT TOP (1000) [otc].[OrderNo], [otc].[SKU] AS [OTCSKU], [pm].[MSKU] AS [OTCMSKU], [pm].[GSTRate] AS [OTCGSTRate] FROM [tbl_OTCSale_GMPL] AS [otc] JOIN [ProductMaster_AL] AS [pm] ON [otc].[SKU] = [pm].[SKU] WHERE [pm].[MSKU] IS NOT NULL AND [pm].[GSTRate] IS NOT NULL ) SELECT TOP (1000) [a].[BillID], [a].[OrderId], [a].[AmazonSKU], [a].[AmazonMSKU], [a].[AmazonGSTRate], [o].[OrderNo], [o].[OTCSKU], [o].[OTCMSKU], [o].[OTCGSTRate] FROM AmazonOrders AS [a] INNER JOIN OTCOrders AS [o] ON [a].[AmazonMSKU] = [o].[OTCMSKU] AND [a].[AmazonGSTRate] COLLATE SQL_Latin1_General_CP1_CI_AS = [o].[OTCGSTRate] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [a].[BillID], [o].[OrderNo]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-04 10:07:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 10:07:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves Amazon orders from tbl_amazon_GMPL and OTC sales from tbl_OTCSale_GMPL where the MSKU and GST rate match. It joins tbl_amazon_GMPL with ProductMaster_AL on SKU to get GST rate, and joins tbl_OTCSale_GMPL with ProductMaster_AL on SKU to get GST rate. It then filters for records where the MSKU and GST rate from Amazon orders match those from OTC orders. The output includes Amazon order details and OTC order details with their MSKU and GST rate."}
{"timestamp": "2025-08-04 10:07:02", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 16:55:17", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-04 16:55:53", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-04 16:56:37", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-04 16:56:38", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-04 16:56:38", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-04 16:56:39", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-04 16:56:40", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-04 16:56:56", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 16:56:58", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 16:57:03", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 16:57:04", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 16:57:37", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Get all active products with their SKU and product name., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 16:57:37", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 16:57:37", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 16:57:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve all active products along with their SKU and product name."
}"}
{"timestamp": "2025-08-04 16:57:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 16:57:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve all active products along with their SKU and product name.', [{'role': 'user', 'content': 'Retrieve all active products along with their SKU and product name.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 16:57:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 16:57:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all active products with their MSKU and status.
  query: SELECT [SKU], [MSKU], [ProductName], [ProductStatus] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-04 16:57:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 active products from the ProductMaster_AL table, selecting the SKU and ProductName columns where the product is marked as active and not deleted.",
  "query": "SELECT TOP (1000) [p].[SKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] WHERE [p].[IsActive] = 1 AND [p].[IsDeleted] = 0",
  "error": null
}"}
{"timestamp": "2025-08-04 16:57:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 16:57:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 active products from the ProductMaster_AL table, selecting the SKU and ProductName columns where the product is marked as active and not deleted."}
{"timestamp": "2025-08-04 16:57:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 16:57:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [p].[SKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] WHERE [p].[IsActive] = 1 AND [p].[IsDeleted] = 0 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001A7A53B7770>"}
{"timestamp": "2025-08-04 16:58:22", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 16:58:22", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 16:58:26", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 16:58:26", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 16:58:26", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 16:58:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify customers who have made purchases through multiple channels, specifically OTC, Amazon, and Autofurnish."
}"}
{"timestamp": "2025-08-04 16:58:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 16:58:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify customers who have made purchases through multiple channels, specifically OTC, Amazon, and Autofurnish.', [{'role': 'user', 'content': 'Identify customers who have made purchases through multiple channels, specifically OTC, Amazon, and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 16:58:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 16:58:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3
"}
{"timestamp": "2025-08-04 16:58:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies customers who have made purchases through all three channels: OTC sales, Amazon orders, and Autofurnish orders. It extracts distinct customer names from each channel's respective tables and finds the intersection of customers present in all three datasets.",
  "query": "WITH OTC_Customers AS ( SELECT DISTINCT [toc].[CustomerName] AS [CustomerName] FROM [tbl_OTCSale_GMPL] AS [toc] WHERE [toc].[CustomerName] IS NOT NULL AND LTRIM(RTRIM([toc].[CustomerName])) <> '' ), Amazon_Customers AS ( SELECT DISTINCT [amz].[BuyerName] AS [CustomerName] FROM [tbl_amazon_GMPL] AS [amz] WHERE [amz].[BuyerName] IS NOT NULL AND LTRIM(RTRIM([amz].[BuyerName])) <> '' ), Autofurnish_Customers AS ( SELECT DISTINCT [af].[Email] AS [CustomerName] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Email] IS NOT NULL AND LTRIM(RTRIM([af].[Email])) <> '' ) SELECT TOP (1000) [otc].[CustomerName] FROM OTC_Customers AS [otc] INNER JOIN Amazon_Customers AS [amz] ON [otc].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [amz].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS INNER JOIN Autofurnish_Customers AS [af] ON [otc].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [otc].[CustomerName];",
  "error": null
}"}
{"timestamp": "2025-08-04 16:58:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 16:58:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies customers who have made purchases through all three channels: OTC sales, Amazon orders, and Autofurnish orders. It extracts distinct customer names from each channel's respective tables and finds the intersection of customers present in all three datasets."}
{"timestamp": "2025-08-04 16:58:35", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 16:58:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Customers AS ( SELECT DISTINCT [toc].[CustomerName] AS [CustomerName] FROM [tbl_OTCSale_GMPL] AS [toc] WHERE [toc].[CustomerName] IS NOT NULL AND LTRIM(RTRIM([toc].[CustomerName])) <> '' ), Amazon_Customers AS ( SELECT DISTINCT [amz].[BuyerName] AS [CustomerName] FROM [tbl_amazon_GMPL] AS [amz] WHERE [amz].[BuyerName] IS NOT NULL AND LTRIM(RTRIM([amz].[BuyerName])) <> '' ), Autofurnish_Customers AS ( SELECT DISTINCT [af].[Email] AS [CustomerName] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Email] IS NOT NULL AND LTRIM(RTRIM([af].[Email])) <> '' ) SELECT TOP (1000) [otc].[CustomerName] FROM OTC_Customers AS [otc] INNER JOIN Amazon_Customers AS [amz] ON [otc].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [amz].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS INNER JOIN Autofurnish_Customers AS [af] ON [otc].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [otc].[CustomerName]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001A7A53B5470>"}
{"timestamp": "2025-08-04 16:58:57", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 16:58:58", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 16:59:01", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show warehouse-wise inventory value (sum of MSP) for each product category., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 16:59:01", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 16:59:01", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 16:59:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category."
}"}
{"timestamp": "2025-08-04 16:59:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 16:59:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category.', [{'role': 'user', 'content': 'Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 16:59:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 16:59:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-04 16:59:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total inventory value by warehouse and product category. It joins InventoryDetail with ProductMaster on MSKU, and with tbl_Warehouse on WarehouseId. It groups the results by warehouse name and product category, summing the MSP values cast as float and rounded to 1 decimal place. The output includes the warehouse name, product category, and total inventory value.",
  "query": "SELECT TOP (1000) w.[Name] AS [WarehouseName], p.[Category1] AS [ProductCategory], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS [TotalInventoryValue] FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1]",
  "error": null
}"}
{"timestamp": "2025-08-04 16:59:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 16:59:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total inventory value by warehouse and product category. It joins InventoryDetail with ProductMaster on MSKU, and with tbl_Warehouse on WarehouseId. It groups the results by warehouse name and product category, summing the MSP values cast as float and rounded to 1 decimal place. The output includes the warehouse name, product category, and total inventory value."}
{"timestamp": "2025-08-04 16:59:06", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 16:59:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS [WarehouseName], p.[Category1] AS [ProductCategory], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS [TotalInventoryValue] FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001A7A53B79A0>"}
{"timestamp": "2025-08-04 16:59:52", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: show only for Factory, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 16:59:52", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category."}
{"timestamp": "2025-08-04 16:59:52", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 16:59:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category, showing only data for the Factory warehouse."
}"}
{"timestamp": "2025-08-04 16:59:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 16:59:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category, showing only data for the Factory warehouse.', [{'role': 'user', 'content': 'Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category, showing only data for the Factory warehouse.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 16:59:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 16:59:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-04 16:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total inventory value by product category for the 'Factory' warehouse. It joins InventoryDetail with tbl_Warehouse to filter for the 'Factory' warehouse, and joins ProductMaster to get the product category. The total inventory value is computed as the sum of MSP (cast to float) grouped by warehouse name and product category.",
  "query": "SELECT TOP (1000) w.[Name] AS [WarehouseName], p.[Category1] AS [ProductCategory], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS [TotalInventoryValue] FROM [InventoryDetail_GMPL] AS i INNER JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] INNER JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE w.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Factory' GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1];",
  "error": null
}"}
{"timestamp": "2025-08-04 16:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 16:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total inventory value by product category for the 'Factory' warehouse. It joins InventoryDetail with tbl_Warehouse to filter for the 'Factory' warehouse, and joins ProductMaster to get the product category. The total inventory value is computed as the sum of MSP (cast to float) grouped by warehouse name and product category."}
{"timestamp": "2025-08-04 16:59:59", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 16:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS [WarehouseName], p.[Category1] AS [ProductCategory], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS [TotalInventoryValue] FROM [InventoryDetail_GMPL] AS i INNER JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] INNER JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE w.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Factory' GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001A7A53B7BD0>"}
{"timestamp": "2025-08-04 17:00:30", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: give all the product categorises, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:00:30", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the total inventory value by warehouse, calculated as the sum of MSP, for each product category, showing only data for the Factory warehouse."}
{"timestamp": "2025-08-04 17:00:30", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:00:53", "logger": "app", "level": "ERROR", "message": "Prompt generation error: Connection error."}
{"timestamp": "2025-08-04 17:02:16", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 17:02:16", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 17:02:35", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have never been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:02:35", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 17:02:35", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:02:36", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have never been sold."
}"}
{"timestamp": "2025-08-04 17:02:36", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:02:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have never been sold.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have never been sold.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:02:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:02:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())
"}
{"timestamp": "2025-08-04 17:02:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 distinct products that are present in the inventory but have never been sold. It selects the MSKU from InventoryDetail_GMPL and excludes any MSKU that appears in tbl_OTCSale_GMPL or tbl_AmazonFlex_GMPL or tbl_amazon_GMPL or af_orderitems_GMPL by checking for absence in these sales-related tables.",
  "query": "SELECT TOP (1000) DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL AND [i].[MSKU] NOT IN (SELECT [t].[MSKU] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[MSKU] IS NOT NULL) AND [i].[MSKU] NOT IN (SELECT [af].[sku] FROM [tbl_AmazonFlex_GMPL] AS [af] WHERE [af].[sku] IS NOT NULL) AND [i].[MSKU] NOT IN (SELECT [am].[SKU] FROM [tbl_amazon_GMPL] AS [am] WHERE [am].[SKU] IS NOT NULL) AND [i].[MSKU] NOT IN (SELECT [ao].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [ao] WHERE [ao].[Lineitem_sku] IS NOT NULL);",
  "error": null
}"}
{"timestamp": "2025-08-04 17:02:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:02:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 distinct products that are present in the inventory but have never been sold. It selects the MSKU from InventoryDetail_GMPL and excludes any MSKU that appears in tbl_OTCSale_GMPL or tbl_AmazonFlex_GMPL or tbl_amazon_GMPL or af_orderitems_GMPL by checking for absence in these sales-related tables."}
{"timestamp": "2025-08-04 17:02:43", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:02:44", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:02:56", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 17:02:56", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 17:04:09", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-04 17:04:10", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-04 17:04:10", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-04 17:04:10", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-04 17:04:11", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-04 17:04:16", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 17:04:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 17:04:58", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have never been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:04:58", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 17:04:58", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:04:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have never been sold."
}"}
{"timestamp": "2025-08-04 17:04:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:05:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have never been sold.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have never been sold.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:05:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:05:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())
"}
{"timestamp": "2025-08-04 17:05:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 distinct products identified by their MSKU that are present in the inventory (InventoryDetail_GMPL) but have never been sold in any OTC sale (tbl_OTCSale_GMPL) or Amazon sale (tbl_amazon_GMPL). It selects MSKU from InventoryDetail_GMPL where MSKU is not null and filters out those MSKUs that appear in either tbl_OTCSale_GMPL or tbl_amazon_GMPL by using NOT EXISTS subqueries.",
  "query": "SELECT TOP (1000) DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL AND NOT EXISTS (SELECT 1 FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[MSKU] = [i].[MSKU]) AND NOT EXISTS (SELECT 1 FROM [tbl_amazon_GMPL] AS [a] WHERE [a].[SKU] = [i].[MSKU])",
  "error": null
}"}
{"timestamp": "2025-08-04 17:05:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:05:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 distinct products identified by their MSKU that are present in the inventory (InventoryDetail_GMPL) but have never been sold in any OTC sale (tbl_OTCSale_GMPL) or Amazon sale (tbl_amazon_GMPL). It selects MSKU from InventoryDetail_GMPL where MSKU is not null and filters out those MSKUs that appear in either tbl_OTCSale_GMPL or tbl_amazon_GMPL by using NOT EXISTS subqueries."}
{"timestamp": "2025-08-04 17:05:04", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:05:07", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:11:36", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 17:11:36", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 17:12:05", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show warehouse-wise inventory value (sum of MSP) for each product category., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:12:05", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 17:12:05", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:12:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse."
}"}
{"timestamp": "2025-08-04 17:12:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:12:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse.', [{'role': 'user', 'content': 'Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:12:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:12:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-04 17:12:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total inventory value as the sum of MSP for each product category grouped by warehouse. It joins InventoryDetail with ProductMaster on MSKU, and InventoryDetail with tbl_Warehouse on WarehouseId. The results are grouped by warehouse name and product category1, and the total MSP is rounded to 1 decimal place.",
  "query": "SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS TotalInventoryValue FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1];",
  "error": null
}"}
{"timestamp": "2025-08-04 17:12:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:12:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total inventory value as the sum of MSP for each product category grouped by warehouse. It joins InventoryDetail with ProductMaster on MSKU, and InventoryDetail with tbl_Warehouse on WarehouseId. The results are grouped by warehouse name and product category1, and the total MSP is rounded to 1 decimal place."}
{"timestamp": "2025-08-04 17:12:12", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:12:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS TotalInventoryValue FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001FCAC7E3380>"}
{"timestamp": "2025-08-04 17:12:42", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have never been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:12:42", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse."}
{"timestamp": "2025-08-04 17:12:42", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:13:06", "logger": "app", "level": "ERROR", "message": "Prompt generation error: Connection error."}
{"timestamp": "2025-08-04 17:14:32", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 17:14:32", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 17:14:36", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have never been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:14:36", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 17:14:36", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:14:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have never been sold."
}"}
{"timestamp": "2025-08-04 17:14:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:14:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have never been sold.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have never been sold.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:14:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:14:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())
"}
{"timestamp": "2025-08-04 17:14:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 distinct products that are currently present in inventory but have never been sold. It selects the MSKU from InventoryDetail_GMPL where the product is not marked as out (IsOut = 0) and excludes any MSKU that appears in tbl_OTCSale_GMPL or tbl_Amazon_GMPL sales tables. The query ensures only products with inventory and no sales records are listed.",
  "query": "SELECT TOP (1000) DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[IsOut] = 0 AND [i].[MSKU] NOT IN (SELECT DISTINCT [ots].[MSKU] FROM [tbl_OTCSale_GMPL] AS [ots] WHERE [ots].[MSKU] IS NOT NULL) AND [i].[MSKU] NOT IN (SELECT DISTINCT [a].[SKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL);",
  "error": null
}"}
{"timestamp": "2025-08-04 17:14:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:14:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 distinct products that are currently present in inventory but have never been sold. It selects the MSKU from InventoryDetail_GMPL where the product is not marked as out (IsOut = 0) and excludes any MSKU that appears in tbl_OTCSale_GMPL or tbl_Amazon_GMPL sales tables. The query ensures only products with inventory and no sales records are listed."}
{"timestamp": "2025-08-04 17:14:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:14:44", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:15:38", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:15:38", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that are currently in inventory but have never been sold."}
{"timestamp": "2025-08-04 17:15:38", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:15:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show the monthly sales report with tax breakdown for orders from Amazon and Autofurnish."
}"}
{"timestamp": "2025-08-04 17:15:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:15:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show the monthly sales report with tax breakdown for orders from Amazon and Autofurnish.', [{'role': 'user', 'content': 'Show the monthly sales report with tax breakdown for orders from Amazon and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:15:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:15:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1
"}
{"timestamp": "2025-08-04 17:15:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report with tax breakdown for orders from both Amazon and Autofurnish. It aggregates total item price and total tax by month for Amazon orders from tbl_Amazon_GMPL and Autofurnish orders from Autofurnish_OrderS_GMPL, then combines the results. The report includes the month (formatted as 'MMM-yy'), month start date for ordering, total sales amount, and total tax amount, ordered chronologically by month.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CAST(SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2) AS DATE), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2) AS DATE)), 0) AS [_Month_Start], SUM(TRY_CAST([a].[ItemPrice] AS FLOAT)) AS [TotalSales], SUM(TRY_CAST([a].[ItemTax] AS FLOAT)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [a] WHERE TRY_CAST(SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2) AS DATE) IS NOT NULL GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2) AS DATE)), 0) , FORMAT(TRY_CAST(SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2) AS DATE), 'MMM-yy') ), AutofurnishSales AS ( SELECT FORMAT(TRY_CAST(LEFT([af].[Created_at], 10) AS DATE), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE)), 0) AS [_Month_Start], SUM(TRY_CAST([af].[Total] AS FLOAT)) AS [TotalSales], SUM(TRY_CAST([af].[Taxes] AS FLOAT)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) IS NOT NULL GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE)), 0), FORMAT(TRY_CAST(LEFT([af].[Created_at], 10) AS DATE), 'MMM-yy') ) ) SELECT TOP (1000) [Month], [_Month_Start], ROUND(SUM([TotalSales]), 1) AS [TotalSales], ROUND(SUM([TotalTax]), 1) AS [TotalTax] FROM ( SELECT [Month], [_Month_Start], [TotalSales], [TotalTax] FROM AmazonSales UNION ALL SELECT [Month], [_Month_Start], [TotalSales], [TotalTax] FROM AutofurnishSales ) AS [CombinedSales] GROUP BY [Month], [_Month_Start] ORDER BY [_Month_Start]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-04 17:15:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:15:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report with tax breakdown for orders from both Amazon and Autofurnish. It aggregates total item price and total tax by month for Amazon orders from tbl_Amazon_GMPL and Autofurnish orders from Autofurnish_OrderS_GMPL, then combines the results. The report includes the month (formatted as 'MMM-yy'), month start date for ordering, total sales amount, and total tax amount, ordered chronologically by month."}
{"timestamp": "2025-08-04 17:15:51", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:15:51", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:22:29", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-04 17:22:29", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-04 17:33:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-04 17:33:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:33:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:33:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:33:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all Autofurnish orders with more than 3 items.
  query: SELECT [OrderNo], [Total], [Created_at] FROM [Autofurnish_OrderS_GMPL] WHERE [TotalItems] > 3

Example 2:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'
"}
{"timestamp": "2025-08-04 17:33:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves Autofurnish orders from the Autofurnish_OrderS_GMPL table where the total amount exceeds 10000. It selects the OrderNo, Total amount, and Shipping_Country for each qualifying order.",
  "query": "SELECT TOP (1000) [aos].[OrderNo], [aos].[Total], [aos].[Shipping_Country] FROM [Autofurnish_OrderS_GMPL] AS [aos] WHERE TRY_CAST([aos].[Total] AS FLOAT) > 10000",
  "error": null
}"}
{"timestamp": "2025-08-04 17:33:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:33:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves Autofurnish orders from the Autofurnish_OrderS_GMPL table where the total amount exceeds 10000. It selects the OrderNo, Total amount, and Shipping_Country for each qualifying order."}
{"timestamp": "2025-08-04 17:33:17", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:33:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [aos].[OrderNo], [aos].[Total], [aos].[Shipping_Country] FROM [Autofurnish_OrderS_GMPL] AS [aos] WHERE TRY_CAST([aos].[Total] AS FLOAT) > 10000 : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001FCAC7E3CB0>"}
{"timestamp": "2025-08-04 17:33:44", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish)., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:33:44", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:33:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 selling products by quantity across all sales channels including OTC, Amazon, and Autofurnish."
}"}
{"timestamp": "2025-08-04 17:33:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:33:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 selling products by quantity across all sales channels including OTC, Amazon, and Autofurnish.', [{'role': 'user', 'content': 'Retrieve the top 5 selling products by quantity across all sales channels including OTC, Amazon, and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:33:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:33:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-04 17:33:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 5 selling products by total quantity sold across all sales channels: OTC sales (tbl_OTCSale_GMPL), Amazon orders (tbl_amazon_GMPL), and Autofurnish orders (af_orderitems_GMPL). It aggregates the quantities from each channel separately, converts quantities to float for safe summation, then combines the totals per SKU. The final result lists the SKU and total quantity sold, ordered descending by total quantity.",
  "query": "WITH otc_qty AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS total_qty FROM [tbl_OTCSale_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), amazon_qty AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS total_qty FROM [tbl_amazon_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), autofurnish_qty AS ( SELECT [Lineitem_sku] AS [SKU], SUM(TRY_CAST([Lineitem_quantity] AS FLOAT)) AS total_qty FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] IS NOT NULL GROUP BY [Lineitem_sku] ), combined_qty AS ( SELECT [SKU], SUM(total_qty) AS total_quantity FROM ( SELECT [SKU], total_qty FROM otc_qty UNION ALL SELECT [SKU], total_qty FROM amazon_qty UNION ALL SELECT [SKU], total_qty FROM autofurnish_qty ) AS all_qty GROUP BY [SKU] ) SELECT TOP (5) [SKU], ROUND(total_quantity, 1) AS total_quantity FROM combined_qty ORDER BY total_quantity DESC;",
  "error": null
}"}
{"timestamp": "2025-08-04 17:33:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:33:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 5 selling products by total quantity sold across all sales channels: OTC sales (tbl_OTCSale_GMPL), Amazon orders (tbl_amazon_GMPL), and Autofurnish orders (af_orderitems_GMPL). It aggregates the quantities from each channel separately, converts quantities to float for safe summation, then combines the totals per SKU. The final result lists the SKU and total quantity sold, ordered descending by total quantity."}
{"timestamp": "2025-08-04 17:33:51", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:33:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH otc_qty AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS total_qty FROM [tbl_OTCSale_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), amazon_qty AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS total_qty FROM [tbl_amazon_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), autofurnish_qty AS ( SELECT [Lineitem_sku] AS [SKU], SUM(TRY_CAST([Lineitem_quantity] AS FLOAT)) AS total_qty FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] IS NOT NULL GROUP BY [Lineitem_sku] ), combined_qty AS ( SELECT [SKU], SUM(total_qty) AS total_quantity FROM ( SELECT [SKU], total_qty FROM otc_qty UNION ALL SELECT [SKU], total_qty FROM amazon_qty UNION ALL SELECT [SKU], total_qty FROM autofurnish_qty ) AS all_qty GROUP BY [SKU] ) SELECT TOP (5) [SKU], ROUND(total_quantity, 1) AS total_quantity FROM combined_qty ORDER BY total_quantity DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001FCAE53B230>"}
{"timestamp": "2025-08-04 17:34:25", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:34:25", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the top 5 selling products by quantity across all sales channels including OTC, Amazon, and Autofurnish."}
{"timestamp": "2025-08-04 17:34:25", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:34:26", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Generate a monthly sales report for Amazon and Autofurnish orders including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-04 17:34:26", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:34:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Generate a monthly sales report for Amazon and Autofurnish orders including a detailed tax breakdown.', [{'role': 'user', 'content': 'Generate a monthly sales report for Amazon and Autofurnish orders including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:34:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:34:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1
"}
{"timestamp": "2025-08-04 17:34:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report for Amazon and Autofurnish orders. It aggregates total sales amount and tax components by month for each platform separately. The Amazon sales data is aggregated from tbl_Amazon_GMPL by converting PurchaseDate to date and grouping by month, summing ItemPrice and tax columns with TRY_CAST for numeric safety. The Autofurnish sales data is aggregated from Autofurnish_OrderS_GMPL by converting Created_at to date and grouping by month, summing Total and tax columns with TRY_CAST. The results from both platforms are combined using UNION ALL with a platform label. The output includes month name, month start date, platform, total sales, and detailed tax breakdowns, ordered chronologically by month and platform.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATE, LEFT([a].[PurchaseDate], 10), 105) AS DATE)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATE, LEFT([a].[PurchaseDate], 10), 105) AS DATE)), 0) AS [_Month_Start], SUM(TRY_CAST([a].[ItemPrice] AS FLOAT)) AS [TotalSales], SUM(TRY_CAST([a].[ItemTax] AS FLOAT)) AS [ItemTax], SUM(TRY_CAST([a].[ShippingPrice] AS FLOAT)) AS [ShippingPrice], SUM(TRY_CAST([a].[ShippingTax] AS FLOAT)) AS [ShippingTax], SUM(TRY_CAST([a].[Giftwrapprice] AS FLOAT)) AS [GiftwrapPrice], SUM(TRY_CAST([a].[Giftwraptax] AS FLOAT)) AS [GiftwrapTax] FROM [tbl_Amazon_GMPL] AS [a] WHERE TRY_CAST(CONVERT(DATE, LEFT([a].[PurchaseDate], 10), 105) AS DATE) IS NOT NULL GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATE, LEFT([a].[PurchaseDate], 10), 105) AS DATE)), 0) ), AutofurnishSales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATE, LEFT([af].[Created_at], 10), 105) AS DATE)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATE, LEFT([af].[Created_at], 10), 105) AS DATE)), 0) AS [_Month_Start], SUM(TRY_CAST([af].[Total] AS FLOAT)) AS [TotalSales], SUM(TRY_CAST([af].[Taxes] AS FLOAT)) AS [ItemTax], CAST(0 AS FLOAT) AS [ShippingPrice], CAST(0 AS FLOAT) AS [ShippingTax], CAST(0 AS FLOAT) AS [GiftwrapPrice], CAST(0 AS FLOAT) AS [GiftwrapTax] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(CONVERT(DATE, LEFT([af].[Created_at], 10), 105) AS DATE) IS NOT NULL GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATE, LEFT([af].[Created_at], 10), 105) AS DATE)), 0) ) SELECT TOP (1000) [Month], [_Month_Start], 'Amazon' AS [Platform], ROUND([TotalSales], 1) AS [TotalSales], ROUND([ItemTax], 1) AS [ItemTax], ROUND([ShippingPrice], 1) AS [ShippingPrice], ROUND([ShippingTax], 1) AS [ShippingTax], ROUND([GiftwrapPrice], 1) AS [GiftwrapPrice], ROUND([GiftwrapTax], 1) AS [GiftwrapTax] FROM AmazonSales UNION ALL SELECT TOP (1000) [Month], [_Month_Start], 'Autofurnish' AS [Platform], ROUND([TotalSales], 1) AS [TotalSales], ROUND([ItemTax], 1) AS [ItemTax], ROUND([ShippingPrice], 1) AS [ShippingPrice], ROUND([ShippingTax], 1) AS [ShippingTax], ROUND([GiftwrapPrice], 1) AS [GiftwrapPrice], ROUND([GiftwrapTax], 1) AS [GiftwrapTax] FROM AutofurnishSales ORDER BY [_Month_Start], [Platform]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-04 17:34:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:34:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report for Amazon and Autofurnish orders. It aggregates total sales amount and tax components by month for each platform separately. The Amazon sales data is aggregated from tbl_Amazon_GMPL by converting PurchaseDate to date and grouping by month, summing ItemPrice and tax columns with TRY_CAST for numeric safety. The Autofurnish sales data is aggregated from Autofurnish_OrderS_GMPL by converting Created_at to date and grouping by month, summing Total and tax columns with TRY_CAST. The results from both platforms are combined using UNION ALL with a platform label. The output includes month name, month start date, platform, total sales, and detailed tax breakdowns, ordered chronologically by month and platform."}
{"timestamp": "2025-08-04 17:34:39", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:34:39", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:35:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have never been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:35:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Generate a monthly sales report for Amazon and Autofurnish orders including a detailed tax breakdown."}
{"timestamp": "2025-08-04 17:35:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:35:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find products that are currently in inventory but have never been sold, including a detailed tax breakdown for Amazon and Autofurnish orders."
}"}
{"timestamp": "2025-08-04 17:35:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:35:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find products that are currently in inventory but have never been sold, including a detailed tax breakdown for Amazon and Autofurnish orders.', [{'role': 'user', 'content': 'Find products that are currently in inventory but have never been sold, including a detailed tax breakdown for Amazon and Autofurnish orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:35:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:35:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show all Amazon listings that are inactive but have quantity more than 0.
  query: SELECT [OriginalSku], [MSKU], [Quantity], [IsActive] FROM [AmazonListing_GMPL] WHERE [IsActive] = 0 AND [Quantity] > 0
"}
{"timestamp": "2025-08-04 17:35:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that are present in inventory but have never been sold in either Amazon or Autofurnish orders. It uses CTEs to aggregate tax details from Amazon orders (tbl_amazon_GMPL) and Autofurnish orders (Autofurnish_OrderS_GMPL) grouped by SKU. It then selects distinct MSKU from InventoryDetail_GMPL and joins with the tax aggregates on SKU/MSKU. The output includes the product MSKU and tax breakdowns from both Amazon and Autofurnish orders.",
  "query": "WITH AmazonTax AS ( SELECT [a].[SKU], SUM(TRY_CAST([a].[Tax] AS FLOAT)) AS [TotalAmazonTax] FROM [tbl_amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL GROUP BY [a].[SKU] ), AutofurnishTax AS ( SELECT [o].[OrderNo], [oi].[Lineitem_sku], SUM(TRY_CAST([oi].[Lineitem_price] AS FLOAT) * 0) AS [TotalAutofurnishTax] FROM [Autofurnish_OrderS_GMPL] AS [o] JOIN [af_orderitems_GMPL] AS [oi] ON [o].[OrderNo] = [oi].[AFOrderId] WHERE [oi].[Lineitem_sku] IS NOT NULL GROUP BY [oi].[Lineitem_sku] ) SELECT TOP (1000) DISTINCT [i].[MSKU], COALESCE([at].[TotalAmazonTax], 0) AS [AmazonTax], COALESCE([aft].[TotalAutofurnishTax], 0) AS [AutofurnishTax] FROM [InventoryDetail_GMPL] AS [i] LEFT JOIN [AmazonTax] AS [at] ON [i].[MSKU] = [at].[SKU] LEFT JOIN [AutofurnishTax] AS [aft] ON [i].[MSKU] = [aft].[Lineitem_sku] WHERE [i].[IsOut] = 0 AND [at].[SKU] IS NULL AND [aft].[Lineitem_sku] IS NULL ORDER BY [i].[MSKU];",
  "error": null
}"}
{"timestamp": "2025-08-04 17:35:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:35:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that are present in inventory but have never been sold in either Amazon or Autofurnish orders. It uses CTEs to aggregate tax details from Amazon orders (tbl_amazon_GMPL) and Autofurnish orders (Autofurnish_OrderS_GMPL) grouped by SKU. It then selects distinct MSKU from InventoryDetail_GMPL and joins with the tax aggregates on SKU/MSKU. The output includes the product MSKU and tax breakdowns from both Amazon and Autofurnish orders."}
{"timestamp": "2025-08-04 17:35:17", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:35:18", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:39:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products with their inventory count across all warehouses., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:39:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Find products that are currently in inventory but have never been sold, including a detailed tax breakdown for Amazon and Autofurnish orders."}
{"timestamp": "2025-08-04 17:39:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:39:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders."
}"}
{"timestamp": "2025-08-04 17:39:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:39:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders.', [{'role': 'user', 'content': 'List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:39:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:39:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-04 17:40:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that currently have inventory (IsOut = 0) but have never been sold in either Amazon or Autofurnish orders. It aggregates the inventory count per product MSKU from InventoryDetail_GMPL joined with ProductMaster_AL. It also calculates detailed tax breakdowns (sum of item tax, shipping tax, and promotion discounts) separately for Amazon orders (tbl_amazon_GMPL) and Autofurnish orders (Autofurnish_OrderS_GMPL) grouped by product MSKU. The final result includes product MSKU, product name, total inventory count, Amazon tax details, and Autofurnish tax details.",
  "query": "WITH InventoryCount AS ( SELECT i.[MSKU], COUNT(i.[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS i WHERE i.[IsOut] = 0 GROUP BY i.[MSKU] ), AmazonSalesTax AS ( SELECT a.[SKU] AS [MSKU], ROUND(SUM(TRY_CAST(a.[ItemTax] AS FLOAT)), 1) AS [AmazonItemTax], ROUND(SUM(TRY_CAST(a.[ShippingTax] AS FLOAT)), 1) AS [AmazonShippingTax], ROUND(SUM(TRY_CAST(a.[itempromotiondiscount] AS FLOAT)), 1) AS [AmazonPromotionDiscount] FROM [tbl_amazon_GMPL] AS a WHERE a.[SKU] IS NOT NULL GROUP BY a.[SKU] ), AutofurnishSalesTax AS ( SELECT o.[OrderNo], oi.[Lineitem_sku] AS [MSKU], ROUND(SUM(ISNULL(oi.[Lineitem_discount], 0)), 1) AS [AutofurnishPromotionDiscount], ROUND(SUM(ISNULL(o.[Taxes], 0)), 1) AS [AutofurnishTax] FROM [Autofurnish_OrderS_GMPL] AS o JOIN [af_orderitems_GMPL] AS oi ON o.[OrderNo] = oi.[AFOrderId] WHERE oi.[Lineitem_sku] IS NOT NULL GROUP BY oi.[Lineitem_sku], o.[OrderNo] ), AutofurnishTaxAggregated AS ( SELECT [MSKU], ROUND(SUM([AutofurnishTax]), 1) AS [TotalAutofurnishTax], ROUND(SUM([AutofurnishPromotionDiscount]), 1) AS [TotalAutofurnishPromotionDiscount] FROM AutofurnishSalesTax GROUP BY [MSKU] ), SoldProducts AS ( SELECT DISTINCT [SKU] AS [MSKU] FROM [tbl_amazon_GMPL] WHERE [SKU] IS NOT NULL UNION SELECT DISTINCT [Lineitem_sku] AS [MSKU] FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] IS NOT NULL ) SELECT TOP (1000) ic.[MSKU], pm.[ProductName], ic.[InventoryCount], COALESCE(ast.[AmazonItemTax], 0) AS [AmazonItemTax], COALESCE(ast.[AmazonShippingTax], 0) AS [AmazonShippingTax], COALESCE(ast.[AmazonPromotionDiscount], 0) AS [AmazonPromotionDiscount], COALESCE(ata.[TotalAutofurnishTax], 0) AS [AutofurnishTax], COALESCE(ata.[TotalAutofurnishPromotionDiscount], 0) AS [AutofurnishPromotionDiscount] FROM InventoryCount AS ic JOIN [ProductMaster_AL] AS pm ON ic.[MSKU] = pm.[MSKU] LEFT JOIN AmazonSalesTax AS ast ON ic.[MSKU] = ast.[MSKU] LEFT JOIN AutofurnishTaxAggregated AS ata ON ic.[MSKU] = ata.[MSKU] LEFT JOIN SoldProducts AS sp ON ic.[MSKU] = sp.[MSKU] WHERE sp.[MSKU] IS NULL ORDER BY ic.[InventoryCount] DESC, ic.[MSKU];",
  "error": null
}"}
{"timestamp": "2025-08-04 17:40:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:40:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that currently have inventory (IsOut = 0) but have never been sold in either Amazon or Autofurnish orders. It aggregates the inventory count per product MSKU from InventoryDetail_GMPL joined with ProductMaster_AL. It also calculates detailed tax breakdowns (sum of item tax, shipping tax, and promotion discounts) separately for Amazon orders (tbl_amazon_GMPL) and Autofurnish orders (Autofurnish_OrderS_GMPL) grouped by product MSKU. The final result includes product MSKU, product name, total inventory count, Amazon tax details, and Autofurnish tax details."}
{"timestamp": "2025-08-04 17:40:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:40:06", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:43:32", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products with their inventory count across all warehouses., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-04 17:43:32", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders."}
{"timestamp": "2025-08-04 17:43:32", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-04 17:43:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders."
}"}
{"timestamp": "2025-08-04 17:43:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-04 17:43:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders.', [{'role': 'user', 'content': 'List products with their inventory count across all warehouses, including only those products that are currently in inventory but have never been sold, and provide a detailed tax breakdown for Amazon and Autofurnish orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-04 17:43:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-04 17:43:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-04 17:43:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products with their total inventory count across all warehouses, including only those products that are currently in inventory (IsOut = 0) but have never been sold in either Amazon or Autofurnish orders. It aggregates inventory counts from InventoryDetail_GMPL, filters out products sold in Amazon and Autofurnish orders, and provides detailed tax breakdowns (Tax, Tax1_Value, Tax2_Value, Tax3_Value, Tax4_Value, Tax5_Value) from Amazon and Autofurnish orders separately. The results include product MSKU, product name, total inventory count, and tax details from both order sources.",
  "query": "WITH InventoryCounts AS ( SELECT [i].[MSKU], COUNT([i].[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[IsOut] = 0 GROUP BY [i].[MSKU] ), SoldAmazon AS ( SELECT DISTINCT [a].[SKU] FROM [tbl_amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ), SoldAutofurnish AS ( SELECT DISTINCT [oi].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [oi] WHERE [oi].[Lineitem_sku] IS NOT NULL ), AmazonTax AS ( SELECT [p].[MSKU], SUM(COALESCE(TRY_CAST([ao].[Tax1_Value] AS FLOAT), 0)) AS [Amazon_Tax1], SUM(COALESCE(TRY_CAST([ao].[Tax2_Value] AS FLOAT), 0)) AS [Amazon_Tax2], SUM(COALESCE(TRY_CAST([ao].[Tax3_Value] AS FLOAT), 0)) AS [Amazon_Tax3], SUM(COALESCE(TRY_CAST([ao].[Tax4_Value] AS FLOAT), 0)) AS [Amazon_Tax4], SUM(COALESCE(TRY_CAST([ao].[Tax5_Value] AS FLOAT), 0)) AS [Amazon_Tax5] FROM [ProductMaster_AL] AS [p] JOIN [tbl_AmazonFlex_GMPL] AS [ao] ON [p].[SKU] = [ao].[sku] GROUP BY [p].[MSKU] ), AutofurnishTax AS ( SELECT [p].[MSKU], SUM(COALESCE(TRY_CAST([af].[Taxes] AS FLOAT), 0)) AS [Autofurnish_Tax] FROM [ProductMaster_AL] AS [p] JOIN [Autofurnish_OrderS_GMPL] AS [af] ON [p].[SKU] = [af].[OrderNo] GROUP BY [p].[MSKU] ) SELECT TOP (1000) [p].[MSKU], [p].[ProductName], [ic].[InventoryCount], ROUND(COALESCE([atx].[Amazon_Tax1], 0), 1) AS [Amazon_Tax1], ROUND(COALESCE([atx].[Amazon_Tax2], 0), 1) AS [Amazon_Tax2], ROUND(COALESCE([atx].[Amazon_Tax3], 0), 1) AS [Amazon_Tax3], ROUND(COALESCE([atx].[Amazon_Tax4], 0), 1) AS [Amazon_Tax4], ROUND(COALESCE([atx].[Amazon_Tax5], 0), 1) AS [Amazon_Tax5], ROUND(COALESCE([aft].[Autofurnish_Tax], 0), 1) AS [Autofurnish_Tax] FROM [ProductMaster_AL] AS [p] JOIN [InventoryCounts] AS [ic] ON [p].[MSKU] = [ic].[MSKU] LEFT JOIN [AmazonTax] AS [atx] ON [p].[MSKU] = [atx].[MSKU] LEFT JOIN [AutofurnishTax] AS [aft] ON [p].[MSKU] = [aft].[MSKU] WHERE [p].[MSKU] NOT IN (SELECT [SKU] FROM [SoldAmazon]) AND [p].[SKU] NOT IN (SELECT [Lineitem_sku] FROM [SoldAutofurnish]) ORDER BY [ic].[InventoryCount] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-04 17:43:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-04 17:43:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products with their total inventory count across all warehouses, including only those products that are currently in inventory (IsOut = 0) but have never been sold in either Amazon or Autofurnish orders. It aggregates inventory counts from InventoryDetail_GMPL, filters out products sold in Amazon and Autofurnish orders, and provides detailed tax breakdowns (Tax, Tax1_Value, Tax2_Value, Tax3_Value, Tax4_Value, Tax5_Value) from Amazon and Autofurnish orders separately. The results include product MSKU, product name, total inventory count, and tax details from both order sources."}
{"timestamp": "2025-08-04 17:43:46", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-04 17:43:47", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-04 17:45:36", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-04 17:45:37", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-04 17:45:37", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-04 17:45:37", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-04 17:45:38", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 10:01:59", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 10:02:01", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 10:02:01", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 10:02:02", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 10:02:02", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 10:08:09", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 10:08:10", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 10:08:17", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 10:08:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 10:08:21", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish)., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:08:21", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 10:08:21", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:08:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the top 5 selling products by quantity across all sales channels, including OTC, Amazon, and Autofurnish."
}"}
{"timestamp": "2025-08-05 10:08:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:08:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the top 5 selling products by quantity across all sales channels, including OTC, Amazon, and Autofurnish.', [{'role': 'user', 'content': 'Retrieve the top 5 selling products by quantity across all sales channels, including OTC, Amazon, and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:08:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:08:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-05 10:08:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 5 selling products by total quantity sold across OTC sales (tbl_OTCSale_GMPL), Amazon orders (tbl_amazon_GMPL), and Autofurnish orders (af_orderitems_GMPL). It sums the quantities from each source after converting them to float, groups by SKU, and orders the results by total quantity descending.",
  "query": "WITH OTC_Quantities AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), Amazon_Quantities AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_amazon_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), Autofurnish_Quantities AS ( SELECT [Lineitem_sku] AS [SKU], SUM(TRY_CAST([Lineitem_quantity] AS FLOAT)) AS TotalQuantity FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] IS NOT NULL GROUP BY [Lineitem_sku] ), Combined_Quantities AS ( SELECT [SKU], SUM(TotalQuantity) AS TotalQuantity FROM ( SELECT [SKU], TotalQuantity FROM OTC_Quantities UNION ALL SELECT [SKU], TotalQuantity FROM Amazon_Quantities UNION ALL SELECT [SKU], TotalQuantity FROM Autofurnish_Quantities ) AS AllQuantities GROUP BY [SKU] ) SELECT TOP (5) [SKU], TotalQuantity FROM Combined_Quantities ORDER BY TotalQuantity DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 10:08:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:08:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 5 selling products by total quantity sold across OTC sales (tbl_OTCSale_GMPL), Amazon orders (tbl_amazon_GMPL), and Autofurnish orders (af_orderitems_GMPL). It sums the quantities from each source after converting them to float, groups by SKU, and orders the results by total quantity descending."}
{"timestamp": "2025-08-05 10:08:29", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:08:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Quantities AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), Amazon_Quantities AS ( SELECT [SKU], SUM(TRY_CAST([Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_amazon_GMPL] WHERE [SKU] IS NOT NULL GROUP BY [SKU] ), Autofurnish_Quantities AS ( SELECT [Lineitem_sku] AS [SKU], SUM(TRY_CAST([Lineitem_quantity] AS FLOAT)) AS TotalQuantity FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] IS NOT NULL GROUP BY [Lineitem_sku] ), Combined_Quantities AS ( SELECT [SKU], SUM(TotalQuantity) AS TotalQuantity FROM ( SELECT [SKU], TotalQuantity FROM OTC_Quantities UNION ALL SELECT [SKU], TotalQuantity FROM Amazon_Quantities UNION ALL SELECT [SKU], TotalQuantity FROM Autofurnish_Quantities ) AS AllQuantities GROUP BY [SKU] ) SELECT TOP (5) [SKU], TotalQuantity FROM Combined_Quantities ORDER BY TotalQuantity DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002330A9FAA50>"}
{"timestamp": "2025-08-05 10:11:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Tax for SKU 	MTBBCSTYBL1, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:11:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Retrieve the top 5 selling products by quantity across all sales channels, including OTC, Amazon, and Autofurnish."}
{"timestamp": "2025-08-05 10:11:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:11:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Retrieve the tax details for the product with SKU MTBBCSTYBL1 across all sales channels including OTC, Amazon, and Autofurnish."
}"}
{"timestamp": "2025-08-05 10:11:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:11:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Retrieve the tax details for the product with SKU MTBBCSTYBL1 across all sales channels including OTC, Amazon, and Autofurnish.', [{'role': 'user', 'content': 'Retrieve the tax details for the product with SKU MTBBCSTYBL1 across all sales channels including OTC, Amazon, and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:11:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:11:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC

Example 2:
  input: Find total OTC sale amount per product.
  query: SELECT [SKU], SUM(TRY_CAST([Amount] AS DECIMAL(10,2))) AS TotalAmount FROM [tbl_OTCSale_GMPL] GROUP BY [SKU]
"}
{"timestamp": "2025-08-05 10:11:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves tax details for the product with SKU 'MTBBCSTYBL1' from three sales channels: OTC sales from tbl_OTCSale_GMPL, Amazon sales from tbl_amazon_GMPL, and Autofurnish orders from Autofurnish_OrderS_GMPL. It selects the SKU, tax-related columns, and sales channel name for each record where the SKU matches 'MTBBCSTYBL1'. The results from all three sources are combined using UNION ALL and limited to the top 1000 records.",
  "query": "SELECT TOP (1000) [t].[SKU], [t].[Tax], 'OTC' AS [SalesChannel] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = 'MTBBCSTYBL1' UNION ALL SELECT TOP (1000) [a].[SKU], [a].[Tax], 'Amazon' AS [SalesChannel] FROM [tbl_amazon_GMPL] AS [a] WHERE [a].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = 'MTBBCSTYBL1' UNION ALL SELECT TOP (1000) [af].[OrderNo] AS [SKU], [af].[Taxes] AS [Tax], 'Autofurnish' AS [SalesChannel] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[OrderNo] COLLATE SQL_Latin1_General_CP1_CI_AS = 'MTBBCSTYBL1';",
  "error": null
}"}
{"timestamp": "2025-08-05 10:11:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:11:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves tax details for the product with SKU 'MTBBCSTYBL1' from three sales channels: OTC sales from tbl_OTCSale_GMPL, Amazon sales from tbl_amazon_GMPL, and Autofurnish orders from Autofurnish_OrderS_GMPL. It selects the SKU, tax-related columns, and sales channel name for each record where the SKU matches 'MTBBCSTYBL1'. The results from all three sources are combined using UNION ALL and limited to the top 1000 records."}
{"timestamp": "2025-08-05 10:11:45", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:11:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [t].[SKU], [t].[Tax], 'OTC' AS [SalesChannel] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = 'MTBBCSTYBL1' UNION ALL SELECT TOP (1000) [a].[SKU], [a].[Tax], 'Amazon' AS [SalesChannel] FROM [tbl_amazon_GMPL] AS [a] WHERE [a].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = 'MTBBCSTYBL1' UNION ALL SELECT TOP (1000) [af].[OrderNo] AS [SKU], [af].[Taxes] AS [Tax], 'Autofurnish' AS [SalesChannel] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[OrderNo] COLLATE SQL_Latin1_General_CP1_CI_AS = 'MTBBCSTYBL1'; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002330A98A580>"}
{"timestamp": "2025-08-05 10:12:53", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 10:12:53", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 10:12:55", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show warehouse-wise inventory value (sum of MSP) for each product category., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:12:55", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 10:12:55", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:12:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse."
}"}
{"timestamp": "2025-08-05 10:12:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:12:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse.', [{'role': 'user', 'content': 'Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:12:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:12:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-05 10:13:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total inventory value as the sum of MSP for each product category grouped by warehouse. It joins InventoryDetail with ProductMaster on MSKU, and InventoryDetail with tbl_Warehouse on WarehouseId. The results are grouped by warehouse name and product category1, and the total MSP is rounded to 1 decimal place.",
  "query": "SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS TotalInventoryValue FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1]",
  "error": null
}"}
{"timestamp": "2025-08-05 10:13:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:13:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total inventory value as the sum of MSP for each product category grouped by warehouse. It joins InventoryDetail with ProductMaster on MSKU, and InventoryDetail with tbl_Warehouse on WarehouseId. The results are grouped by warehouse name and product category1, and the total MSP is rounded to 1 decimal place."}
{"timestamp": "2025-08-05 10:13:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:13:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS TotalInventoryValue FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002330A98A580>"}
{"timestamp": "2025-08-05 10:14:28", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Tell me the most sold product from warehouse finish good, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:14:28", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the total inventory value, calculated as the sum of MSP, for each product category grouped by warehouse."}
{"timestamp": "2025-08-05 10:14:28", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:14:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the most sold product from the warehouse category 'finish good'."
}"}
{"timestamp": "2025-08-05 10:14:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:14:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Identify the most sold product from the warehouse category 'finish good'.", [{'role': 'user', 'content': "Identify the most sold product from the warehouse category 'finish good'."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:14:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:14:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all products with their category, brand, and manufacturing details.
  query: SELECT [ProductName], [SKU], [Category1], [Category2], [CarBrand], [CarModel], [Manufacture] FROM [ProductMaster_AL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-05 10:14:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the most sold product from the warehouse category 'Finish Good'. It joins InventoryDetail with tbl_Warehouse on WarehouseId, filters for warehouses with the name 'Finish Good' (case-insensitive), joins with ProductMaster to get product details, groups by product MSKU and name, sums the inventory quantity considering only items not marked as 'IsOut', and orders the results by total quantity descending, returning the top product.",
  "query": "SELECT TOP (1) i.[MSKU], p.[ProductName], SUM(CASE WHEN i.[IsOut] = 0 THEN 1 ELSE 0 END) AS TotalQuantity FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE w.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Finish Good' GROUP BY i.[MSKU], p.[ProductName] ORDER BY TotalQuantity DESC",
  "error": null
}"}
{"timestamp": "2025-08-05 10:14:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:14:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the most sold product from the warehouse category 'Finish Good'. It joins InventoryDetail with tbl_Warehouse on WarehouseId, filters for warehouses with the name 'Finish Good' (case-insensitive), joins with ProductMaster to get product details, groups by product MSKU and name, sums the inventory quantity considering only items not marked as 'IsOut', and orders the results by total quantity descending, returning the top product."}
{"timestamp": "2025-08-05 10:14:33", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:14:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1) i.[MSKU], p.[ProductName], SUM(CASE WHEN i.[IsOut] = 0 THEN 1 ELSE 0 END) AS TotalQuantity FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE w.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Finish Good' GROUP BY i.[MSKU], p.[ProductName] ORDER BY TotalQuantity DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002330B5EB3F0>"}
{"timestamp": "2025-08-05 10:24:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: from which channel it is sold mostly, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:24:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the most sold product from the warehouse category 'finish good'."}
{"timestamp": "2025-08-05 10:24:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:24:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the sales channel from which the most sold product in the warehouse category 'finish good' is sold mostly."
}"}
{"timestamp": "2025-08-05 10:24:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:24:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Identify the sales channel from which the most sold product in the warehouse category 'finish good' is sold mostly.", [{'role': 'user', 'content': "Identify the sales channel from which the most sold product in the warehouse category 'finish good' is sold mostly."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:24:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:24:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-05 10:24:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the sales channel with the highest total quantity sold for the product that has the maximum total quantity in the 'Finish Good' warehouse category. It aggregates inventory quantities by product MSKU in the 'Finish Good' warehouse, finds the product with the maximum quantity, then sums the sold quantities from tbl_AmazonFlex_GMPL grouped by sales channel for that product, ordering to get the top sales channel.",
  "query": "WITH Inventory_Summary AS ( SELECT TOP (1000) i.[MSKU], SUM(TRY_CAST(i.[OpenInventory] AS FLOAT)) AS TotalInventory FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE w.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Finish Good' GROUP BY i.[MSKU] ), Max_Inventory_Product AS ( SELECT TOP (1) [MSKU] FROM Inventory_Summary ORDER BY TotalInventory DESC ), Sales_Channel_Summary AS ( SELECT af.[saleschannel], SUM(TRY_CAST(af.[quantity] AS FLOAT)) AS TotalQuantitySold FROM [tbl_AmazonFlex_GMPL] AS af WHERE af.[sku] IN (SELECT [MSKU] FROM Max_Inventory_Product) GROUP BY af.[saleschannel] ) SELECT TOP (1) [saleschannel], TotalQuantitySold FROM Sales_Channel_Summary ORDER BY TotalQuantitySold DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 10:24:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:24:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the sales channel with the highest total quantity sold for the product that has the maximum total quantity in the 'Finish Good' warehouse category. It aggregates inventory quantities by product MSKU in the 'Finish Good' warehouse, finds the product with the maximum quantity, then sums the sold quantities from tbl_AmazonFlex_GMPL grouped by sales channel for that product, ordering to get the top sales channel."}
{"timestamp": "2025-08-05 10:24:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:24:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH Inventory_Summary AS ( SELECT TOP (1000) i.[MSKU], SUM(TRY_CAST(i.[OpenInventory] AS FLOAT)) AS TotalInventory FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE w.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Finish Good' GROUP BY i.[MSKU] ), Max_Inventory_Product AS ( SELECT TOP (1) [MSKU] FROM Inventory_Summary ORDER BY TotalInventory DESC ), Sales_Channel_Summary AS ( SELECT af.[saleschannel], SUM(TRY_CAST(af.[quantity] AS FLOAT)) AS TotalQuantitySold FROM [tbl_AmazonFlex_GMPL] AS af WHERE af.[sku] IN (SELECT [MSKU] FROM Max_Inventory_Product) GROUP BY af.[saleschannel] ) SELECT TOP (1) [saleschannel], TotalQuantitySold FROM Sales_Channel_Summary ORDER BY TotalQuantitySold DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002330B5EB850>"}
{"timestamp": "2025-08-05 10:42:53", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:42:53", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the sales channel from which the most sold product in the warehouse category 'finish good' is sold mostly."}
{"timestamp": "2025-08-05 10:42:53", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:42:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have not been sold."
}"}
{"timestamp": "2025-08-05 10:42:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have not been sold.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have not been sold.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())
"}
{"timestamp": "2025-08-05 10:42:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 distinct products identified by their MSKU that are present in the inventory (InventoryDetail_GMPL) but have not been sold in any OTC sale (tbl_OTCSale_GMPL). It selects the MSKU from inventory where the MSKU does not appear in the ProductID column of tbl_OTCSale_GMPL after casting ProductID to float for safety.",
  "query": "SELECT TOP (1000) DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL AND [i].[MSKU] NOT IN (SELECT DISTINCT CAST([o].[ProductID] AS NVARCHAR(500)) FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_CAST([o].[ProductID] AS FLOAT) IS NOT NULL)",
  "error": null
}"}
{"timestamp": "2025-08-05 10:42:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:42:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 distinct products identified by their MSKU that are present in the inventory (InventoryDetail_GMPL) but have not been sold in any OTC sale (tbl_OTCSale_GMPL). It selects the MSKU from inventory where the MSKU does not appear in the ProductID column of tbl_OTCSale_GMPL after casting ProductID to float for safety."}
{"timestamp": "2025-08-05 10:42:59", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:43:00", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 10:50:55", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:50:55", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that are currently in inventory but have not been sold."}
{"timestamp": "2025-08-05 10:50:55", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:50:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have not been sold."
}"}
{"timestamp": "2025-08-05 10:50:56", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:50:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have not been sold.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have not been sold.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:50:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:50:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())
"}
{"timestamp": "2025-08-05 10:51:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 distinct products that are present in the inventory but have not been sold. It selects the MSKU from InventoryDetail_GMPL where the MSKU does not appear in the ProductID column of tbl_OTCSale_GMPL (converted to MSKU via join is not possible due to schema). The query ensures only products with inventory records are included and excludes those with sales records.",
  "query": "SELECT TOP (1000) DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] NOT IN (SELECT DISTINCT [CAST](TRY_CAST([ots].[ProductID] AS NVARCHAR(500)) AS NVARCHAR(500)) FROM [tbl_OTCSale_GMPL] AS [ots] WHERE [ots].[ProductID] IS NOT NULL)",
  "error": null
}"}
{"timestamp": "2025-08-05 10:51:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:51:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 distinct products that are present in the inventory but have not been sold. It selects the MSKU from InventoryDetail_GMPL where the MSKU does not appear in the ProductID column of tbl_OTCSale_GMPL (converted to MSKU via join is not possible due to schema). The query ensures only products with inventory records are included and excludes those with sales records."}
{"timestamp": "2025-08-05 10:51:04", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:51:04", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 10:53:50", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 10:53:51", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 10:53:51", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 10:53:52", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 10:53:52", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 10:53:57", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 10:53:59", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 10:53:59", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 10:53:59", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 10:54:00", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 10:54:44", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 10:54:45", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 10:54:45", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 10:54:45", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 10:54:46", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 10:55:24", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 10:55:25", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 10:55:29", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:55:29", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 10:55:29", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:55:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have no recorded sales."
}"}
{"timestamp": "2025-08-05 10:55:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:55:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have no recorded sales.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have no recorded sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:55:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:55:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are active but not listed on Amazon.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p LEFT JOIN [AmazonListing_GMPL] a ON p.[SKU] = a.[OriginalSku] WHERE a.[OriginalSku] IS NULL AND p.[IsActive] = 1

Example 2:
  input: Show inventory items that were modified in the last 30 days.
  query: SELECT [Id], [MSKU], [ModifiedDate], [UniqueCode] FROM [InventoryDetail_GMPL] WHERE [ModifiedDate] >= DATEADD(DAY, -30, GETDATE())
"}
{"timestamp": "2025-08-05 10:55:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 distinct products identified by MSKU that are present in the inventory (InventoryDetail_GMPL) but have no recorded sales in the tbl_OTCSale_GMPL table. It selects the MSKU from inventory where MSKU is not null and filters out those MSKUs that appear in the sales table.",
  "query": "SELECT DISTINCT TOP (1000) [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL AND [i].[MSKU] NOT IN (SELECT DISTINCT [s].[MSKU] FROM [tbl_OTCSale_GMPL] AS [s] WHERE [s].[MSKU] IS NOT NULL)",
  "error": null
}"}
{"timestamp": "2025-08-05 10:55:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:55:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 distinct products identified by MSKU that are present in the inventory (InventoryDetail_GMPL) but have no recorded sales in the tbl_OTCSale_GMPL table. It selects the MSKU from inventory where MSKU is not null and filters out those MSKUs that appear in the sales table."}
{"timestamp": "2025-08-05 10:55:37", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:55:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT TOP (1000) [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL AND [i].[MSKU] NOT IN (SELECT DISTINCT [s].[MSKU] FROM [tbl_OTCSale_GMPL] AS [s] WHERE [s].[MSKU] IS NOT NULL) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001E38C5575B0>"}
{"timestamp": "2025-08-05 10:56:50", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:56:50", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that are currently in inventory but have no recorded sales."}
{"timestamp": "2025-08-05 10:56:50", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:56:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify customers who have made purchases through multiple sales channels, specifically OTC, Amazon, and Autofurnish."
}"}
{"timestamp": "2025-08-05 10:56:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:56:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify customers who have made purchases through multiple sales channels, specifically OTC, Amazon, and Autofurnish.', [{'role': 'user', 'content': 'Identify customers who have made purchases through multiple sales channels, specifically OTC, Amazon, and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:56:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:56:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Get a list of all OTC sales along with SKU, quantity, and discount details.
  query: SELECT [OrderNo], [SKU], [Quantity], [ProductDiscount], [OrderDiscount], [Selling_Price] FROM [tbl_OTCSale_AL] ORDER BY [CreatedDate] DESC
"}
{"timestamp": "2025-08-05 10:57:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies customers who have made purchases through multiple sales channels: OTC sales from tbl_OTCSale_GMPL, Amazon orders from tbl_amazon_GMPL, and Autofurnish orders from Autofurnish_OrderS_GMPL. It extracts distinct customer names from each channel, then finds customers present in at least two of these channels by performing full outer joins on the customer names. The final output lists distinct customer names who have purchased from multiple channels.",
  "query": "WITH OTC_Customers AS ( SELECT DISTINCT TOP (1000) [t1].[CustomerName] FROM [tbl_OTCSale_GMPL] AS [t1] WHERE [t1].[CustomerName] IS NOT NULL AND LTRIM(RTRIM([t1].[CustomerName])) <> '' ), Amazon_Customers AS ( SELECT DISTINCT TOP (1000) [t2].[BuyerName] AS [CustomerName] FROM [tbl_amazon_GMPL] AS [t2] WHERE [t2].[BuyerName] IS NOT NULL AND LTRIM(RTRIM([t2].[BuyerName])) <> '' ), Autofurnish_Customers AS ( SELECT DISTINCT TOP (1000) [t3].[Email] AS [CustomerName] FROM [Autofurnish_OrderS_GMPL] AS [t3] WHERE [t3].[Email] IS NOT NULL AND LTRIM(RTRIM([t3].[Email])) <> '' ), OTC_Amazon AS ( SELECT [o].[CustomerName] FROM OTC_Customers AS [o] INNER JOIN Amazon_Customers AS [a] ON [o].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [a].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ), OTC_Autofurnish AS ( SELECT [o].[CustomerName] FROM OTC_Customers AS [o] INNER JOIN Autofurnish_Customers AS [af] ON [o].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ), Amazon_Autofurnish AS ( SELECT [a].[CustomerName] FROM Amazon_Customers AS [a] INNER JOIN Autofurnish_Customers AS [af] ON [a].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ) SELECT DISTINCT TOP (1000) [CustomerName] FROM ( SELECT [CustomerName] FROM OTC_Amazon UNION ALL SELECT [CustomerName] FROM OTC_Autofurnish UNION ALL SELECT [CustomerName] FROM Amazon_Autofurnish ) AS [combined] ORDER BY [CustomerName];",
  "error": null
}"}
{"timestamp": "2025-08-05 10:57:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:57:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies customers who have made purchases through multiple sales channels: OTC sales from tbl_OTCSale_GMPL, Amazon orders from tbl_amazon_GMPL, and Autofurnish orders from Autofurnish_OrderS_GMPL. It extracts distinct customer names from each channel, then finds customers present in at least two of these channels by performing full outer joins on the customer names. The final output lists distinct customer names who have purchased from multiple channels."}
{"timestamp": "2025-08-05 10:57:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:57:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Customers AS ( SELECT DISTINCT TOP (1000) [t1].[CustomerName] FROM [tbl_OTCSale_GMPL] AS [t1] WHERE [t1].[CustomerName] IS NOT NULL AND LTRIM(RTRIM([t1].[CustomerName])) <> '' ), Amazon_Customers AS ( SELECT DISTINCT TOP (1000) [t2].[BuyerName] AS [CustomerName] FROM [tbl_amazon_GMPL] AS [t2] WHERE [t2].[BuyerName] IS NOT NULL AND LTRIM(RTRIM([t2].[BuyerName])) <> '' ), Autofurnish_Customers AS ( SELECT DISTINCT TOP (1000) [t3].[Email] AS [CustomerName] FROM [Autofurnish_OrderS_GMPL] AS [t3] WHERE [t3].[Email] IS NOT NULL AND LTRIM(RTRIM([t3].[Email])) <> '' ), OTC_Amazon AS ( SELECT [o].[CustomerName] FROM OTC_Customers AS [o] INNER JOIN Amazon_Customers AS [a] ON [o].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [a].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ), OTC_Autofurnish AS ( SELECT [o].[CustomerName] FROM OTC_Customers AS [o] INNER JOIN Autofurnish_Customers AS [af] ON [o].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ), Amazon_Autofurnish AS ( SELECT [a].[CustomerName] FROM Amazon_Customers AS [a] INNER JOIN Autofurnish_Customers AS [af] ON [a].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [af].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS ) SELECT DISTINCT TOP (1000) [CustomerName] FROM ( SELECT [CustomerName] FROM OTC_Amazon UNION ALL SELECT [CustomerName] FROM OTC_Autofurnish UNION ALL SELECT [CustomerName] FROM Amazon_Autofurnish ) AS [combined] ORDER BY [CustomerName]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001E38C4A5FD0>"}
{"timestamp": "2025-08-05 10:57:36", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show warehouse-wise inventory value (sum of MSP) for each product category., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:57:36", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify customers who have made purchases through multiple sales channels, specifically OTC, Amazon, and Autofurnish."}
{"timestamp": "2025-08-05 10:57:36", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:57:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the warehouse-wise inventory value calculated as the sum of MSP for each product category."
}"}
{"timestamp": "2025-08-05 10:57:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:57:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the warehouse-wise inventory value calculated as the sum of MSP for each product category.', [{'role': 'user', 'content': 'Display the warehouse-wise inventory value calculated as the sum of MSP for each product category.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:57:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:57:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show product inventory across all warehouses.
  query: SELECT i.[MSKU], p.[ProductName], w.[Name] AS WarehouseName FROM [InventoryDetail_GMPL] i JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID]

Example 2:
  input: List all warehouses with the number of inventory items they hold.
  query: SELECT w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount FROM [tbl_Warehouse_GMPL] w LEFT JOIN [InventoryDetail_GMPL] i ON w.[ID] = i.[WarehouseId] GROUP BY w.[Name]
"}
{"timestamp": "2025-08-05 10:57:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the warehouse-wise inventory value by summing the MSP of products grouped by warehouse and product category. It joins InventoryDetail with tbl_Warehouse to get warehouse names and with ProductMaster_AL to get product categories. The MSP values are cast to float and rounded to one decimal place. The results are grouped by warehouse name and product category, and ordered by warehouse name and product category.",
  "query": "SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS InventoryValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] p ON i.[MSKU] = p.[MSKU] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1]",
  "error": null
}"}
{"timestamp": "2025-08-05 10:57:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:57:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the warehouse-wise inventory value by summing the MSP of products grouped by warehouse and product category. It joins InventoryDetail with tbl_Warehouse to get warehouse names and with ProductMaster_AL to get product categories. The MSP values are cast to float and rounded to one decimal place. The results are grouped by warehouse name and product category, and ordered by warehouse name and product category."}
{"timestamp": "2025-08-05 10:57:45", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:57:54", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS InventoryValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] p ON i.[MSKU] = p.[MSKU] GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001E38C509A90>"}
{"timestamp": "2025-08-05 10:58:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 10:58:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the warehouse-wise inventory value calculated as the sum of MSP for each product category."}
{"timestamp": "2025-08-05 10:58:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 10:58:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for Amazon and Autofurnish orders, including a detailed tax breakdown, grouped by year and month."
}"}
{"timestamp": "2025-08-05 10:58:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 10:58:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for Amazon and Autofurnish orders, including a detailed tax breakdown, grouped by year and month.', [{'role': 'user', 'content': 'Display the monthly sales report for Amazon and Autofurnish orders, including a detailed tax breakdown, grouped by year and month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 10:58:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 10:58:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find orders placed by Autofurnish customers in June 2024.
  query: SELECT [OrderNo], [Created_at], [Total] FROM [Autofurnish_OrderS_GMPL] WHERE TRY_CONVERT(DATE, [Created_at], 105) BETWEEN '2024-06-01' AND '2024-06-30'

Example 2:
  input: Show all Amazon orders where invoice was generated.
  query: SELECT [OrderId], [InvoiceNo], [ProductName], [SKU] FROM [tbl_Amazon_GMPL] WHERE [IsInvoice] = 1
"}
{"timestamp": "2025-08-05 10:59:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report for Amazon and Autofurnish orders. It aggregates total sales amount and detailed tax breakdowns grouped by calendar year and month. The Amazon orders data is aggregated from tbl_Amazon_GMPL, summing ItemPrice and various tax components, grouped by year and month derived from PurchaseDate. The Autofurnish orders data is aggregated from Autofurnish_OrderS_GMPL, summing Total and individual tax values grouped by year and month derived from Created_at. The results from both sources are combined using UNION ALL, with a source column indicating the order origin. The final output includes Year, Month (formatted as MMM-yy), total sales, and tax breakdowns, ordered chronologically by year and month.",
  "query": "WITH AmazonSales AS ( SELECT TOP (1000) YEAR(TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE)) AS [Year], FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE)), 0) AS [_Month_Start], ROUND(SUM(TRY_CAST([t].[ItemPrice] AS FLOAT)), 1) AS [TotalSales], ROUND(SUM(TRY_CAST([t].[Tax] AS FLOAT)), 1) AS [Tax], ROUND(SUM(TRY_CAST([t].[ShippingTax] AS FLOAT)), 1) AS [ShippingTax], ROUND(SUM(TRY_CAST([t].[ItemTax] AS FLOAT)), 1) AS [ItemTax] FROM [tbl_Amazon_GMPL] AS [t] WHERE TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE) IS NOT NULL GROUP BY YEAR(TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE)), FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [t].[PurchaseDate], 105) AS DATE)), 0) ), AutofurnishSales AS ( SELECT TOP (1000) YEAR(TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE)) AS [Year], FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE)), 0) AS [_Month_Start], ROUND(SUM(TRY_CAST([aos].[Total] AS FLOAT)), 1) AS [TotalSales], ROUND(SUM(TRY_CAST([aos].[Taxes] AS FLOAT)), 1) AS [Tax], 0.0 AS [ShippingTax], 0.0 AS [ItemTax] FROM [Autofurnish_OrderS_GMPL] AS [aos] WHERE TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE) IS NOT NULL GROUP BY YEAR(TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE)), FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [aos].[Created_at], 105) AS DATE)), 0) ) SELECT [Year], [Month], ROUND(SUM([TotalSales]), 1) AS [TotalSales], ROUND(SUM([Tax]), 1) AS [Tax], ROUND(SUM([ShippingTax]), 1) AS [ShippingTax], ROUND(SUM([ItemTax]), 1) AS [ItemTax], 'Amazon' AS [Source] FROM AmazonSales GROUP BY [Year], [Month], [_Month_Start] UNION ALL SELECT [Year], [Month], ROUND(SUM([TotalSales]), 1) AS [TotalSales], ROUND(SUM([Tax]), 1) AS [Tax], ROUND(SUM([ShippingTax]), 1) AS [ShippingTax], ROUND(SUM([ItemTax]), 1) AS [ItemTax], 'Autofurnish' AS [Source] FROM AutofurnishSales GROUP BY [Year], [Month], [_Month_Start] ORDER BY [Year], [_Month_Start]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-05 10:59:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 10:59:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report for Amazon and Autofurnish orders. It aggregates total sales amount and detailed tax breakdowns grouped by calendar year and month. The Amazon orders data is aggregated from tbl_Amazon_GMPL, summing ItemPrice and various tax components, grouped by year and month derived from PurchaseDate. The Autofurnish orders data is aggregated from Autofurnish_OrderS_GMPL, summing Total and individual tax values grouped by year and month derived from Created_at. The results from both sources are combined using UNION ALL, with a source column indicating the order origin. The final output includes Year, Month (formatted as MMM-yy), total sales, and tax breakdowns, ordered chronologically by year and month."}
{"timestamp": "2025-08-05 10:59:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 10:59:13", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:04:55", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 11:04:56", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 11:04:56", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 11:04:57", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 11:04:57", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 11:05:05", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:05:06", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:05:10", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:05:10", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:05:10", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:05:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:05:11", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:05:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:05:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:05:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the monthly sales report for orders from the Amazon and Autofurnish dealers, including a detailed tax breakdown. It aggregates sales and tax amounts by month for each channel separately, using the PaymentDate for Amazon and Created_at for Autofurnish orders. The results include total sales and total tax amounts grouped by month and channel, with the month formatted as 'MMM-yy' and ordered chronologically.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-05 11:05:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:05:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the monthly sales report for orders from the Amazon and Autofurnish dealers, including a detailed tax breakdown. It aggregates sales and tax amounts by month for each channel separately, using the PaymentDate for Amazon and Created_at for Autofurnish orders. The results include total sales and total tax amounts grouped by month and channel, with the month formatted as 'MMM-yy' and ordered chronologically."}
{"timestamp": "2025-08-05 11:05:24", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:05:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000017495CA1860>"}
{"timestamp": "2025-08-05 11:06:27", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:06:27", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:06:30", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:06:30", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:06:30", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:06:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:06:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:06:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:06:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:06:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report for orders from the Amazon and Autofurnish channels. It extracts the month from the payment or creation dates, sums the sales amounts and tax components for each channel, and groups the results by month and channel. The Amazon data is aggregated from tbl_Amazon_GMPL using PaymentDate, and the Autofurnish data is aggregated from Autofurnish_OrderS_GMPL using Created_at. The tax breakdown includes all tax components available in each table. The results are combined using UNION ALL and ordered by month and channel.",
  "query": "SELECT 'Amazon' AS [Channel], FORMAT(TRY_CONVERT(DATE, [a].[PaymentDate], 105), 'MMM-yyyy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [a].[PaymentDate], 105)), 0) AS [_Month_Start], ROUND(SUM(TRY_CAST([a].[ItemPrice] AS FLOAT)), 1) AS [Sales], ROUND(SUM(TRY_CAST([a].[ItemTax] AS FLOAT)), 1) AS [ItemTax], ROUND(SUM(TRY_CAST([a].[ShippingPrice] AS FLOAT)), 1) AS [ShippingPrice], ROUND(SUM(TRY_CAST([a].[ShippingTax] AS FLOAT)), 1) AS [ShippingTax], ROUND(SUM(TRY_CAST([a].[GiftwrapPrice] AS FLOAT)), 1) AS [GiftwrapPrice], ROUND(SUM(TRY_CAST([a].[GiftwrapTax] AS FLOAT)), 1) AS [GiftwrapTax] FROM [tbl_Amazon_GMPL] AS [a] WHERE TRY_CONVERT(DATE, [a].[PaymentDate], 105) IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [a].[PaymentDate], 105), 'MMM-yyyy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [a].[PaymentDate], 105)), 0) UNION ALL SELECT 'Autofurnish' AS [Channel], FORMAT(TRY_CONVERT(DATE, [af].[Created_at], 105), 'MMM-yyyy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [af].[Created_at], 105)), 0) AS [_Month_Start], ROUND(SUM(TRY_CAST([af].[Total] AS FLOAT)), 1) AS [Sales], ROUND(SUM(TRY_CAST([af].[Tax1_Value] AS FLOAT) + TRY_CAST([af].[Tax2_Value] AS FLOAT) + TRY_CAST([af].[Tax3_Value] AS FLOAT) + TRY_CAST([af].[Tax4_Value] AS FLOAT) + TRY_CAST([af].[Tax5_Value] AS FLOAT)), 1) AS [TotalTax], 0 AS [ShippingPrice], 0 AS [ShippingTax], 0 AS [GiftwrapPrice], 0 AS [GiftwrapTax] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CONVERT(DATE, [af].[Created_at], 105) IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [af].[Created_at], 105), 'MMM-yyyy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [af].[Created_at], 105)), 0) ORDER BY [_Month_Start], [Channel]",
  "error": null
}"}
{"timestamp": "2025-08-05 11:06:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:06:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report for orders from the Amazon and Autofurnish channels. It extracts the month from the payment or creation dates, sums the sales amounts and tax components for each channel, and groups the results by month and channel. The Amazon data is aggregated from tbl_Amazon_GMPL using PaymentDate, and the Autofurnish data is aggregated from Autofurnish_OrderS_GMPL using Created_at. The tax breakdown includes all tax components available in each table. The results are combined using UNION ALL and ordered by month and channel."}
{"timestamp": "2025-08-05 11:06:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:06:43", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:12:33", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 11:12:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 11:12:34", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 11:12:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 11:12:35", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 11:12:47", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:12:48", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:12:52", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:12:53", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:13:13", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:13:13", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:13:13", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:13:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:13:14", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:13:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:13:15", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:13:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the monthly sales report for orders from Amazon and Autofurnish channels. It uses two CTEs: AmazonSales aggregates total sales and total tax from tbl_Amazon_GMPL grouped by payment month, and AutofurnishSales aggregates total sales and total tax from Autofurnish_OrderS_GMPL grouped by creation month. The final SELECT combines these results with a UNION ALL, showing the channel, month, total sales, and total tax, ordered chronologically by month.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]",
  "error": null
}"}
{"timestamp": "2025-08-05 11:13:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:13:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the monthly sales report for orders from Amazon and Autofurnish channels. It uses two CTEs: AmazonSales aggregates total sales and total tax from tbl_Amazon_GMPL grouped by payment month, and AutofurnishSales aggregates total sales and total tax from Autofurnish_OrderS_GMPL grouped by creation month. The final SELECT combines these results with a UNION ALL, showing the channel, month, total sales, and total tax, ordered chronologically by month."}
{"timestamp": "2025-08-05 11:13:24", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:13:27", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024EA85DAB30>"}
{"timestamp": "2025-08-05 11:14:03", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:14:04", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:14:05", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:14:05", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:14:05", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:14:06", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:14:06", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:14:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:14:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:14:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report for orders from the Amazon and Autofurnish dealers. It calculates total sales and total tax amounts grouped by month for each dealer. The Amazon sales data is aggregated from the tbl_Amazon_GMPL table using the PaymentDate, summing ItemPrice and ItemTax. The Autofurnish sales data is aggregated from the Autofurnish_OrderS_GMPL table using Created_at, summing Total and all tax values (Tax1_Value through Tax5_Value). The results from both sources are combined with a UNION ALL and ordered chronologically by month and dealer.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-05 11:14:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:14:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report for orders from the Amazon and Autofurnish dealers. It calculates total sales and total tax amounts grouped by month for each dealer. The Amazon sales data is aggregated from the tbl_Amazon_GMPL table using the PaymentDate, summing ItemPrice and ItemTax. The Autofurnish sales data is aggregated from the Autofurnish_OrderS_GMPL table using Created_at, summing Total and all tax values (Tax1_Value through Tax5_Value). The results from both sources are combined with a UNION ALL and ordered chronologically by month and dealer."}
{"timestamp": "2025-08-05 11:14:17", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:14:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024EA85DAA50>"}
{"timestamp": "2025-08-05 11:14:21", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:14:21", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:14:22", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:14:22", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:14:22", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:14:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:14:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:14:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:14:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:14:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates monthly sales and tax breakdowns for orders from Amazon and Autofurnish. It uses two CTEs: AmazonSales aggregates total sales and total tax from tbl_Amazon_GMPL grouped by payment month, and AutofurnishSales aggregates total sales and total tax from Autofurnish_OrderS_GMPL grouped by creation month. The final SELECT combines these results with a UNION ALL, showing the channel, month, total sales, and total tax, ordered chronologically by month.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]",
  "error": null
}"}
{"timestamp": "2025-08-05 11:14:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:14:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates monthly sales and tax breakdowns for orders from Amazon and Autofurnish. It uses two CTEs: AmazonSales aggregates total sales and total tax from tbl_Amazon_GMPL grouped by payment month, and AutofurnishSales aggregates total sales and total tax from Autofurnish_OrderS_GMPL grouped by creation month. The final SELECT combines these results with a UNION ALL, showing the channel, month, total sales, and total tax, ordered chronologically by month."}
{"timestamp": "2025-08-05 11:14:36", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:14:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024EA85DB620>"}
{"timestamp": "2025-08-05 11:14:44", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:14:44", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:14:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:14:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:14:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:14:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:14:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:14:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:14:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:14:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report combining orders from Amazon and Autofurnish. It calculates total sales and total tax amounts per month for each channel. The Amazon sales data is aggregated by PaymentDate, summing ItemPrice and ItemTax. The Autofurnish sales data is aggregated by Created_at, summing Total and all tax components (Tax1_Value through Tax5_Value). The results from both channels are combined with a UNION ALL and ordered chronologically by month.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]",
  "error": null
}"}
{"timestamp": "2025-08-05 11:14:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:14:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report combining orders from Amazon and Autofurnish. It calculates total sales and total tax amounts per month for each channel. The Amazon sales data is aggregated by PaymentDate, summing ItemPrice and ItemTax. The Autofurnish sales data is aggregated by Created_at, summing Total and all tax components (Tax1_Value through Tax5_Value). The results from both channels are combined with a UNION ALL and ordered chronologically by month."}
{"timestamp": "2025-08-05 11:14:57", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:14:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000024EA919F1C0>"}
{"timestamp": "2025-08-05 11:17:33", "logger": "app", "level": "INFO", "message": "Ingesting 14 generic examples into generic_examples"}
{"timestamp": "2025-08-05 11:17:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 14 examples into generic_examples"}
{"timestamp": "2025-08-05 11:17:34", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 11:17:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 11:17:35", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 11:18:01", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:18:02", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:18:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:18:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:18:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:18:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:18:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:18:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:18:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:18:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the monthly sales report for orders from dealers Amazon and Autofurnish. It aggregates total quantity, total item price, total tax, shipping price, shipping tax, gift wrap price, gift wrap tax, item promotion discount, and shipping promotion discount for each month. The data is combined from tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL tables, grouping by month start date and formatted month string, and ordered chronologically by month start.",
  "query": "WITH AmazonSales AS ( SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [a].[PurchaseDate], 105) AS DATE)), 0) AS [Month_Start], FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [a].[PurchaseDate], 105) AS DATE)), 0), 'MMM-yy') AS [Month], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([a].[ItemPrice] AS FLOAT), 0)) AS TotalItemPrice, SUM(COALESCE(TRY_CAST([a].[Tax] AS FLOAT), 0)) AS TotalTax, SUM(COALESCE(TRY_CAST([a].[ShippingPrice] AS FLOAT), 0)) AS TotalShippingPrice, SUM(COALESCE(TRY_CAST([a].[ShippingTax] AS FLOAT), 0)) AS TotalShippingTax, SUM(COALESCE(TRY_CAST([a].[Giftwrapprice] AS FLOAT), 0)) AS TotalGiftwrapPrice, SUM(COALESCE(TRY_CAST([a].[Giftwraptax] AS FLOAT), 0)) AS TotalGiftwrapTax, SUM(COALESCE(TRY_CAST([a].[Itempromotiondiscount] AS FLOAT), 0)) AS TotalItemPromotionDiscount, SUM(COALESCE(TRY_CAST([a].[Shippromotiondiscount] AS FLOAT), 0)) AS TotalShippingPromotionDiscount FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[PurchaseDate] IS NOT NULL GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [a].[PurchaseDate], 105) AS DATE)), 0), FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, [a].[PurchaseDate], 105) AS DATE)), 0), 'MMM-yy') ), AutofurnishSales AS ( SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, LEFT([af].[Created_at], 10), 120) AS DATE)), 0) AS [Month_Start], FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, LEFT([af].[Created_at], 10), 120) AS DATE)), 0), 'MMM-yy') AS [Month], SUM(COALESCE(TRY_CAST([af].[Subtotal] AS FLOAT), 0)) AS TotalSubtotal, SUM(COALESCE(TRY_CAST([af].[Taxes] AS FLOAT), 0)) AS TotalTax, SUM(COALESCE(TRY_CAST([af].[Shipping] AS FLOAT), 0)) AS TotalShippingPrice FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Created_at] IS NOT NULL GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, LEFT([af].[Created_at], 10), 120) AS DATE)), 0), FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(CONVERT(DATETIME, LEFT([af].[Created_at], 10), 120) AS DATE)), 0), 'MMM-yy') ) ) SELECT TOP (1000) [Month_Start], [Month], ISNULL([AmazonSales].[TotalQuantity], 0) AS AmazonTotalQuantity, ISNULL([AmazonSales].[TotalItemPrice], 0) AS AmazonTotalItemPrice, ISNULL([AmazonSales].[TotalTax], 0) AS AmazonTotalTax, ISNULL([AmazonSales].[TotalShippingPrice], 0) AS AmazonTotalShippingPrice, ISNULL([AmazonSales].[TotalShippingTax], 0) AS AmazonTotalShippingTax, ISNULL([AmazonSales].[TotalGiftwrapPrice], 0) AS AmazonTotalGiftwrapPrice, ISNULL([AmazonSales].[TotalGiftwrapTax], 0) AS AmazonTotalGiftwrapTax, ISNULL([AmazonSales].[TotalItemPromotionDiscount], 0) AS AmazonTotalItemPromotionDiscount, ISNULL([AmazonSales].[TotalShippingPromotionDiscount], 0) AS AmazonTotalShippingPromotionDiscount, ISNULL([AutofurnishSales].[TotalSubtotal], 0) AS AutofurnishTotalSubtotal, ISNULL([AutofurnishSales].[TotalTax], 0) AS AutofurnishTotalTax, ISNULL([AutofurnishSales].[TotalShippingPrice], 0) AS AutofurnishTotalShippingPrice FROM ( SELECT [Month_Start], [Month] FROM AmazonSales UNION SELECT [Month_Start], [Month] FROM AutofurnishSales ) AS [Months] LEFT JOIN AmazonSales ON [Months].[Month_Start] = [AmazonSales].[Month_Start] LEFT JOIN AutofurnishSales ON [Months].[Month_Start] = [AutofurnishSales].[Month_Start] ORDER BY [Month_Start] ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 11:18:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:18:22", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the monthly sales report for orders from dealers Amazon and Autofurnish. It aggregates total quantity, total item price, total tax, shipping price, shipping tax, gift wrap price, gift wrap tax, item promotion discount, and shipping promotion discount for each month. The data is combined from tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL tables, grouping by month start date and formatted month string, and ordered chronologically by month start."}
{"timestamp": "2025-08-05 11:18:22", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:18:24", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:21:13", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:21:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:21:17", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:21:17", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:21:17", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:21:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:21:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:21:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:21:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:21:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report combining orders from Amazon and Autofurnish sales channels. It extracts the month and month start date from the purchase or created dates, sums the quantities and amounts, and provides a detailed tax breakdown including item tax, shipping tax, gift wrap tax, and multiple tax components from Autofurnish orders. The results are grouped by month and ordered chronologically.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105)), 0) AS [_Month_Start], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([a].[ItemPrice] AS FLOAT), 0)) AS TotalItemPrice, SUM(COALESCE(TRY_CAST([a].[ItemTax] AS FLOAT), 0)) AS TotalItemTax, SUM(COALESCE(TRY_CAST([a].[ShippingPrice] AS FLOAT), 0)) AS TotalShippingPrice, SUM(COALESCE(TRY_CAST([a].[ShippingTax] AS FLOAT), 0)) AS TotalShippingTax, SUM(COALESCE(TRY_CAST([a].[GiftwrapPrice] AS FLOAT), 0)) AS TotalGiftwrapPrice, SUM(COALESCE(TRY_CAST([a].[GiftwrapTax] AS FLOAT), 0)) AS TotalGiftwrapTax FROM [tbl_Amazon_GMPL] AS [a] WHERE TRY_CAST([a].[Quantity] AS FLOAT) > 0 GROUP BY FORMAT(CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST([o].[Created_at] AS DATETIME)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST([o].[Created_at] AS DATETIME)), 0) AS [_Month_Start], SUM(COALESCE(TRY_CAST([oi].[Lineitem_quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([oi].[Lineitem_price] AS FLOAT), 0)) AS TotalItemPrice, SUM(COALESCE(TRY_CAST([o].[Taxes] AS FLOAT), 0)) AS TotalTax, SUM(COALESCE(TRY_CAST([o].[Shipping] AS FLOAT), 0)) AS TotalShippingPrice FROM [Autofurnish_OrderS_GMPL] AS [o] JOIN [af_orderitems_GMPL] AS [oi] ON [o].[OrderNo] = [oi].[AFOrderId] WHERE TRY_CAST([oi].[Lineitem_quantity] AS FLOAT) > 0 GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST([o].[Created_at] AS DATETIME)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST([o].[Created_at] AS DATETIME)), 0) ) ) SELECT COALESCE([a].[Month], [af].[Month]) AS [Month], COALESCE([a].[_Month_Start], [af].[_Month_Start]) AS [_Month_Start], COALESCE([a].[TotalQuantity], 0) + COALESCE([af].[TotalQuantity], 0) AS TotalQuantity, ROUND(COALESCE([a].[TotalItemPrice], 0) + COALESCE([af].[TotalItemPrice], 0), 1) AS TotalItemPrice, ROUND(COALESCE([a].[TotalItemTax], 0) + COALESCE([af].[TotalTax], 0), 1) AS TotalTax, ROUND(COALESCE([a].[TotalShippingPrice], 0) + COALESCE([af].[TotalShippingPrice], 0), 1) AS TotalShippingPrice, ROUND(COALESCE([a].[TotalShippingTax], 0), 1) AS TotalShippingTax, ROUND(COALESCE([a].[TotalGiftwrapPrice], 0), 1) AS TotalGiftwrapPrice, ROUND(COALESCE([a].[TotalGiftwrapTax], 0), 1) AS TotalGiftwrapTax FROM AmazonSales AS [a] FULL OUTER JOIN AutofurnishSales AS [af] ON [a].[_Month_Start] = [af].[_Month_Start] ORDER BY [_Month_Start] ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 11:21:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:21:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report combining orders from Amazon and Autofurnish sales channels. It extracts the month and month start date from the purchase or created dates, sums the quantities and amounts, and provides a detailed tax breakdown including item tax, shipping tax, gift wrap tax, and multiple tax components from Autofurnish orders. The results are grouped by month and ordered chronologically."}
{"timestamp": "2025-08-05 11:21:34", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:21:34", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:28:46", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:28:47", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:28:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:28:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:28:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:28:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:28:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:28:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:28:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:29:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report combining orders from Amazon and Autofurnish sales channels. It extracts the month and month start date from the purchase or created dates, sums the quantities and amounts, and provides a detailed tax breakdown including item tax, shipping tax, gift wrap tax, and multiple tax components from Autofurnish orders. The results are grouped by month and ordered chronologically.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105)), 0) AS [_Month_Start], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([a].[ItemPrice] AS FLOAT), 0)) AS TotalAmount, SUM(COALESCE(TRY_CAST([a].[ItemTax] AS FLOAT), 0)) AS TotalItemTax, SUM(COALESCE(TRY_CAST([a].[ShippingTax] AS FLOAT), 0)) AS TotalShippingTax, 0.0 AS TotalGiftWrapTax, 0.0 AS Tax1_Value, 0.0 AS Tax2_Value, 0.0 AS Tax3_Value, 0.0 AS Tax4_Value FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[PurchaseDate] IS NOT NULL GROUP BY FORMAT(CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 1, 10), 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, LEFT([af].[Created_at], 10), 120)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, LEFT([af].[Created_at], 10), 120)), 0) AS [_Month_Start], SUM(COALESCE(TRY_CAST([af].[Subtotal] AS FLOAT), 0)) AS TotalAmount, SUM(COALESCE(TRY_CAST([af].[Subtotal] AS FLOAT), 0)) AS TotalQuantity, 0.0 AS TotalItemTax, 0.0 AS TotalShippingTax, SUM(COALESCE(TRY_CAST([af].[Giftwrapprice] AS FLOAT), 0)) AS TotalGiftWrapTax, SUM(COALESCE(TRY_CAST([af].[Tax1_Value] AS FLOAT), 0)) AS Tax1_Value, SUM(COALESCE(TRY_CAST([af].[Tax2_Value] AS FLOAT), 0)) AS Tax2_Value, SUM(COALESCE(TRY_CAST([af].[Tax3_Value] AS FLOAT), 0)) AS Tax3_Value, SUM(COALESCE(TRY_CAST([af].[Tax4_Value] AS FLOAT), 0)) AS Tax4_Value FROM ( SELECT [af].[AFId], [af].[Created_at], [af].[Subtotal], [af].[Giftwrapprice], [af].[Tax1_Value], [af].[Tax2_Value], [af].[Tax3_Value], [af].[Tax4_Value] FROM [Autofurnish_OrderS_GMPL] AS [af] ) AS [af] GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, LEFT([af].[Created_at], 10), 120)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, LEFT([af].[Created_at], 10), 120)), 0) ) SELECT TOP (1000) [Month], [_Month_Start], SUM(TotalQuantity) AS TotalQuantity, ROUND(SUM(TotalAmount), 1) AS TotalAmount, ROUND(SUM(TotalItemTax), 1) AS TotalItemTax, ROUND(SUM(TotalShippingTax), 1) AS TotalShippingTax, ROUND(SUM(TotalGiftWrapTax), 1) AS TotalGiftWrapTax, ROUND(SUM(Tax1_Value), 1) AS Tax1_Value, ROUND(SUM(Tax2_Value), 1) AS Tax2_Value, ROUND(SUM(Tax3_Value), 1) AS Tax3_Value, ROUND(SUM(Tax4_Value), 1) AS Tax4_Value FROM ( SELECT [Month], [_Month_Start], TotalQuantity, TotalAmount, TotalItemTax, TotalShippingTax, TotalGiftWrapTax, Tax1_Value, Tax2_Value, Tax3_Value, Tax4_Value FROM AmazonSales UNION ALL SELECT [Month], [_Month_Start], TotalQuantity, TotalAmount, TotalItemTax, TotalShippingTax, TotalGiftWrapTax, Tax1_Value, Tax2_Value, Tax3_Value, Tax4_Value FROM AutofurnishSales ) AS CombinedSales GROUP BY [Month], [_Month_Start] ORDER BY [_Month_Start];",
  "error": null
}"}
{"timestamp": "2025-08-05 11:29:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:29:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report combining orders from Amazon and Autofurnish sales channels. It extracts the month and month start date from the purchase or created dates, sums the quantities and amounts, and provides a detailed tax breakdown including item tax, shipping tax, gift wrap tax, and multiple tax components from Autofurnish orders. The results are grouped by month and ordered chronologically."}
{"timestamp": "2025-08-05 11:29:09", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:29:09", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:30:16", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 11:30:17", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 11:30:17", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 11:30:17", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 11:30:18", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 11:30:27", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:30:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:30:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:30:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:30:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:30:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:30:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:30:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Display the monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:30:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:31:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report combining orders from Amazon and Autofurnish sales channels. It extracts the month and month start date from the purchase or created dates, sums the quantities and amounts, and provides a detailed tax breakdown including item tax, shipping tax, gift wrap tax, and multiple tax components for Autofurnish orders. The results are grouped by month and ordered chronologically.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2)), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2))), 0) AS [_Month_Start], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS [TotalQuantity], SUM(COALESCE(TRY_CAST([a].[ItemPrice] AS FLOAT), 0)) AS [TotalItemPrice], SUM(COALESCE(TRY_CAST([a].[ItemTax] AS FLOAT), 0)) AS [TotalItemTax], SUM(COALESCE(TRY_CAST([a].[ShippingPrice] AS FLOAT), 0)) AS [TotalShippingPrice], SUM(COALESCE(TRY_CAST([a].[ShippingTax] AS FLOAT), 0)) AS [TotalShippingTax], SUM(COALESCE(TRY_CAST([a].[GiftwrapPrice] AS FLOAT), 0)) AS [TotalGiftwrapPrice], SUM(COALESCE(TRY_CAST([a].[GiftwrapTax] AS FLOAT), 0)) AS [TotalGiftwrapTax] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[PurchaseDate] IS NOT NULL GROUP BY FORMAT(CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2)), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, CONVERT(DATE, SUBSTRING([a].[PurchaseDate], 7, 4) + '-' + SUBSTRING([a].[PurchaseDate], 4, 2) + '-' + SUBSTRING([a].[PurchaseDate], 1, 2))), 0) ), AutofurnishSales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE)), 0) AS [_Month_Start], SUM(COALESCE(TRY_CAST([oi].[Lineitem_quantity] AS FLOAT), 0)) AS [TotalQuantity], SUM(COALESCE(TRY_CAST([oi].[Lineitem_price] AS FLOAT), 0)) AS [TotalItemPrice], SUM(COALESCE([af].[Tax1_Value], 0) + COALESCE([af].[Tax2_Value], 0) + COALESCE([af].[Tax3_Value], 0) + COALESCE([af].[Tax4_Value], 0) + COALESCE([af].[Tax5_Value], 0)) AS [TotalTax], 0 AS [TotalShippingPrice], 0 AS [TotalShippingTax], 0 AS [TotalGiftwrapPrice], 0 AS [TotalGiftwrapTax] FROM [Autofurnish_OrderS_GMPL] AS [af] JOIN [af_orderitems_GMPL] AS [oi] ON [af].[OrderNo] = [oi].[AFOrderId] WHERE [af].[Created_at] IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE)), 0) ) ) SELECT [Month], [_Month_Start], SUM([TotalQuantity]) AS [TotalQuantity], SUM([TotalItemPrice]) AS [TotalItemPrice], SUM([TotalItemTax]) + SUM([TotalTax]) AS [TotalTax], SUM([TotalShippingPrice]) AS [TotalShippingPrice], SUM([TotalShippingTax]) AS [TotalShippingTax], SUM([TotalGiftwrapPrice]) AS [TotalGiftwrapPrice], SUM([TotalGiftwrapTax]) AS [TotalGiftwrapTax] FROM ( SELECT [Month], [_Month_Start], [TotalQuantity], [TotalItemPrice], [TotalItemTax], [TotalShippingPrice], [TotalShippingTax], [TotalGiftwrapPrice], [TotalGiftwrapTax] FROM AmazonSales UNION ALL SELECT [Month], [_Month_Start], [TotalQuantity], [TotalItemPrice], [TotalTax], [TotalShippingPrice], [TotalShippingTax], [TotalGiftwrapPrice], [TotalGiftwrapTax] FROM AutofurnishSales ) AS [CombinedSales] GROUP BY [Month], [_Month_Start] ORDER BY [_Month_Start] ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 11:31:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:31:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report combining orders from Amazon and Autofurnish sales channels. It extracts the month and month start date from the purchase or created dates, sums the quantities and amounts, and provides a detailed tax breakdown including item tax, shipping tax, gift wrap tax, and multiple tax components for Autofurnish orders. The results are grouped by month and ordered chronologically."}
{"timestamp": "2025-08-05 11:31:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:31:03", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:32:43", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 11:32:44", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 11:32:44", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 11:32:45", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 11:32:45", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 11:32:51", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:32:52", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:33:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: \, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:33:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:33:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:33:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Please provide the query or details you want to be rephrased for SQL generation, including any relevant parameters such as Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, or Service Date."
}"}
{"timestamp": "2025-08-05 11:33:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:33:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Please provide the query or details you want to be rephrased for SQL generation, including any relevant parameters such as Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, or Service Date.', [{'role': 'user', 'content': 'Please provide the query or details you want to be rephrased for SQL generation, including any relevant parameters such as Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, or Service Date.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:33:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:33:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]

Example 2:
  input: List all OTC sales orders with order number and customer name.
  query: SELECT [OrderNo], [CustomerName] FROM [tbl_OTCSale_GMPL]
"}
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This is a request for clarification to provide the specific details or parameters needed for generating a SQL query related to Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, or Service Date. No SQL query is generated as the request lacks specific criteria or intent.",
  "query": null,
  "error": null
}"}
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This is a request for clarification to provide the specific details or parameters needed for generating a SQL query related to Dealer, Dealer Zone, Year, Month, Product, VIN, Customer Feedback, Repair Order Number, Feedback Category, or Service Date. No SQL query is generated as the request lacks specific criteria or intent."}
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:33:04", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:33:28", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:33:28", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:33:28", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:33:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."
}"}
{"timestamp": "2025-08-05 11:33:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:33:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.', [{'role': 'user', 'content': 'Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:33:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:33:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query generates a monthly sales report combining orders from Amazon and Autofurnish. It calculates total sales and total tax amounts for each month by converting and grouping dates from Amazon's PaymentDate and Autofurnish's Created_at fields. The report includes the sales channel, formatted month, total sales, and total tax, ordered chronologically by month.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]",
  "error": null
}"}
{"timestamp": "2025-08-05 11:33:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:33:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query generates a monthly sales report combining orders from Amazon and Autofurnish. It calculates total sales and total tax amounts for each month by converting and grouping dates from Amazon's PaymentDate and Autofurnish's Created_at fields. The report includes the sales channel, formatted month, total sales, and total tax, ordered chronologically by month."}
{"timestamp": "2025-08-05 11:33:39", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:33:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD4837DB70>"}
{"timestamp": "2025-08-05 11:35:38", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all Amazon orders with their order status and fulfillment channel., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:35:38", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Generate a monthly sales report for orders from dealers Amazon and Autofurnish, including a detailed tax breakdown."}
{"timestamp": "2025-08-05 11:35:38", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:35:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all orders from the dealer Amazon including their order status and fulfillment channel."
}"}
{"timestamp": "2025-08-05 11:35:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:35:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all orders from the dealer Amazon including their order status and fulfillment channel.', [{'role': 'user', 'content': 'List all orders from the dealer Amazon including their order status and fulfillment channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:35:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:35:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]

Example 2:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]
"}
{"timestamp": "2025-08-05 11:35:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 orders from the Amazon Flex orders table, selecting the Amazon order ID, order status, and fulfillment channel.",
  "query": "SELECT TOP (1000) [tAF].[amazonorderid], [tAF].[orderstatus], [tAF].[fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL] AS [tAF]",
  "error": null
}"}
{"timestamp": "2025-08-05 11:35:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:35:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 orders from the Amazon Flex orders table, selecting the Amazon order ID, order status, and fulfillment channel."}
{"timestamp": "2025-08-05 11:35:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:35:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [tAF].[amazonorderid], [tAF].[orderstatus], [tAF].[fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL] AS [tAF] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48020050>"}
{"timestamp": "2025-08-05 11:40:30", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all Amazon orders with their order status is not blank and fulfillment channel., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:40:30", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all orders from the dealer Amazon including their order status and fulfillment channel."}
{"timestamp": "2025-08-05 11:40:30", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:40:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all orders from the dealer Amazon where the order status is not blank, including their order status and fulfillment channel."
}"}
{"timestamp": "2025-08-05 11:40:31", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:40:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all orders from the dealer Amazon where the order status is not blank, including their order status and fulfillment channel.', [{'role': 'user', 'content': 'List all orders from the dealer Amazon where the order status is not blank, including their order status and fulfillment channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:40:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:40:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]

Example 2:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish).
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1
"}
{"timestamp": "2025-08-05 11:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves all Amazon Flex orders where the order status is not blank. It selects the amazonorderid, orderstatus, and fulfillmentchannel columns from the tbl_AmazonFlex_GMPL table, filtering out rows with empty orderstatus values.",
  "query": "SELECT TOP (1000) [af].[amazonorderid], [af].[orderstatus], [af].[fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL] AS [af] WHERE [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS <> ''",
  "error": null
}"}
{"timestamp": "2025-08-05 11:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves all Amazon Flex orders where the order status is not blank. It selects the amazonorderid, orderstatus, and fulfillmentchannel columns from the tbl_AmazonFlex_GMPL table, filtering out rows with empty orderstatus values."}
{"timestamp": "2025-08-05 11:40:35", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:40:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[amazonorderid], [af].[orderstatus], [af].[fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL] AS [af] WHERE [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD4837E6D0>"}
{"timestamp": "2025-08-05 11:42:37", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have never been sold, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:42:37", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all orders from the dealer Amazon where the order status is not blank, including their order status and fulfillment channel."}
{"timestamp": "2025-08-05 11:42:37", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:42:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank."
}"}
{"timestamp": "2025-08-05 11:42:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:42:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank.', [{'role': 'user', 'content': 'List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:42:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:42:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have never been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]
"}
{"timestamp": "2025-08-05 11:42:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves distinct products that are currently in inventory but have never been sold through Amazon. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU to find products in inventory. It left joins tbl_Amazon_GMPL on SKU to find Amazon orders and filters for products where no Amazon order exists (BillID IS NULL). It also includes order status and fulfillment channel from tbl_AmazonFlex_GMPL for products with non-blank order status. The output includes SKU, ProductName, orderstatus, and fulfillmentchannel.",
  "query": "WITH InventoryProducts AS ( SELECT DISTINCT [p].[SKU], [p].[ProductName], [p].[MSKU] FROM [ProductMaster_AL] AS [p] JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] ), AmazonOrders AS ( SELECT DISTINCT [a].[SKU], [af].[orderstatus], [af].[fulfillmentchannel] FROM [tbl_Amazon_GMPL] AS [a] JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [a].[OrderId] = [af].[amazonorderid] WHERE [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' ) SELECT DISTINCT TOP (1000) [ip].[SKU], [ip].[ProductName], [ao].[orderstatus], [ao].[fulfillmentchannel] FROM [InventoryProducts] AS [ip] LEFT JOIN [tbl_Amazon_GMPL] AS [a] ON [ip].[SKU] = [a].[SKU] LEFT JOIN [AmazonOrders] AS [ao] ON [ip].[SKU] = [ao].[SKU] WHERE [a].[BillID] IS NULL AND [ao].[orderstatus] IS NOT NULL AND [ao].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' ORDER BY [ip].[SKU];",
  "error": null
}"}
{"timestamp": "2025-08-05 11:42:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:42:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves distinct products that are currently in inventory but have never been sold through Amazon. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU to find products in inventory. It left joins tbl_Amazon_GMPL on SKU to find Amazon orders and filters for products where no Amazon order exists (BillID IS NULL). It also includes order status and fulfillment channel from tbl_AmazonFlex_GMPL for products with non-blank order status. The output includes SKU, ProductName, orderstatus, and fulfillmentchannel."}
{"timestamp": "2025-08-05 11:42:46", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:42:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH InventoryProducts AS ( SELECT DISTINCT [p].[SKU], [p].[ProductName], [p].[MSKU] FROM [ProductMaster_AL] AS [p] JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] ), AmazonOrders AS ( SELECT DISTINCT [a].[SKU], [af].[orderstatus], [af].[fulfillmentchannel] FROM [tbl_Amazon_GMPL] AS [a] JOIN [tbl_AmazonFlex_GMPL] AS [af] ON [a].[OrderId] = [af].[amazonorderid] WHERE [af].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' ) SELECT DISTINCT TOP (1000) [ip].[SKU], [ip].[ProductName], [ao].[orderstatus], [ao].[fulfillmentchannel] FROM [InventoryProducts] AS [ip] LEFT JOIN [tbl_Amazon_GMPL] AS [a] ON [ip].[SKU] = [a].[SKU] LEFT JOIN [AmazonOrders] AS [ao] ON [ip].[SKU] = [ao].[SKU] WHERE [a].[BillID] IS NULL AND [ao].[orderstatus] IS NOT NULL AND [ao].[orderstatus] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' ORDER BY [ip].[SKU]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F56C10>"}
{"timestamp": "2025-08-05 11:43:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:43:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank."}
{"timestamp": "2025-08-05 11:43:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:43:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank."
}"}
{"timestamp": "2025-08-05 11:43:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:43:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank.', [{'role': 'user', 'content': 'List all products that are currently in inventory but have never been sold, considering the dealer Amazon and including their order status and fulfillment channel where the order status is not blank.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:43:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:43:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have never been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]
"}
{"timestamp": "2025-08-05 11:43:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that are currently in inventory but have never been sold through Amazon. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU to find products in inventory. It left joins tbl_Amazon_GMPL on SKU to find Amazon orders. It filters for products where there is no Amazon order (BillID is NULL) and the order status is not blank. The output includes the product SKU, product name, and the order status and fulfillment channel from Amazon orders if any.",
  "query": "SELECT TOP (1000) p.[SKU], p.[ProductName], a.[Status], a.[Fulfilled] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_Amazon_GMPL] AS a ON p.[SKU] = a.[SKU] AND a.[Status] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' WHERE a.[BillID] IS NULL",
  "error": null
}"}
{"timestamp": "2025-08-05 11:43:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:43:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that are currently in inventory but have never been sold through Amazon. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU to find products in inventory. It left joins tbl_Amazon_GMPL on SKU to find Amazon orders. It filters for products where there is no Amazon order (BillID is NULL) and the order status is not blank. The output includes the product SKU, product name, and the order status and fulfillment channel from Amazon orders if any."}
{"timestamp": "2025-08-05 11:43:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:43:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU], p.[ProductName], a.[Status], a.[Fulfilled] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_Amazon_GMPL] AS a ON p.[SKU] = a.[SKU] AND a.[Status] COLLATE SQL_Latin1_General_CP1_CI_AS <> '' WHERE a.[BillID] IS NULL : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48020050>"}
{"timestamp": "2025-08-05 11:44:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 11:44:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 11:57:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales growth by channel (OTC, Amazon, Autofurnish), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:57:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:57:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:57:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show the monthly sales growth segmented by sales channel for OTC, Amazon, and Autofurnish."
}"}
{"timestamp": "2025-08-05 11:57:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:57:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show the monthly sales growth segmented by sales channel for OTC, Amazon, and Autofurnish.', [{'role': 'user', 'content': 'Show the monthly sales growth segmented by sales channel for OTC, Amazon, and Autofurnish.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:57:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:57:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]
"}
{"timestamp": "2025-08-05 11:57:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the monthly sales growth segmented by sales channel for OTC, Amazon, and Autofurnish. It aggregates total sales amount per month for each channel, converts date strings to date format, and calculates the month-over-month growth percentage using LAG window function. The results include the sales channel, month (formatted as MMM-yy), total sales rounded to 1 decimal, and growth percentage as a string with '%' sign, ordered chronologically by month and channel.",
  "query": "WITH OTC_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tOTC].[Amount] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_OTCSale_GMPL] AS [tOTC] WHERE TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120) IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0) ), Amazon_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_Amazon_GMPL] AS [tA] WHERE TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105) IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0) ), Autofurnish_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120) IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], CONCAT(ROUND((( [TotalSales] - LAG([TotalSales]) OVER (PARTITION BY [Channel] ORDER BY [_Month_Start]) ) * 100.0) / NULLIF(LAG([TotalSales]) OVER (PARTITION BY [Channel] ORDER BY [_Month_Start]), 0), 1), '%') AS [GrowthPercent] FROM ( SELECT 'OTC' AS [Channel], [Month], [TotalSales], [_Month_Start] FROM OTC_Sales UNION ALL SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [_Month_Start] FROM Amazon_Sales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [_Month_Start] FROM Autofurnish_Sales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-05 11:57:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 11:57:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the monthly sales growth segmented by sales channel for OTC, Amazon, and Autofurnish. It aggregates total sales amount per month for each channel, converts date strings to date format, and calculates the month-over-month growth percentage using LAG window function. The results include the sales channel, month (formatted as MMM-yy), total sales rounded to 1 decimal, and growth percentage as a string with '%' sign, ordered chronologically by month and channel."}
{"timestamp": "2025-08-05 11:57:24", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 11:57:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tOTC].[Amount] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_OTCSale_GMPL] AS [tOTC] WHERE TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120) IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, SUBSTRING([tOTC].[OrderDate], 7, 4) + '-' + SUBSTRING([tOTC].[OrderDate], 4, 2) + '-' + SUBSTRING([tOTC].[OrderDate], 1, 2), 120)), 0) ), Amazon_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_Amazon_GMPL] AS [tA] WHERE TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105) IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PaymentDate], 10), 105)), 0) ), Autofurnish_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120) IS NOT NULL GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 120)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], CONCAT(ROUND((( [TotalSales] - LAG([TotalSales]) OVER (PARTITION BY [Channel] ORDER BY [_Month_Start]) ) * 100.0) / NULLIF(LAG([TotalSales]) OVER (PARTITION BY [Channel] ORDER BY [_Month_Start]), 0), 1), '%') AS [GrowthPercent] FROM ( SELECT 'OTC' AS [Channel], [Month], [TotalSales], [_Month_Start] FROM OTC_Sales UNION ALL SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [_Month_Start] FROM Amazon_Sales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [_Month_Start] FROM Autofurnish_Sales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD4837E6D0>"}
{"timestamp": "2025-08-05 11:59:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify products with low inventory levels (below 5 units) across warehouses., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 11:59:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 11:59:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 11:59:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products with inventory levels below 5 units across all warehouses."
}"}
{"timestamp": "2025-08-05 11:59:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 11:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products with inventory levels below 5 units across all warehouses.', [{'role': 'user', 'content': 'Identify products with inventory levels below 5 units across all warehouses.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 11:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 11:59:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Find products that are in inventory but have never been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 12:00:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products from the inventory detail table where the count of inventory items per product MSKU across all warehouses is less than 5 units. It groups by the MSKU and counts the number of inventory records for each MSKU, filtering those with inventory count below 5.",
  "query": "SELECT TOP (1000) [i].[MSKU], COUNT([i].[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS [i] GROUP BY [i].[MSKU] HAVING COUNT([i].[Id]) < 5 ORDER BY [InventoryCount] ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:00:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:00:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products from the inventory detail table where the count of inventory items per product MSKU across all warehouses is less than 5 units. It groups by the MSKU and counts the number of inventory records for each MSKU, filtering those with inventory count below 5."}
{"timestamp": "2025-08-05 12:00:01", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:00:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [i].[MSKU], COUNT([i].[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS [i] GROUP BY [i].[MSKU] HAVING COUNT([i].[Id]) < 5 ORDER BY [InventoryCount] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F56740>"}
{"timestamp": "2025-08-05 12:00:54", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Calculate average order value by sales channel for last quarter., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:00:54", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products with inventory levels below 5 units across all warehouses."}
{"timestamp": "2025-08-05 12:00:54", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:00:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the average order value grouped by sales channel for the last quarter."
}"}
{"timestamp": "2025-08-05 12:00:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:00:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate the average order value grouped by sales channel for the last quarter.', [{'role': 'user', 'content': 'Calculate the average order value grouped by sales channel for the last quarter.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:00:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:00:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]
"}
{"timestamp": "2025-08-05 12:01:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the average order value grouped by sales channel for the last quarter. It uses the tbl_AmazonFlex_GMPL table, converts the purchasedate from varchar to date format, filters orders within the last quarter based on the current date, and groups the results by the saleschannel column. The average is computed by casting the itemprice column to float and rounding to one decimal place.",
  "query": "WITH LastQuarterDates AS ( SELECT DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()) - 1, 0) AS QuarterStart, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()), 0)) AS QuarterEnd ) SELECT TOP (1000) [af].[saleschannel], ROUND(AVG(TRY_CAST([af].[itemprice] AS FLOAT)), 1) AS AverageOrderValue FROM [tbl_AmazonFlex_GMPL] AS [af] CROSS JOIN LastQuarterDates AS [lqd] WHERE TRY_CAST(CONVERT(DATE, SUBSTRING([af].[purchasedate], 7, 4) + '-' + SUBSTRING([af].[purchasedate], 4, 2) + '-' + SUBSTRING([af].[purchasedate], 1, 2)) AS DATE) BETWEEN [lqd].[QuarterStart] AND [lqd].[QuarterEnd] GROUP BY [af].[saleschannel] ORDER BY [af].[saleschannel];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:01:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:01:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the average order value grouped by sales channel for the last quarter. It uses the tbl_AmazonFlex_GMPL table, converts the purchasedate from varchar to date format, filters orders within the last quarter based on the current date, and groups the results by the saleschannel column. The average is computed by casting the itemprice column to float and rounding to one decimal place."}
{"timestamp": "2025-08-05 12:01:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:01:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH LastQuarterDates AS ( SELECT DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()) - 1, 0) AS QuarterStart, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()), 0)) AS QuarterEnd ) SELECT TOP (1000) [af].[saleschannel], ROUND(AVG(TRY_CAST([af].[itemprice] AS FLOAT)), 1) AS AverageOrderValue FROM [tbl_AmazonFlex_GMPL] AS [af] CROSS JOIN LastQuarterDates AS [lqd] WHERE TRY_CAST(CONVERT(DATE, SUBSTRING([af].[purchasedate], 7, 4) + '-' + SUBSTRING([af].[purchasedate], 4, 2) + '-' + SUBSTRING([af].[purchasedate], 1, 2)) AS DATE) BETWEEN [lqd].[QuarterStart] AND [lqd].[QuarterEnd] GROUP BY [af].[saleschannel] ORDER BY [af].[saleschannel]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F570E0>"}
{"timestamp": "2025-08-05 12:03:53", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products returned most frequently in Amazon orders, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:03:53", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Calculate the average order value grouped by sales channel for the last quarter."}
{"timestamp": "2025-08-05 12:03:53", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:03:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the products that are returned most frequently in orders placed through the Amazon sales channel."
}"}
{"timestamp": "2025-08-05 12:03:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:03:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the products that are returned most frequently in orders placed through the Amazon sales channel.', [{'role': 'user', 'content': 'Identify the products that are returned most frequently in orders placed through the Amazon sales channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:03:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:03:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]
"}
{"timestamp": "2025-08-05 12:03:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the top 1000 products most frequently returned in orders placed through the Amazon sales channel. It selects the SKU and ProductName from the Amazon orders table, filters for orders with a return status indicating return to origin or returned to seller, groups by SKU and ProductName, and orders the results by the total returned quantity in descending order.",
  "query": "SELECT TOP (1000) [a].[SKU], [a].[ProductName], SUM(TRY_CAST([a].[Quantity] AS FLOAT)) AS [TotalReturnedQuantity] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('DRTO', 'Shipped - Returned to Seller') GROUP BY [a].[SKU], [a].[ProductName] ORDER BY [TotalReturnedQuantity] DESC",
  "error": null
}"}
{"timestamp": "2025-08-05 12:03:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:03:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the top 1000 products most frequently returned in orders placed through the Amazon sales channel. It selects the SKU and ProductName from the Amazon orders table, filters for orders with a return status indicating return to origin or returned to seller, groups by SKU and ProductName, and orders the results by the total returned quantity in descending order."}
{"timestamp": "2025-08-05 12:03:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:03:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [a].[SKU], [a].[ProductName], SUM(TRY_CAST([a].[Quantity] AS FLOAT)) AS [TotalReturnedQuantity] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('DRTO', 'Shipped - Returned to Seller') GROUP BY [a].[SKU], [a].[ProductName] ORDER BY [TotalReturnedQuantity] DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F563C0>"}
{"timestamp": "2025-08-05 12:06:53", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show profit margins by product category., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:06:53", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the products that are returned most frequently in orders placed through the Amazon sales channel."}
{"timestamp": "2025-08-05 12:06:53", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:06:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show profit margins by product category for products returned most frequently in orders placed through the Amazon sales channel."
}"}
{"timestamp": "2025-08-05 12:06:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:06:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show profit margins by product category for products returned most frequently in orders placed through the Amazon sales channel.', [{'role': 'user', 'content': 'Show profit margins by product category for products returned most frequently in orders placed through the Amazon sales channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:06:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:06:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]
"}
{"timestamp": "2025-08-05 12:07:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total quantity of returned products and their average profit margin by product category from Amazon sales channel orders. It joins tbl_Amazon_GMPL and ProductMaster_AL on SKU, filters for returned orders by checking Status values indicating returns, groups by Category1, and computes total returned quantity and average profit margin (calculated as MSP minus ItemPrice).",
  "query": "WITH ReturnedProducts AS ( SELECT [tA].[SKU], TRY_CAST([tA].[Quantity] AS FLOAT) AS [ReturnedQuantity], TRY_CAST([p].[MSP] AS FLOAT) AS [MSP], TRY_CAST([tA].[ItemPrice] AS FLOAT) AS [ItemPrice], [p].[Category1] FROM [tbl_Amazon_GMPL] AS [tA] JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE [tA].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Shipped - Returned to Seller', 'Cancelled', 'Returned') AND TRY_CAST([tA].[Quantity] AS FLOAT) > 0 ), AggregatedReturns AS ( SELECT [Category1], SUM([ReturnedQuantity]) AS [TotalReturnedQuantity], AVG(COALESCE([MSP], 0) - COALESCE([ItemPrice], 0)) AS [AvgProfitMargin] FROM ReturnedProducts GROUP BY [Category1] ) SELECT TOP (1000) [Category1], ROUND([TotalReturnedQuantity], 1) AS [TotalReturnedQuantity], ROUND([AvgProfitMargin], 1) AS [AvgProfitMargin] FROM AggregatedReturns ORDER BY [TotalReturnedQuantity] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:07:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:07:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total quantity of returned products and their average profit margin by product category from Amazon sales channel orders. It joins tbl_Amazon_GMPL and ProductMaster_AL on SKU, filters for returned orders by checking Status values indicating returns, groups by Category1, and computes total returned quantity and average profit margin (calculated as MSP minus ItemPrice)."}
{"timestamp": "2025-08-05 12:07:01", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:07:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH ReturnedProducts AS ( SELECT [tA].[SKU], TRY_CAST([tA].[Quantity] AS FLOAT) AS [ReturnedQuantity], TRY_CAST([p].[MSP] AS FLOAT) AS [MSP], TRY_CAST([tA].[ItemPrice] AS FLOAT) AS [ItemPrice], [p].[Category1] FROM [tbl_Amazon_GMPL] AS [tA] JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE [tA].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Shipped - Returned to Seller', 'Cancelled', 'Returned') AND TRY_CAST([tA].[Quantity] AS FLOAT) > 0 ), AggregatedReturns AS ( SELECT [Category1], SUM([ReturnedQuantity]) AS [TotalReturnedQuantity], AVG(COALESCE([MSP], 0) - COALESCE([ItemPrice], 0)) AS [AvgProfitMargin] FROM ReturnedProducts GROUP BY [Category1] ) SELECT TOP (1000) [Category1], ROUND([TotalReturnedQuantity], 1) AS [TotalReturnedQuantity], ROUND([AvgProfitMargin], 1) AS [AvgProfitMargin] FROM AggregatedReturns ORDER BY [TotalReturnedQuantity] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD4837E970>"}
{"timestamp": "2025-08-05 12:08:45", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify customers who make repeat purchases across different channels, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:08:45", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Show profit margins by product category for products returned most frequently in orders placed through the Amazon sales channel."}
{"timestamp": "2025-08-05 12:08:45", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:08:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify customers who make repeat purchases across different sales channels, considering the context of products returned most frequently in orders placed through the Amazon sales channel."
}"}
{"timestamp": "2025-08-05 12:08:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:08:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify customers who make repeat purchases across different sales channels, considering the context of products returned most frequently in orders placed through the Amazon sales channel.', [{'role': 'user', 'content': 'Identify customers who make repeat purchases across different sales channels, considering the context of products returned most frequently in orders placed through the Amazon sales channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:08:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:08:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish).
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-05 12:08:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies customers who have made repeat purchases across different sales channels (OTC, Amazon, Autofurnish). It selects customer identifiers and names from each channel's respective tables, unifies them with a channel label, and then groups by customer to find those with purchases in more than one channel. Additionally, it filters to include only customers who have purchased products that are among the top 100 most frequently returned in the Amazon sales channel, based on the count of returned orders with status 'Shipped - Returned to Seller' or 'Shipped - Returned to Buyer'. The output includes the customer name, contact information, and the count of distinct sales channels they purchased from.",
  "query": "WITH AmazonReturns AS ( SELECT TOP 100 [SKU], COUNT(*) AS ReturnCount FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Shipped - Returned to Seller', 'Shipped - Returned to Buyer') GROUP BY [a].[SKU] ORDER BY ReturnCount DESC ), CustomersOTC AS ( SELECT DISTINCT TRY_CAST([o].[VendorId] AS NVARCHAR(200)) AS CustomerId, [o].[CustomerName] AS CustomerName, 'OTC' AS Channel FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[CustomerName] IS NOT NULL ), CustomersAmazon AS ( SELECT DISTINCT [a].[BuyerName] AS CustomerName, [a].[BuyerPhoneNo] AS ContactNumber, 'Amazon' AS Channel FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[BuyerName] IS NOT NULL AND [a].[SKU] IN ( SELECT [r].[SKU] FROM AmazonReturns AS [r] ) ), CustomersAutofurnish AS ( SELECT DISTINCT [af].[Billing_Name] AS CustomerName, [af].[Email] AS ContactEmail, 'Autofurnish' AS Channel FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Billing_Name] IS NOT NULL ) SELECT TOP 1000 CustomerName, COUNT(DISTINCT Channel) AS ChannelCount FROM ( SELECT [CustomerName], [Channel] FROM CustomersOTC UNION ALL SELECT [CustomerName], [Channel] FROM CustomersAmazon UNION ALL SELECT [CustomerName], [Channel] FROM CustomersAutofurnish ) AS CombinedCustomers GROUP BY CustomerName HAVING COUNT(DISTINCT Channel) > 1 ORDER BY ChannelCount DESC, CustomerName ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:08:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:08:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies customers who have made repeat purchases across different sales channels (OTC, Amazon, Autofurnish). It selects customer identifiers and names from each channel's respective tables, unifies them with a channel label, and then groups by customer to find those with purchases in more than one channel. Additionally, it filters to include only customers who have purchased products that are among the top 100 most frequently returned in the Amazon sales channel, based on the count of returned orders with status 'Shipped - Returned to Seller' or 'Shipped - Returned to Buyer'. The output includes the customer name, contact information, and the count of distinct sales channels they purchased from."}
{"timestamp": "2025-08-05 12:08:55", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:08:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonReturns AS ( SELECT TOP 100 [SKU], COUNT(*) AS ReturnCount FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Shipped - Returned to Seller', 'Shipped - Returned to Buyer') GROUP BY [a].[SKU] ORDER BY ReturnCount DESC ), CustomersOTC AS ( SELECT DISTINCT TRY_CAST([o].[VendorId] AS NVARCHAR(200)) AS CustomerId, [o].[CustomerName] AS CustomerName, 'OTC' AS Channel FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[CustomerName] IS NOT NULL ), CustomersAmazon AS ( SELECT DISTINCT [a].[BuyerName] AS CustomerName, [a].[BuyerPhoneNo] AS ContactNumber, 'Amazon' AS Channel FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[BuyerName] IS NOT NULL AND [a].[SKU] IN ( SELECT [r].[SKU] FROM AmazonReturns AS [r] ) ), CustomersAutofurnish AS ( SELECT DISTINCT [af].[Billing_Name] AS CustomerName, [af].[Email] AS ContactEmail, 'Autofurnish' AS Channel FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Billing_Name] IS NOT NULL ) SELECT TOP 1000 CustomerName, COUNT(DISTINCT Channel) AS ChannelCount FROM ( SELECT [CustomerName], [Channel] FROM CustomersOTC UNION ALL SELECT [CustomerName], [Channel] FROM CustomersAmazon UNION ALL SELECT [CustomerName], [Channel] FROM CustomersAutofurnish ) AS CombinedCustomers GROUP BY CustomerName HAVING COUNT(DISTINCT Channel) > 1 ORDER BY ChannelCount DESC, CustomerName ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F56BA0>"}
{"timestamp": "2025-08-05 12:10:58", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:11:02", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:11:03", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:11:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track inventory turnover rate by warehouse location., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:11:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:11:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:11:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate and track the inventory turnover rate grouped by warehouse location."
}"}
{"timestamp": "2025-08-05 12:11:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:11:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate and track the inventory turnover rate grouped by warehouse location.', [{'role': 'user', 'content': 'Calculate and track the inventory turnover rate grouped by warehouse location.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:11:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:11:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-05 12:11:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the inventory turnover rate grouped by warehouse location. It aggregates the total inventory count and total MSP value per warehouse from the InventoryDetail_GMPL table joined with tbl_Warehouse_GMPL on WarehouseId. The turnover rate is computed as the ratio of total MSP to total inventory count, rounded to one decimal place. The results include the warehouse name, total inventory count, total MSP value, and the calculated turnover rate, ordered by warehouse name.",
  "query": "SELECT TOP (1000) w.[Name] AS [WarehouseName], COUNT(i.[Id]) AS [TotalInventoryCount], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS [TotalMSPValue], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)) / NULLIF(COUNT(i.[Id]), 0), 1) AS [InventoryTurnoverRate] FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name] ORDER BY w.[Name];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:11:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:11:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the inventory turnover rate grouped by warehouse location. It aggregates the total inventory count and total MSP value per warehouse from the InventoryDetail_GMPL table joined with tbl_Warehouse_GMPL on WarehouseId. The turnover rate is computed as the ratio of total MSP to total inventory count, rounded to one decimal place. The results include the warehouse name, total inventory count, total MSP value, and the calculated turnover rate, ordered by warehouse name."}
{"timestamp": "2025-08-05 12:11:12", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:11:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS [WarehouseName], COUNT(i.[Id]) AS [TotalInventoryCount], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS [TotalMSPValue], ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)) / NULLIF(COUNT(i.[Id]), 0), 1) AS [InventoryTurnoverRate] FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name] ORDER BY w.[Name]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F56A50>"}
{"timestamp": "2025-08-05 12:12:40", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Compare actual sales against forecast by product line., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:12:40", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Calculate and track the inventory turnover rate grouped by warehouse location."}
{"timestamp": "2025-08-05 12:12:40", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:12:41", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Compare actual sales against forecast by product line, incorporating inventory turnover rate grouped by warehouse location."
}"}
{"timestamp": "2025-08-05 12:12:41", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:12:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Compare actual sales against forecast by product line, incorporating inventory turnover rate grouped by warehouse location.', [{'role': 'user', 'content': 'Compare actual sales against forecast by product line, incorporating inventory turnover rate grouped by warehouse location.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:12:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:12:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-05 12:12:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query compares actual sales and forecast by product line and calculates inventory turnover rate grouped by warehouse location. It aggregates actual sales quantity and amount from tbl_OTCSale_GMPL joined with ProductMaster_AL on ProductID = Id, grouped by product category and warehouse. It also aggregates inventory count and MSP value from InventoryDetail_GMPL joined with tbl_Warehouse_GMPL, grouped by warehouse and product category. The final result joins these aggregates on warehouse and product category, showing warehouse name, product category, total sales quantity, total sales amount, inventory count, and total inventory value.",
  "query": "WITH SalesAgg AS ( SELECT TOP (1000) p.[Category1] AS ProductLine, w.[Name] AS WarehouseName, SUM(TRY_CAST(o.[Quantity] AS FLOAT)) AS TotalSalesQuantity, SUM(TRY_CAST(o.[Amount] AS FLOAT)) AS TotalSalesAmount FROM [tbl_OTCSale_GMPL] o JOIN [ProductMaster_AL] p ON o.[ProductID] = p.[Id] JOIN [tbl_Warehouse_GMPL] w ON 1=1 GROUP BY p.[Category1], w.[Name] ), InventoryAgg AS ( SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductLine, COUNT(i.[Id]) AS InventoryCount, SUM(i.[MSP]) AS TotalInventoryValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ) SELECT TOP (1000) COALESCE(s.[WarehouseName], i.[WarehouseName]) AS WarehouseName, COALESCE(s.[ProductLine], i.[ProductLine]) AS ProductLine, ISNULL(s.[TotalSalesQuantity], 0) AS TotalSalesQuantity, ISNULL(s.[TotalSalesAmount], 0) AS TotalSalesAmount, ISNULL(i.[InventoryCount], 0) AS InventoryCount, ISNULL(i.[TotalInventoryValue], 0) AS TotalInventoryValue FROM SalesAgg s FULL OUTER JOIN InventoryAgg i ON s.[WarehouseName] = i.[WarehouseName] AND s.[ProductLine] = i.[ProductLine] ORDER BY WarehouseName, ProductLine;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:12:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:12:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query compares actual sales and forecast by product line and calculates inventory turnover rate grouped by warehouse location. It aggregates actual sales quantity and amount from tbl_OTCSale_GMPL joined with ProductMaster_AL on ProductID = Id, grouped by product category and warehouse. It also aggregates inventory count and MSP value from InventoryDetail_GMPL joined with tbl_Warehouse_GMPL, grouped by warehouse and product category. The final result joins these aggregates on warehouse and product category, showing warehouse name, product category, total sales quantity, total sales amount, inventory count, and total inventory value."}
{"timestamp": "2025-08-05 12:12:49", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:12:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH SalesAgg AS ( SELECT TOP (1000) p.[Category1] AS ProductLine, w.[Name] AS WarehouseName, SUM(TRY_CAST(o.[Quantity] AS FLOAT)) AS TotalSalesQuantity, SUM(TRY_CAST(o.[Amount] AS FLOAT)) AS TotalSalesAmount FROM [tbl_OTCSale_GMPL] o JOIN [ProductMaster_AL] p ON o.[ProductID] = p.[Id] JOIN [tbl_Warehouse_GMPL] w ON 1=1 GROUP BY p.[Category1], w.[Name] ), InventoryAgg AS ( SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductLine, COUNT(i.[Id]) AS InventoryCount, SUM(i.[MSP]) AS TotalInventoryValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ) SELECT TOP (1000) COALESCE(s.[WarehouseName], i.[WarehouseName]) AS WarehouseName, COALESCE(s.[ProductLine], i.[ProductLine]) AS ProductLine, ISNULL(s.[TotalSalesQuantity], 0) AS TotalSalesQuantity, ISNULL(s.[TotalSalesAmount], 0) AS TotalSalesAmount, ISNULL(i.[InventoryCount], 0) AS InventoryCount, ISNULL(i.[TotalInventoryValue], 0) AS TotalInventoryValue FROM SalesAgg s FULL OUTER JOIN InventoryAgg i ON s.[WarehouseName] = i.[WarehouseName] AND s.[ProductLine] = i.[ProductLine] ORDER BY WarehouseName, ProductLine; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F574D0>"}
{"timestamp": "2025-08-05 12:13:53", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find best-selling products by region/state., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:13:53", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Compare actual sales against forecast by product line, incorporating inventory turnover rate grouped by warehouse location."}
{"timestamp": "2025-08-05 12:13:53", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:13:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find the best-selling products by region/state, incorporating inventory turnover rate grouped by warehouse location."
}"}
{"timestamp": "2025-08-05 12:13:54", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:13:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find the best-selling products by region/state, incorporating inventory turnover rate grouped by warehouse location.', [{'role': 'user', 'content': 'Find the best-selling products by region/state, incorporating inventory turnover rate grouped by warehouse location.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:13:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:13:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show all warehouses with their city and state.
  query: SELECT [Name], [City], [State] FROM [tbl_Warehouse_GMPL] WHERE [IsActive] = 1
"}
{"timestamp": "2025-08-05 12:14:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the best-selling products by state, incorporating inventory turnover rate grouped by warehouse location. It aggregates total quantity sold from tbl_OTCSale_GMPL by product and state, and aggregates inventory count from InventoryDetail_GMPL by product and warehouse. It joins these aggregates on product MSKU and selects product MSKU, state, warehouse name, total quantity sold, and inventory count. The results are ordered by state, warehouse name, and total quantity sold descending, limited to top 1000 records.",
  "query": "WITH SalesByProductState AS ( SELECT TOP (1000) TRY_CAST(o.[MSKU] AS NVARCHAR(500)) AS [MSKU], o.[State], SUM(TRY_CAST(o.[Quantity] AS FLOAT)) AS TotalQuantitySold FROM [tbl_OTCSale_GMPL] AS o WHERE o.[MSKU] IS NOT NULL AND o.[State] IS NOT NULL GROUP BY o.[MSKU], o.[State] ), InventoryByProductWarehouse AS ( SELECT i.[MSKU], w.[Name] AS WarehouseName, COUNT(i.[Id]) AS InventoryCount FROM [InventoryDetail_GMPL] AS i INNER JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE i.[MSKU] IS NOT NULL GROUP BY i.[MSKU], w.[Name] ) SELECT TOP (1000) s.[MSKU], s.[State], i.[WarehouseName], s.TotalQuantitySold, i.InventoryCount FROM SalesByProductState AS s INNER JOIN InventoryByProductWarehouse AS i ON s.[MSKU] = i.[MSKU] ORDER BY s.[State], i.[WarehouseName], s.TotalQuantitySold DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:14:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:14:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the best-selling products by state, incorporating inventory turnover rate grouped by warehouse location. It aggregates total quantity sold from tbl_OTCSale_GMPL by product and state, and aggregates inventory count from InventoryDetail_GMPL by product and warehouse. It joins these aggregates on product MSKU and selects product MSKU, state, warehouse name, total quantity sold, and inventory count. The results are ordered by state, warehouse name, and total quantity sold descending, limited to top 1000 records."}
{"timestamp": "2025-08-05 12:14:01", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:14:01", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:16:17", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find best-selling products, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:16:17", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Find the best-selling products by region/state, incorporating inventory turnover rate grouped by warehouse location."}
{"timestamp": "2025-08-05 12:16:17", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:16:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Find the best-selling products by region or state, incorporating the inventory turnover rate grouped by warehouse location."
}"}
{"timestamp": "2025-08-05 12:16:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:16:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Find the best-selling products by region or state, incorporating the inventory turnover rate grouped by warehouse location.', [{'role': 'user', 'content': 'Find the best-selling products by region or state, incorporating the inventory turnover rate grouped by warehouse location.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:16:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:16:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show all warehouses with their city and state.
  query: SELECT [Name], [City], [State] FROM [tbl_Warehouse_GMPL] WHERE [IsActive] = 1
"}
{"timestamp": "2025-08-05 12:16:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the best-selling products by state along with the inventory turnover rate grouped by warehouse location. It aggregates total quantity sold from tbl_OTCSale_GMPL by product and state, and aggregates inventory counts from InventoryDetail_GMPL by product and warehouse. It then joins these aggregates on product MSKU and selects the top 1000 products with their state, warehouse name, total quantity sold, inventory count, and turnover rate (total quantity sold divided by inventory count).",
  "query": "WITH SalesByProductState AS ( SELECT TOP (1000) TRY_CAST([ots].[ProductID] AS INT) AS [ProductID], [ots].[State], SUM(TRY_CAST([ots].[Quantity] AS FLOAT)) AS [TotalQuantitySold] FROM [tbl_OTCSale_GMPL] AS [ots] WHERE [ots].[State] IS NOT NULL AND TRY_CAST([ots].[Quantity] AS FLOAT) IS NOT NULL GROUP BY TRY_CAST([ots].[ProductID] AS INT), [ots].[State] ), InventoryByProductWarehouse AS ( SELECT [inv].[MSKU], [wh].[Name] AS [WarehouseName], COUNT([inv].[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS [inv] INNER JOIN [tbl_Warehouse_GMPL] AS [wh] ON [inv].[WarehouseId] = [wh].[Id] WHERE [inv].[IsOut] = 0 AND [inv].[IsDeleted] = 0 GROUP BY [inv].[MSKU], [wh].[Name] ) SELECT TOP (1000) [sps].[State], [ibpw].[WarehouseName], [sps].[ProductID], [ibpw].[MSKU], [sps].[TotalQuantitySold], [ibpw].[InventoryCount], CASE WHEN [ibpw].[InventoryCount] = 0 THEN NULL ELSE ROUND([sps].[TotalQuantitySold] * 1.0 / [ibpw].[InventoryCount], 1) END AS [InventoryTurnoverRate] FROM [SalesByProductState] AS [sps] INNER JOIN [ProductMaster_AL] AS [pm] ON [sps].[ProductID] = [pm].[Id] INNER JOIN [InventoryByProductWarehouse] AS [ibpw] ON [pm].[MSKU] = [ibpw].[MSKU] ORDER BY [sps].[State], [ibpw].[WarehouseName], [sps].[TotalQuantitySold] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:16:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:16:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the best-selling products by state along with the inventory turnover rate grouped by warehouse location. It aggregates total quantity sold from tbl_OTCSale_GMPL by product and state, and aggregates inventory counts from InventoryDetail_GMPL by product and warehouse. It then joins these aggregates on product MSKU and selects the top 1000 products with their state, warehouse name, total quantity sold, inventory count, and turnover rate (total quantity sold divided by inventory count)."}
{"timestamp": "2025-08-05 12:16:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:16:27", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:17:13", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:17:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:21:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find best-selling products, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:21:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:21:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:21:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the best-selling products."
}"}
{"timestamp": "2025-08-05 12:21:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:21:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the best-selling products.', [{'role': 'user', 'content': 'Identify the best-selling products.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:21:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:21:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Get all active products with their SKU and product name.
  query: SELECT [SKU], [ProductName] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-05 12:21:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total quantity sold for each product across OTC sales, Amazon orders, and Autofurnish orders by summing quantities from tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL respectively. It joins these sales data with ProductMaster_AL on SKU or ProductID to get product details. The result lists the top 1000 products by total quantity sold, showing SKU and ProductName.",
  "query": "WITH OTC_Sales AS ( SELECT TOP 1000 TRY_CAST([ProductID] AS INT) AS [ProductID], SUM(TRY_CAST([Quantity] AS FLOAT)) AS [TotalQuantity] FROM [tbl_OTCSale_GMPL] WHERE TRY_CAST([Quantity] AS FLOAT) IS NOT NULL GROUP BY TRY_CAST([ProductID] AS INT) ), Amazon_Sales AS ( SELECT TOP 1000 [SKU], SUM(TRY_CAST([quantity] AS FLOAT)) AS [TotalQuantity] FROM [tbl_Amazon_GMPL] WHERE TRY_CAST([quantity] AS FLOAT) IS NOT NULL GROUP BY [SKU] ), Autofurnish_Sales AS ( SELECT TOP 1000 [Lineitem_sku], SUM(TRY_CAST([Lineitem_quantity] AS FLOAT)) AS [TotalQuantity] FROM [af_orderitems_GMPL] WHERE TRY_CAST([Lineitem_quantity] AS FLOAT) IS NOT NULL GROUP BY [Lineitem_sku] ) SELECT TOP 1000 p.[SKU], p.[ProductName], ROUND( COALESCE(o.[TotalQuantity], 0) + COALESCE(a.[TotalQuantity], 0) + COALESCE(af.[TotalQuantity], 0), 1) AS [TotalQuantitySold] FROM [ProductMaster_AL] AS p LEFT JOIN OTC_Sales AS o ON p.[Id] = o.[ProductID] LEFT JOIN Amazon_Sales AS a ON p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = a.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN Autofurnish_Sales AS af ON p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = af.[Lineitem_sku] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [TotalQuantitySold] DESC"
  ,
  "error": null
}"}
{"timestamp": "2025-08-05 12:21:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:21:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total quantity sold for each product across OTC sales, Amazon orders, and Autofurnish orders by summing quantities from tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL respectively. It joins these sales data with ProductMaster_AL on SKU or ProductID to get product details. The result lists the top 1000 products by total quantity sold, showing SKU and ProductName."}
{"timestamp": "2025-08-05 12:21:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:21:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Sales AS ( SELECT TOP 1000 TRY_CAST([ProductID] AS INT) AS [ProductID], SUM(TRY_CAST([Quantity] AS FLOAT)) AS [TotalQuantity] FROM [tbl_OTCSale_GMPL] WHERE TRY_CAST([Quantity] AS FLOAT) IS NOT NULL GROUP BY TRY_CAST([ProductID] AS INT) ), Amazon_Sales AS ( SELECT TOP 1000 [SKU], SUM(TRY_CAST([quantity] AS FLOAT)) AS [TotalQuantity] FROM [tbl_Amazon_GMPL] WHERE TRY_CAST([quantity] AS FLOAT) IS NOT NULL GROUP BY [SKU] ), Autofurnish_Sales AS ( SELECT TOP 1000 [Lineitem_sku], SUM(TRY_CAST([Lineitem_quantity] AS FLOAT)) AS [TotalQuantity] FROM [af_orderitems_GMPL] WHERE TRY_CAST([Lineitem_quantity] AS FLOAT) IS NOT NULL GROUP BY [Lineitem_sku] ) SELECT TOP 1000 p.[SKU], p.[ProductName], ROUND( COALESCE(o.[TotalQuantity], 0) + COALESCE(a.[TotalQuantity], 0) + COALESCE(af.[TotalQuantity], 0), 1) AS [TotalQuantitySold] FROM [ProductMaster_AL] AS p LEFT JOIN OTC_Sales AS o ON p.[Id] = o.[ProductID] LEFT JOIN Amazon_Sales AS a ON p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = a.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN Autofurnish_Sales AS af ON p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = af.[Lineitem_sku] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [TotalQuantitySold] DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F57EE0>"}
{"timestamp": "2025-08-05 12:23:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify slow-moving inventory (not sold in last 6 months)., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:23:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the best-selling products."}
{"timestamp": "2025-08-05 12:23:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:23:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify slow-moving inventory products that have not been sold in the last 6 months."
}"}
{"timestamp": "2025-08-05 12:23:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:23:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify slow-moving inventory products that have not been sold in the last 6 months.', [{'role': 'user', 'content': 'Identify slow-moving inventory products that have not been sold in the last 6 months.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:23:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:23:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have never been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 12:23:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies slow-moving inventory products by selecting products from InventoryDetail_GMPL that have inventory records but have not been sold in the last 6 months according to tbl_OTCSale_GMPL. It joins InventoryDetail with ProductMaster on MSKU, and filters out products with sales in the last 6 months by checking absence of matching ProductID in tbl_OTCSale_GMPL with OrderDate within the last 6 months. The output includes distinct MSKU and ProductName of such products.",
  "query": "WITH RecentSales AS ( SELECT DISTINCT TRY_CAST([o].[ProductID] AS INT) AS [ProductID] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_CAST(CONVERT(DATE, SUBSTRING([o].[OrderDate], 7, 4) + '-' + SUBSTRING([o].[OrderDate], 4, 2) + '-' + SUBSTRING([o].[OrderDate], 1, 2)) AS DATE) >= DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) ), InventoryProducts AS ( SELECT DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL ) SELECT DISTINCT TOP (1000) [p].[MSKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] JOIN [InventoryProducts] AS [ip] ON [p].[MSKU] = [ip].[MSKU] WHERE [p].[Id] NOT IN ( SELECT [rs].[ProductID] FROM [RecentSales] AS [rs] WHERE [rs].[ProductID] IS NOT NULL ) ORDER BY [p].[MSKU];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:23:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:23:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies slow-moving inventory products by selecting products from InventoryDetail_GMPL that have inventory records but have not been sold in the last 6 months according to tbl_OTCSale_GMPL. It joins InventoryDetail with ProductMaster on MSKU, and filters out products with sales in the last 6 months by checking absence of matching ProductID in tbl_OTCSale_GMPL with OrderDate within the last 6 months. The output includes distinct MSKU and ProductName of such products."}
{"timestamp": "2025-08-05 12:23:57", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:23:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH RecentSales AS ( SELECT DISTINCT TRY_CAST([o].[ProductID] AS INT) AS [ProductID] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_CAST(CONVERT(DATE, SUBSTRING([o].[OrderDate], 7, 4) + '-' + SUBSTRING([o].[OrderDate], 4, 2) + '-' + SUBSTRING([o].[OrderDate], 1, 2)) AS DATE) >= DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) ), InventoryProducts AS ( SELECT DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL ) SELECT DISTINCT TOP (1000) [p].[MSKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] JOIN [InventoryProducts] AS [ip] ON [p].[MSKU] = [ip].[MSKU] WHERE [p].[Id] NOT IN ( SELECT [rs].[ProductID] FROM [RecentSales] AS [rs] WHERE [rs].[ProductID] IS NOT NULL ) ORDER BY [p].[MSKU]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002AD48F57D90>"}
{"timestamp": "2025-08-05 12:24:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:24:08", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:24:11", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify slow-moving inventory, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:24:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:24:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:24:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify slow-moving inventory based on available data parameters."
}"}
{"timestamp": "2025-08-05 12:24:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:24:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify slow-moving inventory based on available data parameters.', [{'role': 'user', 'content': 'Identify slow-moving inventory based on available data parameters.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:24:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:24:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have never been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 12:24:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies slow-moving inventory items by counting the total quantity sold per product MSKU in the tbl_OTCSale_GMPL table, joined with InventoryDetail_GMPL to get inventory details. It groups by MSKU and filters for products with total sold quantity less than or equal to 10, indicating slow movement. The output includes the MSKU and total quantity sold, limited to the top 1000 results.",
  "query": "WITH SalesQuantity AS ( SELECT [o].[ProductID], [i].[MSKU], SUM(TRY_CAST([o].[Quantity] AS FLOAT)) AS TotalQuantitySold FROM [tbl_OTCSale_GMPL] AS [o] INNER JOIN [InventoryDetail_GMPL] AS [i] ON [i].[MSKU] = ( SELECT TOP 1 [p].[MSKU] FROM [InventoryDetail_GMPL] AS [p] WHERE [p].[MSKU] IS NOT NULL AND [p].[MSKU] = [i].[MSKU] ) WHERE [o].[ProductID] IS NOT NULL GROUP BY [o].[ProductID], [i].[MSKU] ) SELECT TOP (1000) [sq].[MSKU], ROUND([sq].[TotalQuantitySold], 1) AS TotalQuantitySold FROM [SalesQuantity] AS [sq] WHERE [sq].[TotalQuantitySold] <= 10 ORDER BY [sq].[TotalQuantitySold] ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:24:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:24:18", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies slow-moving inventory items by counting the total quantity sold per product MSKU in the tbl_OTCSale_GMPL table, joined with InventoryDetail_GMPL to get inventory details. It groups by MSKU and filters for products with total sold quantity less than or equal to 10, indicating slow movement. The output includes the MSKU and total quantity sold, limited to the top 1000 results."}
{"timestamp": "2025-08-05 12:24:18", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:26:34", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 12:26:35", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 12:26:35", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 12:26:35", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 12:26:36", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 12:26:47", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:26:47", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:26:51", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify slow-moving inventory, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:26:51", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:26:51", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:26:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify slow-moving inventory based on available data parameters."
}"}
{"timestamp": "2025-08-05 12:26:53", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:26:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify slow-moving inventory based on available data parameters.', [{'role': 'user', 'content': 'Identify slow-moving inventory based on available data parameters.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:26:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:26:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 12:27:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies slow-moving inventory items by calculating the total quantity sold from tbl_OTCSale_GMPL and tbl_Amazon_GMPL for each product MSKU, then compares it with the total inventory count from InventoryDetail_GMPL. It selects products where inventory count is greater than total sold quantity, indicating slow movement. The query joins InventoryDetail with ProductMaster on MSKU, aggregates sales quantities from OTC sales and Amazon sales separately, and combines them. It outputs the product MSKU, product name, total inventory count, total quantity sold, and the difference (inventory minus sold). Results are limited to top 1000 records ordered by the difference descending.",
  "query": "WITH OTC_Sales AS ( SELECT TOP (1000) TRY_CAST([o].[ProductID] AS INT) AS [ProductID], SUM(TRY_CAST([o].[Quantity] AS FLOAT)) AS [TotalOTCQuantity] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_CAST([o].[Quantity] AS FLOAT) IS NOT NULL GROUP BY TRY_CAST([o].[ProductID] AS INT) ), Amazon_Sales AS ( SELECT TOP (1000) [p].[Id] AS [ProductID], SUM(TRY_CAST([a].[Quantity] AS FLOAT)) AS [TotalAmazonQuantity] FROM [tbl_Amazon_GMPL] AS [a] JOIN [ProductMaster_AL] AS [p] ON [a].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([a].[Quantity] AS FLOAT) IS NOT NULL GROUP BY [p].[Id] ), Inventory_Count AS ( SELECT [i].[MSKU], COUNT([i].[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[IsOut] = 0 AND [i].[IsDeleted] = 0 GROUP BY [i].[MSKU] ) SELECT TOP (1000) [p].[MSKU], [p].[ProductName], [ic].[InventoryCount], COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([amz].[TotalAmazonQuantity], 0) AS [TotalQuantitySold], ([ic].[InventoryCount] - (COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([amz].[TotalAmazonQuantity], 0))) AS [InventoryMinusSold] FROM [Inventory_Count] AS [ic] JOIN [ProductMaster_AL] AS [p] ON [ic].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN [OTC_Sales] AS [otc] ON [p].[Id] = [otc].[ProductID] LEFT JOIN [Amazon_Sales] AS [amz] ON [p].[Id] = [amz].[ProductID] WHERE ([ic].[InventoryCount] - (COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([amz].[TotalAmazonQuantity], 0))) > 0 ORDER BY [InventoryMinusSold] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:27:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:27:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies slow-moving inventory items by calculating the total quantity sold from tbl_OTCSale_GMPL and tbl_Amazon_GMPL for each product MSKU, then compares it with the total inventory count from InventoryDetail_GMPL. It selects products where inventory count is greater than total sold quantity, indicating slow movement. The query joins InventoryDetail with ProductMaster on MSKU, aggregates sales quantities from OTC sales and Amazon sales separately, and combines them. It outputs the product MSKU, product name, total inventory count, total quantity sold, and the difference (inventory minus sold). Results are limited to top 1000 records ordered by the difference descending."}
{"timestamp": "2025-08-05 12:27:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:27:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Sales AS ( SELECT TOP (1000) TRY_CAST([o].[ProductID] AS INT) AS [ProductID], SUM(TRY_CAST([o].[Quantity] AS FLOAT)) AS [TotalOTCQuantity] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_CAST([o].[Quantity] AS FLOAT) IS NOT NULL GROUP BY TRY_CAST([o].[ProductID] AS INT) ), Amazon_Sales AS ( SELECT TOP (1000) [p].[Id] AS [ProductID], SUM(TRY_CAST([a].[Quantity] AS FLOAT)) AS [TotalAmazonQuantity] FROM [tbl_Amazon_GMPL] AS [a] JOIN [ProductMaster_AL] AS [p] ON [a].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([a].[Quantity] AS FLOAT) IS NOT NULL GROUP BY [p].[Id] ), Inventory_Count AS ( SELECT [i].[MSKU], COUNT([i].[Id]) AS [InventoryCount] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[IsOut] = 0 AND [i].[IsDeleted] = 0 GROUP BY [i].[MSKU] ) SELECT TOP (1000) [p].[MSKU], [p].[ProductName], [ic].[InventoryCount], COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([amz].[TotalAmazonQuantity], 0) AS [TotalQuantitySold], ([ic].[InventoryCount] - (COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([amz].[TotalAmazonQuantity], 0))) AS [InventoryMinusSold] FROM [Inventory_Count] AS [ic] JOIN [ProductMaster_AL] AS [p] ON [ic].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN [OTC_Sales] AS [otc] ON [p].[Id] = [otc].[ProductID] LEFT JOIN [Amazon_Sales] AS [amz] ON [p].[Id] = [amz].[ProductID] WHERE ([ic].[InventoryCount] - (COALESCE([otc].[TotalOTCQuantity], 0) + COALESCE([amz].[TotalAmazonQuantity], 0))) > 0 ORDER BY [InventoryMinusSold] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB9886F90>"}
{"timestamp": "2025-08-05 12:28:27", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track customer acquisition cost by marketing channel., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:28:27", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify slow-moving inventory based on available data parameters."}
{"timestamp": "2025-08-05 12:28:27", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:28:28", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate and track the customer acquisition cost segmented by marketing channel."
}"}
{"timestamp": "2025-08-05 12:28:28", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:28:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate and track the customer acquisition cost segmented by marketing channel.', [{'role': 'user', 'content': 'Calculate and track the customer acquisition cost segmented by marketing channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:28:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:28:28", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-05 12:28:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the customer acquisition cost segmented by marketing channel. It aggregates the total cost and counts distinct customers per marketing channel from the Autofurnish_OrderS_GMPL table, grouping by the Fulfillment_Status as a proxy for marketing channel since no explicit marketing channel column is available in the schema. It selects the marketing channel, total acquisition cost (sum of TRY_CAST of Discount_Amount as float), and number of distinct customers (count of distinct Email).",
  "query": "SELECT TOP (1000) [af].[Fulfillment_Status] AS [MarketingChannel], ROUND(SUM(TRY_CAST([af].[Discount_Amount] AS FLOAT)), 1) AS [TotalAcquisitionCost], COUNT(DISTINCT [af].[Email]) AS [CustomerCount] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Fulfillment_Status] IS NOT NULL GROUP BY [af].[Fulfillment_Status] ORDER BY [TotalAcquisitionCost] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:28:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:28:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the customer acquisition cost segmented by marketing channel. It aggregates the total cost and counts distinct customers per marketing channel from the Autofurnish_OrderS_GMPL table, grouping by the Fulfillment_Status as a proxy for marketing channel since no explicit marketing channel column is available in the schema. It selects the marketing channel, total acquisition cost (sum of TRY_CAST of Discount_Amount as float), and number of distinct customers (count of distinct Email)."}
{"timestamp": "2025-08-05 12:28:33", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:28:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [af].[Fulfillment_Status] AS [MarketingChannel], ROUND(SUM(TRY_CAST([af].[Discount_Amount] AS FLOAT)), 1) AS [TotalAcquisitionCost], COUNT(DISTINCT [af].[Email]) AS [CustomerCount] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Fulfillment_Status] IS NOT NULL GROUP BY [af].[Fulfillment_Status] ORDER BY [TotalAcquisitionCost] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB97CD390>"}
{"timestamp": "2025-08-05 12:29:32", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:29:33", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Calculate and track the customer acquisition cost segmented by marketing channel."}
{"timestamp": "2025-08-05 12:29:33", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:29:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track and analyze payment delays segmented by customer type, specifically comparing OTC and online customers."
}"}
{"timestamp": "2025-08-05 12:29:34", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:29:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track and analyze payment delays segmented by customer type, specifically comparing OTC and online customers.', [{'role': 'user', 'content': 'Track and analyze payment delays segmented by customer type, specifically comparing OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:29:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:29:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query analyzes payment delays segmented by customer type OTC and online. It calculates the delay in days between order date and payment date for OTC sales from tbl_OTCSale_GMPL and for online sales from Autofurnish_OrderS_GMPL. It groups results by customer type and provides average payment delay days, limited to top 1000 records.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TOP (1000) 'OTC' AS CustomerType, TRY_CAST(DATEDIFF(DAY, CONVERT(DATE, SUBSTRING([o].[OrderDate], 7, 4) + '-' + SUBSTRING([o].[OrderDate], 4, 2) + '-' + SUBSTRING([o].[OrderDate], 1, 2), 120), CONVERT(DATE, [o].[CreatedDate], 120)) AS FLOAT) AS PaymentDelayDays FROM [tbl_OTCSale_GMPL] AS [o] WHERE ISDATE(CONVERT(DATE, SUBSTRING([o].[OrderDate], 7, 4) + '-' + SUBSTRING([o].[OrderDate], 4, 2) + '-' + SUBSTRING([o].[OrderDate], 1, 2), 120)) = 1 AND [o].[CreatedDate] IS NOT NULL ), Online_PaymentDelays AS ( SELECT TOP (1000) 'Online' AS CustomerType, TRY_CAST(DATEDIFF(DAY, CONVERT(DATE, LEFT([af].[Paid_at], 10), 120), CONVERT(DATE, LEFT([af].[Created_at], 10), 120)) AS FLOAT) AS PaymentDelayDays FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Paid_at] IS NOT NULL AND [af].[Created_at] IS NOT NULL ) SELECT TOP (1000) [CustomerType], ROUND(AVG([PaymentDelayDays]), 1) AS AveragePaymentDelayDays FROM ( SELECT [CustomerType], [PaymentDelayDays] FROM OTC_PaymentDelays UNION ALL SELECT [CustomerType], [PaymentDelayDays] FROM Online_PaymentDelays ) AS [Combined] GROUP BY [CustomerType] ORDER BY [CustomerType];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:29:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:29:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query analyzes payment delays segmented by customer type OTC and online. It calculates the delay in days between order date and payment date for OTC sales from tbl_OTCSale_GMPL and for online sales from Autofurnish_OrderS_GMPL. It groups results by customer type and provides average payment delay days, limited to top 1000 records."}
{"timestamp": "2025-08-05 12:29:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:29:42", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:38:36", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:38:37", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:38:47", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:38:47", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:38:47", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:38:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers."
}"}
{"timestamp": "2025-08-05 12:38:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:38:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers.', [{'role': 'user', 'content': 'Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:38:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:38:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates and compares payment delays for OTC and online customers. It extracts OTC sales data from tbl_OTCSale_GMPL and Autofurnish orders from Autofurnish_OrderS_GMPL, computing payment delay as the difference in days between order date and payment date. The results are grouped by customer type ('OTC' or 'Online') and include average payment delay and count of orders for each type.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TOP (1000) 'OTC' AS [CustomerType], TRY_CAST(DATEDIFF(DAY, CONVERT(DATE, SUBSTRING([o].[OrderDate], 7, 4) + '-' + SUBSTRING([o].[OrderDate], 4, 2) + '-' + SUBSTRING([o].[OrderDate], 1, 2), 120), CONVERT(DATE, [o].[CreatedDate])) AS FLOAT) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS [o] WHERE ISDATE(CONVERT(DATE, SUBSTRING([o].[OrderDate], 7, 4) + '-' + SUBSTRING([o].[OrderDate], 4, 2) + '-' + SUBSTRING([o].[OrderDate], 1, 2), 120)) = 1 AND [o].[CreatedDate] IS NOT NULL ), Online_PaymentDelays AS ( SELECT TOP (1000) 'Online' AS [CustomerType], TRY_CAST(DATEDIFF(DAY, CONVERT(DATE, LEFT([af].[Paid_at], 10), 120), CONVERT(DATE, LEFT([af].[Created_at], 10), 120)) AS FLOAT) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE ISDATE(CONVERT(DATE, LEFT([af].[Paid_at], 10), 120)) = 1 AND ISDATE(CONVERT(DATE, LEFT([af].[Created_at], 10), 120)) = 1 ), CombinedDelays AS ( SELECT [CustomerType], [PaymentDelayDays] FROM OTC_PaymentDelays UNION ALL SELECT [CustomerType], [PaymentDelayDays] FROM Online_PaymentDelays ) SELECT TOP (1000) [CustomerType], ROUND(AVG([PaymentDelayDays]), 1) AS [AveragePaymentDelayDays], COUNT(*) AS [OrderCount] FROM CombinedDelays GROUP BY [CustomerType] ORDER BY [CustomerType];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:38:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:38:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates and compares payment delays for OTC and online customers. It extracts OTC sales data from tbl_OTCSale_GMPL and Autofurnish orders from Autofurnish_OrderS_GMPL, computing payment delay as the difference in days between order date and payment date. The results are grouped by customer type ('OTC' or 'Online') and include average payment delay and count of orders for each type."}
{"timestamp": "2025-08-05 12:38:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:38:58", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:39:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify products frequently bought together., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:39:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers."}
{"timestamp": "2025-08-05 12:39:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:39:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products frequently bought together, considering payment delays categorized by customer type, specifically distinguishing between OTC and online customers."
}"}
{"timestamp": "2025-08-05 12:39:49", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:39:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products frequently bought together, considering payment delays categorized by customer type, specifically distinguishing between OTC and online customers.', [{'role': 'user', 'content': 'Identify products frequently bought together, considering payment delays categorized by customer type, specifically distinguishing between OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:39:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:40:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies pairs of products frequently bought together by the same customer in OTC and online sales, considering payment delays and categorizing customers by type (OTC or online). It uses CTEs to extract OTC sales and online sales (from Amazon and Autofurnish orders), calculates payment delay days, and then finds product pairs bought together by the same customer within each channel. The output includes customer type, customer identifier, product SKUs, and count of co-purchases, limited to top 1000 results.",
  "query": "WITH OTC_Sales AS ( SELECT DISTINCT TOP (1000) o.[CustomerName] AS Customer, o.[SKU] AS ProductSKU, TRY_CAST(DATEDIFF(DAY, TRY_CAST(CONVERT(DATETIME, FORMAT(CAST(o.[OrderDate] AS VARCHAR), 'dd/MM/yyyy'), 103) AS DATE), GETDATE()) AS INT) AS PaymentDelayDays, 'OTC' AS CustomerType FROM [tbl_OTCSale_GMPL] AS o WHERE o.[CustomerName] IS NOT NULL AND o.[SKU] IS NOT NULL ), Online_Sales AS ( SELECT DISTINCT TOP (1000) a.[BuyerName] AS Customer, a.[SKU] AS ProductSKU, TRY_CAST(DATEDIFF(DAY, TRY_CAST(CONVERT(DATETIME, FORMAT(CAST(a.[PurchaseDate] AS VARCHAR), 'dd/MM/yyyy'), 103) AS DATE), GETDATE()) AS INT) AS PaymentDelayDays, 'Online' AS CustomerType FROM [tbl_Amazon_GMPL] AS a WHERE a.[BuyerName] IS NOT NULL AND a.[SKU] IS NOT NULL UNION ALL SELECT DISTINCT TOP (1000) af.[Email] AS Customer, ai.[Lineitem_sku] AS ProductSKU, TRY_CAST(DATEDIFF(DAY, TRY_CAST(CONVERT(DATETIME, FORMAT(CAST(af.[Paid_at] AS VARCHAR), 'yyyy-MM-dd'), 23) AS DATE), GETDATE()) AS INT) AS PaymentDelayDays, 'Online' AS CustomerType FROM [Autofurnish_OrderS_GMPL] AS af JOIN [af_orderitems_GMPL] AS ai ON af.[OrderNo] = ai.[AFOrderId] WHERE af.[Email] IS NOT NULL AND ai.[Lineitem_sku] IS NOT NULL ), ProductPairs AS ( SELECT TOP (1000) s1.[CustomerType], s1.[Customer], s1.[ProductSKU] AS ProductSKU1, s2.[ProductSKU] AS ProductSKU2, COUNT(*) AS CoPurchaseCount FROM ( SELECT * FROM OTC_Sales UNION ALL SELECT * FROM Online_Sales ) AS s1 JOIN ( SELECT * FROM OTC_Sales UNION ALL SELECT * FROM Online_Sales ) AS s2 ON s1.[Customer] = s2.[Customer] AND s1.[CustomerType] = s2.[CustomerType] AND s1.[ProductSKU] < s2.[ProductSKU] GROUP BY s1.[CustomerType], s1.[Customer], s1.[ProductSKU], s2.[ProductSKU] ORDER BY CoPurchaseCount DESC ) SELECT TOP (1000) [CustomerType], [Customer], [ProductSKU1], [ProductSKU2], [CoPurchaseCount] FROM ProductPairs;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:40:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:40:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies pairs of products frequently bought together by the same customer in OTC and online sales, considering payment delays and categorizing customers by type (OTC or online). It uses CTEs to extract OTC sales and online sales (from Amazon and Autofurnish orders), calculates payment delay days, and then finds product pairs bought together by the same customer within each channel. The output includes customer type, customer identifier, product SKUs, and count of co-purchases, limited to top 1000 results."}
{"timestamp": "2025-08-05 12:40:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:40:00", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:40:15", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:40:15", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:40:18", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show GST/tax liabilities by state for current financial year., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:40:18", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:40:18", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:40:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the GST and tax liabilities grouped by state for the current financial year."
}"}
{"timestamp": "2025-08-05 12:40:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:40:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the GST and tax liabilities grouped by state for the current financial year.', [{'role': 'user', 'content': 'Display the GST and tax liabilities grouped by state for the current financial year.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:40:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:40:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]

Example 2:
  input: Show all warehouses with their city and state.
  query: SELECT [Name], [City], [State] FROM [tbl_Warehouse_GMPL] WHERE [IsActive] = 1
"}
{"timestamp": "2025-08-05 12:40:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total GST and tax liabilities grouped by state for the current financial year (April 1, 2024 to March 31, 2025) from the tbl_OTCSale_GMPL table. It sums the Tax and TCSAmount columns after casting them to float and rounding to one decimal place. The results are grouped and ordered by the state.",
  "query": "SELECT TOP (1000) [tO].[State], SUM(ROUND(TRY_CAST([tO].[Tax] AS FLOAT), 1)) AS [TotalTax], SUM(ROUND(TRY_CAST([tO].[TCSAmount] AS FLOAT), 1)) AS [TotalTCSAmount] FROM [tbl_OTCSale_GMPL] AS [tO] WHERE TRY_CAST(CONVERT(date, SUBSTRING([tO].[OrderDate], 7, 4) + '-' + SUBSTRING([tO].[OrderDate], 4, 2) + '-' + SUBSTRING([tO].[OrderDate], 1, 2)) AS date) BETWEEN DATE '2024-04-01' AND DATE '2025-03-31' GROUP BY [tO].[State] ORDER BY [tO].[State]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-05 12:40:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:40:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total GST and tax liabilities grouped by state for the current financial year (April 1, 2024 to March 31, 2025) from the tbl_OTCSale_GMPL table. It sums the Tax and TCSAmount columns after casting them to float and rounding to one decimal place. The results are grouped and ordered by the state."}
{"timestamp": "2025-08-05 12:40:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:40:26", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:40:58", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:40:58", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:41:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show fulfillment time differences between sales channels., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:41:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:41:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:41:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the differences in fulfillment time between various sales channels."
}"}
{"timestamp": "2025-08-05 12:41:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:41:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the differences in fulfillment time between various sales channels.', [{'role': 'user', 'content': 'Display the differences in fulfillment time between various sales channels.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:41:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:41:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-05 12:41:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the average fulfillment time in days for each sales channel from the Amazon Flex orders table. It converts the purchase date and last updated date from varchar to date format, computes the difference in days between these dates as fulfillment time, and then groups the results by sales channel. The output includes the sales channel and the average fulfillment time rounded to one decimal place, limited to the top 1000 records.",
  "query": "SELECT TOP (1000) [t].[saleschannel], ROUND(AVG(DATEDIFF(DAY, TRY_CAST(CONVERT(DATE, PARSENAME(REPLACE([t].[purchasedate], '/', '.'), 3) + '-' + PARSENAME(REPLACE([t].[purchasedate], '/', '.'), 2) + '-' + PARSENAME(REPLACE([t].[purchasedate], '/', '.'), 1)) AS DATE), TRY_CAST(CONVERT(DATE, PARSENAME(REPLACE([t].[lastupdateddate], '/', '.'), 3) + '-' + PARSENAME(REPLACE([t].[lastupdateddate], '/', '.'), 2) + '-' + PARSENAME(REPLACE([t].[lastupdateddate], '/', '.'), 1)) AS DATE))) AS FLOAT), 1) AS [AverageFulfillmentTimeDays] FROM [tbl_AmazonFlex_GMPL] AS [t] WHERE [t].[purchasedate] IS NOT NULL AND [t].[lastupdateddate] IS NOT NULL GROUP BY [t].[saleschannel] ORDER BY [AverageFulfillmentTimeDays] ASC",
  "error": null
}"}
{"timestamp": "2025-08-05 12:41:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:41:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the average fulfillment time in days for each sales channel from the Amazon Flex orders table. It converts the purchase date and last updated date from varchar to date format, computes the difference in days between these dates as fulfillment time, and then groups the results by sales channel. The output includes the sales channel and the average fulfillment time rounded to one decimal place, limited to the top 1000 records."}
{"timestamp": "2025-08-05 12:41:08", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:41:08", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:52:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:52:45", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:52:48", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show fulfillment time differences between sales channels., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:52:48", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:52:48", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:52:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show the differences in fulfillment time between sales channels."
}"}
{"timestamp": "2025-08-05 12:52:50", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:52:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show the differences in fulfillment time between sales channels.', [{'role': 'user', 'content': 'Show the differences in fulfillment time between sales channels.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:52:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:52:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-05 12:52:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the average fulfillment time in hours for each sales channel from the Amazon Flex orders. It converts the purchase date and last updated date from varchar to date format, computes the difference in hours between these dates as fulfillment time, and then groups the results by sales channel to show the average fulfillment time per channel.",
  "query": "WITH FulfillmentTimes AS ( SELECT [t].[saleschannel], DATEDIFF(HOUR, TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB'), TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB')) AS FulfillmentTimeHours FROM [tbl_AmazonFlex_GMPL] AS [t] WHERE TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB') IS NOT NULL ) SELECT TOP (1000) [saleschannel], ROUND(AVG(TRY_CAST([FulfillmentTimeHours] AS FLOAT)), 1) AS AverageFulfillmentTimeHours FROM FulfillmentTimes GROUP BY [saleschannel] ORDER BY AverageFulfillmentTimeHours DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:52:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:52:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the average fulfillment time in hours for each sales channel from the Amazon Flex orders. It converts the purchase date and last updated date from varchar to date format, computes the difference in hours between these dates as fulfillment time, and then groups the results by sales channel to show the average fulfillment time per channel."}
{"timestamp": "2025-08-05 12:52:57", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:52:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH FulfillmentTimes AS ( SELECT [t].[saleschannel], DATEDIFF(HOUR, TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB'), TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB')) AS FulfillmentTimeHours FROM [tbl_AmazonFlex_GMPL] AS [t] WHERE TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB') IS NOT NULL ) SELECT TOP (1000) [saleschannel], ROUND(AVG(TRY_CAST([FulfillmentTimeHours] AS FLOAT)), 1) AS AverageFulfillmentTimeHours FROM FulfillmentTimes GROUP BY [saleschannel] ORDER BY AverageFulfillmentTimeHours DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB98E7230>"}
{"timestamp": "2025-08-05 12:54:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:54:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:54:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show fulfillment time differences between sales channels., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:54:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:54:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:54:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show the differences in fulfillment time between sales channels."
}"}
{"timestamp": "2025-08-05 12:54:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:54:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show the differences in fulfillment time between sales channels.', [{'role': 'user', 'content': 'Show the differences in fulfillment time between sales channels.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:54:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:54:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: List all Amazon orders with their order status and fulfillment channel.
  query: SELECT [amazonorderid], [orderstatus], [fulfillmentchannel] FROM [tbl_AmazonFlex_GMPL]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-05 12:54:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the average fulfillment time in hours for each sales channel from the Amazon Flex orders. It converts the purchase date and last updated date from varchar to date format, computes the difference in hours between these dates as fulfillment time, and groups the results by sales channel, ordering by average fulfillment time ascending.",
  "query": "WITH FulfillmentTimes AS ( SELECT [t].[saleschannel], DATEDIFF(HOUR, TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB'), TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB')) AS FulfillmentTimeHours FROM [tbl_AmazonFlex_GMPL] AS [t] WHERE TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB') IS NOT NULL ) SELECT TOP (1000) [saleschannel], ROUND(AVG(TRY_CAST([FulfillmentTimeHours] AS FLOAT)), 1) AS AvgFulfillmentTimeHours FROM FulfillmentTimes GROUP BY [saleschannel] ORDER BY AvgFulfillmentTimeHours ASC;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:54:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:54:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the average fulfillment time in hours for each sales channel from the Amazon Flex orders. It converts the purchase date and last updated date from varchar to date format, computes the difference in hours between these dates as fulfillment time, and groups the results by sales channel, ordering by average fulfillment time ascending."}
{"timestamp": "2025-08-05 12:54:39", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:54:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH FulfillmentTimes AS ( SELECT [t].[saleschannel], DATEDIFF(HOUR, TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB'), TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB')) AS FulfillmentTimeHours FROM [tbl_AmazonFlex_GMPL] AS [t] WHERE TRY_PARSE([t].[purchasedate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([t].[lastupdateddate] AS DATE USING 'en-GB') IS NOT NULL ) SELECT TOP (1000) [saleschannel], ROUND(AVG(TRY_CAST([FulfillmentTimeHours] AS FLOAT)), 1) AS AvgFulfillmentTimeHours FROM FulfillmentTimes GROUP BY [saleschannel] ORDER BY AvgFulfillmentTimeHours ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB98E6510>"}
{"timestamp": "2025-08-05 12:55:24", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:55:24", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Show the differences in fulfillment time between sales channels."}
{"timestamp": "2025-08-05 12:55:24", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:55:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track and compare payment delays by customer type, specifically between OTC and online customers."
}"}
{"timestamp": "2025-08-05 12:55:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:55:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track and compare payment delays by customer type, specifically between OTC and online customers.', [{'role': 'user', 'content': 'Track and compare payment delays by customer type, specifically between OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:55:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates and compares the average payment delay in days for OTC and online customers. It extracts OTC sales data from tbl_OTCSale_GMPL, converting OrderDate to date and calculating delay as the difference between CreatedDate and OrderDate. It extracts online sales data from Autofurnish_OrderS_GMPL, converting Paid_at and Created_at to dates and calculating delay as the difference between Paid_at and Created_at. The results are grouped by customer type ('OTC' or 'Online') and provide the average payment delay for each type.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TRY_CAST(otc.[CustomerName] AS NVARCHAR(200)) AS [CustomerName], DATEDIFF(DAY, TRY_PARSE(otc.[OrderDate] AS DATE USING 'en-GB'), CAST(otc.[CreatedDate] AS DATE)) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS otc WHERE TRY_PARSE(otc.[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND otc.[CreatedDate] IS NOT NULL ), Online_PaymentDelays AS ( SELECT af.[Email] AS [CustomerEmail], DATEDIFF(DAY, TRY_CAST(LEFT(af.[Created_at], 10) AS DATE), TRY_CAST(LEFT(af.[Paid_at], 10) AS DATE)) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS af WHERE TRY_CAST(LEFT(af.[Created_at], 10) AS DATE) IS NOT NULL AND TRY_CAST(LEFT(af.[Paid_at], 10) AS DATE) IS NOT NULL ) SELECT 'OTC' AS [CustomerType], ROUND(AVG(TRY_CAST([PaymentDelayDays] AS FLOAT)), 1) AS [AveragePaymentDelayDays] FROM OTC_PaymentDelays UNION ALL SELECT 'Online' AS [CustomerType], ROUND(AVG(TRY_CAST([PaymentDelayDays] AS FLOAT)), 1) AS [AveragePaymentDelayDays] FROM Online_PaymentDelays;",
  "error": null
}"}
{"timestamp": "2025-08-05 12:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates and compares the average payment delay in days for OTC and online customers. It extracts OTC sales data from tbl_OTCSale_GMPL, converting OrderDate to date and calculating delay as the difference between CreatedDate and OrderDate. It extracts online sales data from Autofurnish_OrderS_GMPL, converting Paid_at and Created_at to dates and calculating delay as the difference between Paid_at and Created_at. The results are grouped by customer type ('OTC' or 'Online') and provide the average payment delay for each type."}
{"timestamp": "2025-08-05 12:55:35", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:55:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_PaymentDelays AS ( SELECT TRY_CAST(otc.[CustomerName] AS NVARCHAR(200)) AS [CustomerName], DATEDIFF(DAY, TRY_PARSE(otc.[OrderDate] AS DATE USING 'en-GB'), CAST(otc.[CreatedDate] AS DATE)) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS otc WHERE TRY_PARSE(otc.[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND otc.[CreatedDate] IS NOT NULL ), Online_PaymentDelays AS ( SELECT af.[Email] AS [CustomerEmail], DATEDIFF(DAY, TRY_CAST(LEFT(af.[Created_at], 10) AS DATE), TRY_CAST(LEFT(af.[Paid_at], 10) AS DATE)) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS af WHERE TRY_CAST(LEFT(af.[Created_at], 10) AS DATE) IS NOT NULL AND TRY_CAST(LEFT(af.[Paid_at], 10) AS DATE) IS NOT NULL ) SELECT 'OTC' AS [CustomerType], ROUND(AVG(TRY_CAST([PaymentDelayDays] AS FLOAT)), 1) AS [AveragePaymentDelayDays] FROM OTC_PaymentDelays UNION ALL SELECT 'Online' AS [CustomerType], ROUND(AVG(TRY_CAST([PaymentDelayDays] AS FLOAT)), 1) AS [AveragePaymentDelayDays] FROM Online_PaymentDelays; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB97CF7E0>"}
{"timestamp": "2025-08-05 12:57:00", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:57:00", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:57:14", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:57:14", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:57:14", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:57:15", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers."
}"}
{"timestamp": "2025-08-05 12:57:15", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:57:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers.', [{'role': 'user', 'content': 'Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:57:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:57:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates and compares payment delays for OTC and online customers by customer type. It computes payment delay as the difference in days between payment date and order date for OTC sales from tbl_OTCSale_GMPL and for Autofurnish orders from Autofurnish_OrderS_GMPL. The results are grouped by customer type ('OTC' or 'Online') and include average payment delay days, limited to top 1000 records.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TOP (1000) 'OTC' AS [CustomerType], TRY_CAST(DATEDIFF(DAY, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB'), TRY_PARSE([o].[CreatedDate] AS DATE USING 'en-GB')) AS FLOAT) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([o].[CreatedDate] AS DATE USING 'en-GB') IS NOT NULL ), Online_PaymentDelays AS ( SELECT TOP (1000) 'Online' AS [CustomerType], TRY_CAST(DATEDIFF(DAY, TRY_CAST([af].[Created_at] AS DATE), TRY_CAST([af].[Paid_at] AS DATE)) AS FLOAT) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST([af].[Created_at] AS DATE) IS NOT NULL AND TRY_CAST([af].[Paid_at] AS DATE) IS NOT NULL ) SELECT [CustomerType], ROUND(AVG([PaymentDelayDays]), 1) AS [AveragePaymentDelayDays] FROM ( SELECT * FROM OTC_PaymentDelays UNION ALL SELECT * FROM Online_PaymentDelays ) AS [Combined] GROUP BY [CustomerType] ORDER BY [CustomerType];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:57:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:57:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates and compares payment delays for OTC and online customers by customer type. It computes payment delay as the difference in days between payment date and order date for OTC sales from tbl_OTCSale_GMPL and for Autofurnish orders from Autofurnish_OrderS_GMPL. The results are grouped by customer type ('OTC' or 'Online') and include average payment delay days, limited to top 1000 records."}
{"timestamp": "2025-08-05 12:57:24", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:57:24", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 12:58:57", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 12:58:57", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 12:59:09", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 12:59:09", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 12:59:09", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 12:59:10", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track payment delays categorized by customer type, specifically comparing OTC and online customers."
}"}
{"timestamp": "2025-08-05 12:59:10", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 12:59:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track payment delays categorized by customer type, specifically comparing OTC and online customers.', [{'role': 'user', 'content': 'Track payment delays categorized by customer type, specifically comparing OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 12:59:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 12:59:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query tracks payment delays by customer type, comparing OTC customers from tbl_OTCSale_GMPL and online customers from Autofurnish_OrderS_GMPL. It calculates the delay in days between order date and payment date for each customer type, considering only records where payment date is after order date. The result shows customer type and average payment delay in days, limited to top 1000 records.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TOP (1000) 'OTC' AS CustomerType, TRY_CAST(DATEDIFF(DAY, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB'), TRY_PARSE([o].[CreatedDate] AS DATE USING 'en-GB')) AS FLOAT) AS PaymentDelayDays FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_CAST([o].[CreatedDate] AS DATE) IS NOT NULL AND TRY_CAST(DATEDIFF(DAY, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB'), TRY_PARSE([o].[CreatedDate] AS DATE USING 'en-GB')) AS FLOAT) > 0 ), Online_PaymentDelays AS ( SELECT TOP (1000) 'Online' AS CustomerType, TRY_CAST(DATEDIFF(DAY, TRY_CAST([af].[Created_at] AS DATE), TRY_CAST([af].[Paid_at] AS DATE)) AS FLOAT) AS PaymentDelayDays FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST([af].[Created_at] AS DATE) IS NOT NULL AND TRY_CAST([af].[Paid_at] AS DATE) IS NOT NULL AND TRY_CAST(DATEDIFF(DAY, TRY_CAST([af].[Created_at] AS DATE), TRY_CAST([af].[Paid_at] AS DATE)) AS FLOAT) > 0 ) SELECT [CustomerType], ROUND(AVG([PaymentDelayDays]), 1) AS AveragePaymentDelayDays FROM ( SELECT [CustomerType], [PaymentDelayDays] FROM [OTC_PaymentDelays] UNION ALL SELECT [CustomerType], [PaymentDelayDays] FROM [Online_PaymentDelays] ) AS [Combined] GROUP BY [CustomerType] ORDER BY [CustomerType];",
  "error": null
}"}
{"timestamp": "2025-08-05 12:59:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 12:59:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query tracks payment delays by customer type, comparing OTC customers from tbl_OTCSale_GMPL and online customers from Autofurnish_OrderS_GMPL. It calculates the delay in days between order date and payment date for each customer type, considering only records where payment date is after order date. The result shows customer type and average payment delay in days, limited to top 1000 records."}
{"timestamp": "2025-08-05 12:59:19", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 12:59:19", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 14:00:40", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 14:00:40", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 14:19:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 14:19:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 14:19:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 14:19:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track payment delays categorized by customer type, specifically comparing OTC and online customers."
}"}
{"timestamp": "2025-08-05 14:19:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 14:19:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track payment delays categorized by customer type, specifically comparing OTC and online customers.', [{'role': 'user', 'content': 'Track payment delays categorized by customer type, specifically comparing OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 14:19:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 14:20:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query tracks payment delays by customer type, comparing OTC customers from tbl_OTCSale_GMPL and online customers from Autofurnish_OrderS_GMPL. It calculates the delay in days between order date and payment date for each order, categorizes the customer type as 'OTC' or 'Online', and selects the top 1000 records with customer name, order number, order date, payment date, delay days, and customer type.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TOP (1000) [t].[OrderNo], [t].[CustomerName], TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') AS [OrderDate], NULL AS [PaymentDate], NULL AS [PaidAt], 0 AS [DelayDays], 'OTC' AS [CustomerType] FROM [tbl_OTCSale_GMPL] AS [t] WHERE TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL ), Online_PaymentDelays AS ( SELECT TOP (1000) [af].[OrderNo], [af].[Email] AS [CustomerName], TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) AS [OrderDate], TRY_CAST(LEFT([af].[Paid_at], 10) AS DATE) AS [PaymentDate], [af].[Paid_at] AS [PaidAt], DATEDIFF(DAY, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE), TRY_CAST(LEFT([af].[Paid_at], 10) AS DATE)) AS [DelayDays], 'Online' AS [CustomerType] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) IS NOT NULL AND TRY_CAST(LEFT([af].[Paid_at], 10) AS DATE) IS NOT NULL ) SELECT TOP (1000) [OrderNo], [CustomerName], [OrderDate], [PaymentDate], [DelayDays], [CustomerType] FROM ( SELECT * FROM OTC_PaymentDelays UNION ALL SELECT * FROM Online_PaymentDelays ) AS [Combined] ORDER BY [CustomerType], [DelayDays] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-05 14:20:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 14:20:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query tracks payment delays by customer type, comparing OTC customers from tbl_OTCSale_GMPL and online customers from Autofurnish_OrderS_GMPL. It calculates the delay in days between order date and payment date for each order, categorizes the customer type as 'OTC' or 'Online', and selects the top 1000 records with customer name, order number, order date, payment date, delay days, and customer type."}
{"timestamp": "2025-08-05 14:20:11", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 14:20:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_PaymentDelays AS ( SELECT TOP (1000) [t].[OrderNo], [t].[CustomerName], TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') AS [OrderDate], NULL AS [PaymentDate], NULL AS [PaidAt], 0 AS [DelayDays], 'OTC' AS [CustomerType] FROM [tbl_OTCSale_GMPL] AS [t] WHERE TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL ), Online_PaymentDelays AS ( SELECT TOP (1000) [af].[OrderNo], [af].[Email] AS [CustomerName], TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) AS [OrderDate], TRY_CAST(LEFT([af].[Paid_at], 10) AS DATE) AS [PaymentDate], [af].[Paid_at] AS [PaidAt], DATEDIFF(DAY, TRY_CAST(LEFT([af].[Created_at], 10) AS DATE), TRY_CAST(LEFT([af].[Paid_at], 10) AS DATE)) AS [DelayDays], 'Online' AS [CustomerType] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) IS NOT NULL AND TRY_CAST(LEFT([af].[Paid_at], 10) AS DATE) IS NOT NULL ) SELECT TOP (1000) [OrderNo], [CustomerName], [OrderDate], [PaymentDate], [DelayDays], [CustomerType] FROM ( SELECT * FROM OTC_PaymentDelays UNION ALL SELECT * FROM Online_PaymentDelays ) AS [Combined] ORDER BY [CustomerType], [DelayDays] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB98E7BD0>"}
{"timestamp": "2025-08-05 14:21:23", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 14:21:23", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 14:21:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online), section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 14:21:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 14:21:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 14:21:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers."
}"}
{"timestamp": "2025-08-05 14:21:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 14:21:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers.', [{'role': 'user', 'content': 'Track and compare payment delays categorized by customer type, specifically distinguishing between OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 14:21:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 14:21:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates and compares payment delays for OTC and online customers by customer type. It computes the delay in days between order date and payment date for OTC sales from tbl_OTCSale_GMPL and for Autofurnish orders from Autofurnish_OrderS_GMPL. The results are grouped by customer type ('OTC' or 'Online') and include average payment delay days, limited to top 1000 records.",
  "query": "WITH OTC_PaymentDelays AS ( SELECT TOP (1000) 'OTC' AS [CustomerType], TRY_CAST(DATEDIFF(DAY, TRY_PARSE([tots].[OrderDate] AS DATE USING 'en-GB'), TRY_PARSE([tots].[CreatedDate] AS DATE USING 'en-GB')) AS FLOAT) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS [tots] WHERE TRY_PARSE([tots].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([tots].[CreatedDate] AS DATE USING 'en-GB') IS NOT NULL ), Online_PaymentDelays AS ( SELECT TOP (1000) 'Online' AS [CustomerType], TRY_CAST(DATEDIFF(DAY, TRY_CAST([af].[Created_at] AS DATE), TRY_CAST([af].[Paid_at] AS DATE)) AS FLOAT) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST([af].[Created_at] AS DATE) IS NOT NULL AND TRY_CAST([af].[Paid_at] AS DATE) IS NOT NULL ) SELECT TOP (1000) [CustomerType], ROUND(AVG([PaymentDelayDays]), 1) AS [AvgPaymentDelayDays] FROM ( SELECT * FROM OTC_PaymentDelays UNION ALL SELECT * FROM Online_PaymentDelays ) AS [Combined] GROUP BY [CustomerType] ORDER BY [CustomerType];",
  "error": null
}"}
{"timestamp": "2025-08-05 14:21:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 14:21:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates and compares payment delays for OTC and online customers by customer type. It computes the delay in days between order date and payment date for OTC sales from tbl_OTCSale_GMPL and for Autofurnish orders from Autofurnish_OrderS_GMPL. The results are grouped by customer type ('OTC' or 'Online') and include average payment delay days, limited to top 1000 records."}
{"timestamp": "2025-08-05 14:21:39", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 14:21:39", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-05 15:04:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:04:09", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 15:04:11", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 15:04:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 15:04:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 15:04:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have no recorded sales."
}"}
{"timestamp": "2025-08-05 15:04:13", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 15:04:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have no recorded sales.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have no recorded sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 15:04:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 15:04:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 15:04:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that have inventory records but no recorded sales in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id = tbl_OTCSale_GMPL.ProductID. It filters for products where no sales record exists (tbl_OTCSale_GMPL.OTCID IS NULL). The output includes the product SKU and ProductName.",
  "query": "SELECT TOP (1000) p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON p.[Id] = o.[ProductID] WHERE o.[OTCID] IS NULL GROUP BY p.[SKU], p.[ProductName]",
  "error": null
}"}
{"timestamp": "2025-08-05 15:04:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 15:04:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that have inventory records but no recorded sales in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id = tbl_OTCSale_GMPL.ProductID. It filters for products where no sales record exists (tbl_OTCSale_GMPL.OTCID IS NULL). The output includes the product SKU and ProductName."}
{"timestamp": "2025-08-05 15:04:17", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 15:04:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON p.[Id] = o.[ProductID] WHERE o.[OTCID] IS NULL GROUP BY p.[SKU], p.[ProductName] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB98E72A0>"}
{"timestamp": "2025-08-05 15:06:33", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:06:34", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 15:08:51", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 15:08:51", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 15:08:51", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 15:08:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have not been sold."
}"}
{"timestamp": "2025-08-05 15:08:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 15:08:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have not been sold.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have not been sold.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 15:08:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 15:08:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 15:08:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that have inventory records but have not been sold in any OTC sales, Amazon sales, or Autofurnish orders. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductID and ProductMaster_AL.Id, left joins tbl_Amazon_GMPL on SKU, and left joins af_orderitems_GMPL on Lineitem_sku. It filters for products where there are no matching sales records in any of these sales tables. The output includes the product SKU and product name.",
  "query": "SELECT TOP (1000) p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON p.[Id] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] AS a ON p.[SKU] = a.[SKU] LEFT JOIN [af_orderitems_GMPL] AS af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]",
  "error": null
}"}
{"timestamp": "2025-08-05 15:08:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 15:08:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that have inventory records but have not been sold in any OTC sales, Amazon sales, or Autofurnish orders. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductID and ProductMaster_AL.Id, left joins tbl_Amazon_GMPL on SKU, and left joins af_orderitems_GMPL on Lineitem_sku. It filters for products where there are no matching sales records in any of these sales tables. The output includes the product SKU and product name."}
{"timestamp": "2025-08-05 15:08:57", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 15:08:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON p.[Id] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] AS a ON p.[SKU] = a.[SKU] LEFT JOIN [af_orderitems_GMPL] AS af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000020EB98E7D90>"}
{"timestamp": "2025-08-05 15:10:34", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:10:42", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 15:10:43", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 15:10:43", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 15:10:43", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 15:10:45", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 15:10:52", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 15:10:53", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 15:10:53", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 15:10:54", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 15:10:55", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 15:11:22", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 15:11:24", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 15:11:24", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 15:11:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have no associated sales records."
}"}
{"timestamp": "2025-08-05 15:11:25", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 15:11:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have no associated sales records.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have no associated sales records.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 15:11:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 15:11:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 15:11:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that have inventory records but no associated sales records in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id and tbl_OTCSale_GMPL.ProductID. It filters for products where no sales record exists (tbl_OTCSale_GMPL.OTCID IS NULL). The output includes the product SKU and ProductName.",
  "query": "SELECT TOP (1000) p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS s ON p.[Id] = s.[ProductID] WHERE s.[OTCID] IS NULL GROUP BY p.[SKU], p.[ProductName]",
  "error": null
}"}
{"timestamp": "2025-08-05 15:11:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 15:11:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that have inventory records but no associated sales records in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id and tbl_OTCSale_GMPL.ProductID. It filters for products where no sales record exists (tbl_OTCSale_GMPL.OTCID IS NULL). The output includes the product SKU and ProductName."}
{"timestamp": "2025-08-05 15:11:30", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 15:11:33", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS s ON p.[Id] = s.[ProductID] WHERE s.[OTCID] IS NULL GROUP BY p.[SKU], p.[ProductName] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001DA17205D30>"}
{"timestamp": "2025-08-05 15:11:44", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:11:44", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 15:17:10", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-05 15:17:12", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-05 15:17:12", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-05 15:17:13", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-05 15:17:13", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-05 15:17:24", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:17:25", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 15:17:31", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:17:31", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 15:18:01", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products that are in inventory but have not been sold., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 15:18:01", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-05 15:18:01", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 15:18:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are currently in inventory but have no recorded sales."
}"}
{"timestamp": "2025-08-05 15:18:02", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 15:18:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are currently in inventory but have no recorded sales.', [{'role': 'user', 'content': 'Identify products that are currently in inventory but have no recorded sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 15:18:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 15:18:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 15:18:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that have inventory records but no recorded sales in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id = tbl_OTCSale_GMPL.ProductID. It filters for products where no sales record exists (tbl_OTCSale_GMPL.ProductID IS NULL). The output includes the product SKU, MSKU, and ProductName.",
  "query": "SELECT TOP (1000) [p].[SKU], [p].[MSKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] INNER JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS [o] ON [p].[Id] = [o].[ProductID] WHERE [o].[ProductID] IS NULL;",
  "error": null
}"}
{"timestamp": "2025-08-05 15:18:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 15:18:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that have inventory records but no recorded sales in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, then left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id = tbl_OTCSale_GMPL.ProductID. It filters for products where no sales record exists (tbl_OTCSale_GMPL.ProductID IS NULL). The output includes the product SKU, MSKU, and ProductName."}
{"timestamp": "2025-08-05 15:18:09", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 15:18:11", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [p].[SKU], [p].[MSKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] INNER JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS [o] ON [p].[Id] = [o].[ProductID] WHERE [o].[ProductID] IS NULL; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022655D5FD90>"}
{"timestamp": "2025-08-05 15:36:28", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: give me distinct product in inventory, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 15:36:28", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that are currently in inventory but have no recorded sales."}
{"timestamp": "2025-08-05 15:36:28", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 15:36:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Identify distinct products that are currently in inventory but have no recorded sales."
}"}
{"timestamp": "2025-08-05 15:36:29", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 15:36:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify distinct products that are currently in inventory but have no recorded sales.', [{'role': 'user', 'content': 'Identify distinct products that are currently in inventory but have no recorded sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 15:36:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 15:36:30", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-05 15:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves distinct products that are currently present in inventory but have no recorded sales in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id to ProductID, and filters for products where no sales exist. The output includes the distinct SKU and ProductName of such products.",
  "query": "SELECT DISTINCT [p].[SKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS [o] ON [p].[Id] = [o].[ProductID] WHERE [o].[OTCID] IS NULL;",
  "error": null
}"}
{"timestamp": "2025-08-05 15:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 15:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves distinct products that are currently present in inventory but have no recorded sales in the tbl_OTCSale_GMPL table. It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU, left joins tbl_OTCSale_GMPL on ProductMaster_AL.Id to ProductID, and filters for products where no sales exist. The output includes the distinct SKU and ProductName of such products."}
{"timestamp": "2025-08-05 15:36:35", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 15:36:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT DISTINCT [p].[SKU], [p].[ProductName] FROM [ProductMaster_AL] AS [p] JOIN [InventoryDetail_GMPL] AS [i] ON [p].[MSKU] = [i].[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS [o] ON [p].[Id] = [o].[ProductID] WHERE [o].[OTCID] IS NULL; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022655D5FE70>"}
{"timestamp": "2025-08-05 15:37:00", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: and of top 5 only, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-05 15:37:00", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify distinct products that are currently in inventory but have no recorded sales."}
{"timestamp": "2025-08-05 15:37:00", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-05 15:37:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the top 5 distinct products that are currently in inventory but have no recorded sales."
}"}
{"timestamp": "2025-08-05 15:37:01", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-05 15:37:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the top 5 distinct products that are currently in inventory but have no recorded sales.', [{'role': 'user', 'content': 'Identify the top 5 distinct products that are currently in inventory but have no recorded sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-05 15:37:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-05 15:37:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-05 15:37:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 5 distinct products that are currently in inventory but have no recorded sales in any of the sales channels (OTC, Amazon, Autofurnish). It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU to find products in inventory, then left joins tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL to check for sales records. It filters for products where no sales exist in these tables and selects the SKU and ProductName, limiting the result to 5.",
  "query": "SELECT TOP 5 p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON p.[Id] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] AS a ON p.[SKU] = a.[SKU] LEFT JOIN [af_orderitems_GMPL] AS af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]",
  "error": null
}"}
{"timestamp": "2025-08-05 15:37:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-05 15:37:07", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 5 distinct products that are currently in inventory but have no recorded sales in any of the sales channels (OTC, Amazon, Autofurnish). It joins ProductMaster_AL with InventoryDetail_GMPL on MSKU to find products in inventory, then left joins tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL to check for sales records. It filters for products where no sales exist in these tables and selects the SKU and ProductName, limiting the result to 5."}
{"timestamp": "2025-08-05 15:37:07", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-05 15:37:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 5 p.[SKU], p.[ProductName] FROM [ProductMaster_AL] AS p JOIN [InventoryDetail_GMPL] AS i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON p.[Id] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] AS a ON p.[SKU] = a.[SKU] LEFT JOIN [af_orderitems_GMPL] AS af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000226589D7380>"}
{"timestamp": "2025-08-05 15:37:42", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-05 15:37:45", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-05 15:37:45", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 09:28:28", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-06 09:28:34", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-06 09:28:34", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-06 09:28:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-06 09:28:41", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-06 10:23:05", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-06 10:23:06", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-06 10:23:06", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-06 10:23:06", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-06 10:23:06", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-06 10:33:59", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 10:34:01", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 10:34:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 10:34:10", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 10:35:08", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track customer acquisition cost by marketing channel., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 10:35:08", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 10:35:08", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 10:35:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate and track the customer acquisition cost segmented by each marketing channel."
}"}
{"timestamp": "2025-08-06 10:35:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 10:35:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate and track the customer acquisition cost segmented by each marketing channel.', [{'role': 'user', 'content': 'Calculate and track the customer acquisition cost segmented by each marketing channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 10:35:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 10:35:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 10:35:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the customer acquisition cost (CAC) segmented by each marketing channel. It aggregates the total order amount and counts distinct customers from the Autofurnish orders grouped by the Payment_Method as the marketing channel. The CAC is computed as the total amount divided by the number of distinct customers. The query selects the top 1000 marketing channels with their total amount, distinct customer count, and calculated CAC.",
  "query": "WITH CustomerOrders AS ( SELECT [af].[Payment_Method] AS [MarketingChannel], SUM(TRY_CAST([af].[Total] AS FLOAT)) AS [TotalAmount], COUNT(DISTINCT [af].[Email]) AS [DistinctCustomers] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Payment_Method] IS NOT NULL AND [af].[Email] IS NOT NULL GROUP BY [af].[Payment_Method] ) SELECT TOP 1000 [MarketingChannel], ROUND([TotalAmount], 1) AS [TotalAmount], [DistinctCustomers], ROUND(COALESCE([TotalAmount], 0) / NULLIF([DistinctCustomers], 0), 1) AS [CustomerAcquisitionCost] FROM [CustomerOrders] ORDER BY [CustomerAcquisitionCost] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 10:35:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 10:35:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the customer acquisition cost (CAC) segmented by each marketing channel. It aggregates the total order amount and counts distinct customers from the Autofurnish orders grouped by the Payment_Method as the marketing channel. The CAC is computed as the total amount divided by the number of distinct customers. The query selects the top 1000 marketing channels with their total amount, distinct customer count, and calculated CAC."}
{"timestamp": "2025-08-06 10:35:19", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 10:35:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH CustomerOrders AS ( SELECT [af].[Payment_Method] AS [MarketingChannel], SUM(TRY_CAST([af].[Total] AS FLOAT)) AS [TotalAmount], COUNT(DISTINCT [af].[Email]) AS [DistinctCustomers] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Payment_Method] IS NOT NULL AND [af].[Email] IS NOT NULL GROUP BY [af].[Payment_Method] ) SELECT TOP 1000 [MarketingChannel], ROUND([TotalAmount], 1) AS [TotalAmount], [DistinctCustomers], ROUND(COALESCE([TotalAmount], 0) / NULLIF([DistinctCustomers], 0), 1) AS [CustomerAcquisitionCost] FROM [CustomerOrders] ORDER BY [CustomerAcquisitionCost] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000021D8928BF50>"}
{"timestamp": "2025-08-06 10:36:15", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify products frequently bought together., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 10:36:15", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Calculate and track the customer acquisition cost segmented by each marketing channel."}
{"timestamp": "2025-08-06 10:36:15", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 10:36:18", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that are frequently bought together, considering customer purchase patterns."
}"}
{"timestamp": "2025-08-06 10:36:18", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 10:36:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that are frequently bought together, considering customer purchase patterns.', [{'role': 'user', 'content': 'Identify products that are frequently bought together, considering customer purchase patterns.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 10:36:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 10:36:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 10:36:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies pairs of products frequently bought together by the same customer in the tbl_OTCSale_GMPL table. It joins the table to itself on matching CustomerName and InvoiceNo to find product pairs within the same order, excluding pairs of the same product. It counts the number of occurrences of each product pair and orders the results by frequency descending, showing the top 1000 pairs with their product IDs and the count of co-purchases.",
  "query": "SELECT TOP 1000 o1.[ProductID] AS ProductID1, o2.[ProductID] AS ProductID2, COUNT(*) AS PurchaseCount FROM [tbl_OTCSale_GMPL] AS o1 JOIN [tbl_OTCSale_GMPL] AS o2 ON o1.[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = o2.[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS AND o1.[InvoiceNo] = o2.[InvoiceNo] WHERE o1.[ProductID] IS NOT NULL AND o2.[ProductID] IS NOT NULL AND o1.[ProductID] <> o2.[ProductID] GROUP BY o1.[ProductID], o2.[ProductID] ORDER BY PurchaseCount DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 10:36:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 10:36:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies pairs of products frequently bought together by the same customer in the tbl_OTCSale_GMPL table. It joins the table to itself on matching CustomerName and InvoiceNo to find product pairs within the same order, excluding pairs of the same product. It counts the number of occurrences of each product pair and orders the results by frequency descending, showing the top 1000 pairs with their product IDs and the count of co-purchases."}
{"timestamp": "2025-08-06 10:36:23", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 10:40:38", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-06 10:40:40", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-06 10:40:40", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-06 10:40:42", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-06 10:40:43", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-06 10:41:42", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 10:41:43", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 10:42:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Track payment delays by customer type (OTC vs online)., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 10:42:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 10:42:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 10:42:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Track payment delays categorized by customer type, specifically comparing OTC and online customers."
}"}
{"timestamp": "2025-08-06 10:42:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 10:42:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Track payment delays categorized by customer type, specifically comparing OTC and online customers.', [{'role': 'user', 'content': 'Track payment delays categorized by customer type, specifically comparing OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 10:42:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 10:42:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates payment delays for OTC and online customers by categorizing them into 'OTC' and 'Online' customer types. It extracts order dates and payment dates from tbl_OTCSale_GMPL for OTC customers and from Autofurnish_OrderS_GMPL for online customers, converting date strings to DATE type. It computes the delay in days between order and payment dates, and outputs the top 1000 records with customer type, order number, customer name, order date, payment date, and payment delay days.",
  "query": "WITH OTC_Payments AS ( SELECT TOP (1000) 'OTC' AS [CustomerType], [t].[OrderNo], [t].[CustomerName], TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') AS [OrderDate], TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') AS [PaymentDate], DATEDIFF(DAY, TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB'), TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB')) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS [t] LEFT JOIN [Autofurnish_OrderS_GMPL] AS [af] ON [t].[OrderNo] = [af].[OrderNo] WHERE TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') IS NOT NULL ), Online_Payments AS ( SELECT TOP (1000) 'Online' AS [CustomerType], [af].[OrderNo], [af].[Billing_Name] AS [CustomerName], TRY_PARSE([af].[Created_at] AS DATE USING 'en-GB') AS [OrderDate], TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') AS [PaymentDate], DATEDIFF(DAY, TRY_PARSE([af].[Created_at] AS DATE USING 'en-GB'), TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB')) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_PARSE([af].[Created_at] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') IS NOT NULL ) SELECT TOP (1000) [CustomerType], [OrderNo], [CustomerName], [OrderDate], [PaymentDate], [PaymentDelayDays] FROM ( SELECT * FROM OTC_Payments UNION ALL SELECT * FROM Online_Payments ) AS [Combined] ORDER BY [CustomerType], [PaymentDelayDays] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 10:42:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 10:42:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates payment delays for OTC and online customers by categorizing them into 'OTC' and 'Online' customer types. It extracts order dates and payment dates from tbl_OTCSale_GMPL for OTC customers and from Autofurnish_OrderS_GMPL for online customers, converting date strings to DATE type. It computes the delay in days between order and payment dates, and outputs the top 1000 records with customer type, order number, customer name, order date, payment date, and payment delay days."}
{"timestamp": "2025-08-06 10:42:23", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 10:42:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Payments AS ( SELECT TOP (1000) 'OTC' AS [CustomerType], [t].[OrderNo], [t].[CustomerName], TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') AS [OrderDate], TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') AS [PaymentDate], DATEDIFF(DAY, TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB'), TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB')) AS [PaymentDelayDays] FROM [tbl_OTCSale_GMPL] AS [t] LEFT JOIN [Autofurnish_OrderS_GMPL] AS [af] ON [t].[OrderNo] = [af].[OrderNo] WHERE TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') IS NOT NULL ), Online_Payments AS ( SELECT TOP (1000) 'Online' AS [CustomerType], [af].[OrderNo], [af].[Billing_Name] AS [CustomerName], TRY_PARSE([af].[Created_at] AS DATE USING 'en-GB') AS [OrderDate], TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') AS [PaymentDate], DATEDIFF(DAY, TRY_PARSE([af].[Created_at] AS DATE USING 'en-GB'), TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB')) AS [PaymentDelayDays] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_PARSE([af].[Created_at] AS DATE USING 'en-GB') IS NOT NULL AND TRY_PARSE([af].[Paid_at] AS DATE USING 'en-GB') IS NOT NULL ) SELECT TOP (1000) [CustomerType], [OrderNo], [CustomerName], [OrderDate], [PaymentDate], [PaymentDelayDays] FROM ( SELECT * FROM OTC_Payments UNION ALL SELECT * FROM Online_Payments ) AS [Combined] ORDER BY [CustomerType], [PaymentDelayDays] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7F91780>"}
{"timestamp": "2025-08-06 10:53:44", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show fulfillment time differences between sales channels., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 10:53:45", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Track payment delays categorized by customer type, specifically comparing OTC and online customers."}
{"timestamp": "2025-08-06 10:53:45", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 10:53:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Compare fulfillment time differences between sales channels, specifically between OTC and online customers."
}"}
{"timestamp": "2025-08-06 10:53:46", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 10:53:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Compare fulfillment time differences between sales channels, specifically between OTC and online customers.', [{'role': 'user', 'content': 'Compare fulfillment time differences between sales channels, specifically between OTC and online customers.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 10:53:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 10:53:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 10:53:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query compares the average fulfillment time in days between OTC sales and online Autofurnish orders. It calculates fulfillment time as the difference between order creation and fulfillment dates. The OTC fulfillment time is computed by converting the OrderDate from 'dd/MM/yyyy' string to date and comparing with CreatedDate. The Autofurnish fulfillment time is computed by converting Created_at and Fulfilled_at strings to datetime. The query aggregates average fulfillment times per channel and outputs the channel name and average fulfillment time rounded to 1 decimal place.",
  "query": "WITH OTC_Fulfillment AS ( SELECT TOP 1000 TRY_CAST(DATEDIFF(DAY, TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB'), [t].[CreatedDate]) AS FLOAT) AS FulfillmentDays FROM [tbl_OTCSale_GMPL] AS [t] WHERE TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND [t].[CreatedDate] IS NOT NULL ), Autofurnish_Fulfillment AS ( SELECT TOP 1000 TRY_CAST(DATEDIFF(DAY, TRY_CAST([af].[Created_at] AS DATETIME), TRY_CAST([af].[Fulfilled_at] AS DATETIME)) AS FLOAT) AS FulfillmentDays FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST([af].[Created_at] AS DATETIME) IS NOT NULL AND TRY_CAST([af].[Fulfilled_at] AS DATETIME) IS NOT NULL ) SELECT 'OTC' AS SalesChannel, ROUND(AVG([FulfillmentDays]), 1) AS AverageFulfillmentDays FROM OTC_Fulfillment UNION ALL SELECT 'Autofurnish' AS SalesChannel, ROUND(AVG([FulfillmentDays]), 1) AS AverageFulfillmentDays FROM Autofurnish_Fulfillment;",
  "error": null
}"}
{"timestamp": "2025-08-06 10:53:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 10:53:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query compares the average fulfillment time in days between OTC sales and online Autofurnish orders. It calculates fulfillment time as the difference between order creation and fulfillment dates. The OTC fulfillment time is computed by converting the OrderDate from 'dd/MM/yyyy' string to date and comparing with CreatedDate. The Autofurnish fulfillment time is computed by converting Created_at and Fulfilled_at strings to datetime. The query aggregates average fulfillment times per channel and outputs the channel name and average fulfillment time rounded to 1 decimal place."}
{"timestamp": "2025-08-06 10:53:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 10:53:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Fulfillment AS ( SELECT TOP 1000 TRY_CAST(DATEDIFF(DAY, TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB'), [t].[CreatedDate]) AS FLOAT) AS FulfillmentDays FROM [tbl_OTCSale_GMPL] AS [t] WHERE TRY_PARSE([t].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL AND [t].[CreatedDate] IS NOT NULL ), Autofurnish_Fulfillment AS ( SELECT TOP 1000 TRY_CAST(DATEDIFF(DAY, TRY_CAST([af].[Created_at] AS DATETIME), TRY_CAST([af].[Fulfilled_at] AS DATETIME)) AS FLOAT) AS FulfillmentDays FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST([af].[Created_at] AS DATETIME) IS NOT NULL AND TRY_CAST([af].[Fulfilled_at] AS DATETIME) IS NOT NULL ) SELECT 'OTC' AS SalesChannel, ROUND(AVG([FulfillmentDays]), 1) AS AverageFulfillmentDays FROM OTC_Fulfillment UNION ALL SELECT 'Autofurnish' AS SalesChannel, ROUND(AVG([FulfillmentDays]), 1) AS AverageFulfillmentDays FROM Autofurnish_Fulfillment; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7ED5320>"}
{"timestamp": "2025-08-06 12:41:14", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 12:41:14", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 12:41:18", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show monthly sales trends by product category across all channels, comparing current year vs previous year, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 12:41:18", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 12:41:18", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:41:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the monthly sales trends by product category across all sales channels, comparing the current year versus the previous year."
}"}
{"timestamp": "2025-08-06 12:41:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:41:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the monthly sales trends by product category across all sales channels, comparing the current year versus the previous year.', [{'role': 'user', 'content': 'Display the monthly sales trends by product category across all sales channels, comparing the current year versus the previous year.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 12:41:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:41:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]
"}
{"timestamp": "2025-08-06 12:41:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates monthly sales trends by product category across all sales channels (OTC, Amazon, Autofurnish) for the current and previous calendar years. It aggregates total sales amount by product category and month, using TRY_PARSE to convert string dates and TRY_CAST for numeric safety. The results include month, month start date, product category, sales channel, year, and total sales, ordered chronologically and by category and channel.",
  "query": "WITH OTC_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0) AS [_Month_Start], p.[Category1], 'OTC' AS [Channel], YEAR(TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')) AS [Year], SUM(ROUND(TRY_CAST([tO].[Amount] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_OTCSale_GMPL] AS [tO] INNER JOIN [ProductMaster_AL] AS [p] ON [tO].[ProductID] = [p].[Id] WHERE TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB') >= DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1) AND TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB') < DATEFROMPARTS(YEAR(GETDATE()) + 1, 1, 1) GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0), p.[Category1], YEAR(TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')) ), Amazon_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) AS [_Month_Start], p.[Category1], 'Amazon' AS [Channel], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) AS [Year], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_Amazon_GMPL] AS [tA] INNER JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) >= DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1) AND TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) < DATEFROMPARTS(YEAR(GETDATE()) + 1, 1, 1) GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) ), Autofurnish_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) AS [_Month_Start], p.[Category1], 'Autofurnish' AS [Channel], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) AS [Year], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales] FROM [Autofurnish_OrderS_GMPL] AS [tAF] INNER JOIN [AF_Orderitems_GMPL] AS [afoi] ON [tAF].[OrderNo] = [afoi].[AFOrderId] INNER JOIN [ProductMaster_AL] AS [p] ON [afoi].[Lineitem_sku] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) >= DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1) AND TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) < DATEFROMPARTS(YEAR(GETDATE()) + 1, 1, 1) GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) ) SELECT TOP (1000) [Month], [_Month_Start], [Category1], [Channel], [Year], SUM([TotalSales]) AS [TotalSales] FROM ( SELECT [Month], [_Month_Start], [Category1], [Channel], [Year], [TotalSales] FROM OTC_Sales UNION ALL SELECT [Month], [_Month_Start], [Category1], [Channel], [Year], [TotalSales] FROM Amazon_Sales UNION ALL SELECT [Month], [_Month_Start], [Category1], [Channel], [Year], [TotalSales] FROM Autofurnish_Sales ) AS [AllSales] GROUP BY [Month], [_Month_Start], [Category1], [Channel], [Year] ORDER BY [_Month_Start], [Category1], [Channel], [Year]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-06 12:41:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:41:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates monthly sales trends by product category across all sales channels (OTC, Amazon, Autofurnish) for the current and previous calendar years. It aggregates total sales amount by product category and month, using TRY_PARSE to convert string dates and TRY_CAST for numeric safety. The results include month, month start date, product category, sales channel, year, and total sales, ordered chronologically and by category and channel."}
{"timestamp": "2025-08-06 12:41:43", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:41:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0) AS [_Month_Start], p.[Category1], 'OTC' AS [Channel], YEAR(TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')) AS [Year], SUM(ROUND(TRY_CAST([tO].[Amount] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_OTCSale_GMPL] AS [tO] INNER JOIN [ProductMaster_AL] AS [p] ON [tO].[ProductID] = [p].[Id] WHERE TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB') >= DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1) AND TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB') < DATEFROMPARTS(YEAR(GETDATE()) + 1, 1, 1) GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')), 0), p.[Category1], YEAR(TRY_PARSE([tO].[OrderDate] AS DATE USING 'en-GB')) ), Amazon_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) AS [_Month_Start], p.[Category1], 'Amazon' AS [Channel], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) AS [Year], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_Amazon_GMPL] AS [tA] INNER JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) >= DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1) AND TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) < DATEFROMPARTS(YEAR(GETDATE()) + 1, 1, 1) GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) ), Autofurnish_Sales AS ( SELECT FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) AS [_Month_Start], p.[Category1], 'Autofurnish' AS [Channel], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) AS [Year], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales] FROM [Autofurnish_OrderS_GMPL] AS [tAF] INNER JOIN [AF_Orderitems_GMPL] AS [afoi] ON [tAF].[OrderNo] = [afoi].[AFOrderId] INNER JOIN [ProductMaster_AL] AS [p] ON [afoi].[Lineitem_sku] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) >= DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1) AND TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) < DATEFROMPARTS(YEAR(GETDATE()) + 1, 1, 1) GROUP BY FORMAT(DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) ) SELECT TOP (1000) [Month], [_Month_Start], [Category1], [Channel], [Year], SUM([TotalSales]) AS [TotalSales] FROM ( SELECT [Month], [_Month_Start], [Category1], [Channel], [Year], [TotalSales] FROM OTC_Sales UNION ALL SELECT [Month], [_Month_Start], [Category1], [Channel], [Year], [TotalSales] FROM Amazon_Sales UNION ALL SELECT [Month], [_Month_Start], [Category1], [Channel], [Year], [TotalSales] FROM Autofurnish_Sales ) AS [AllSales] GROUP BY [Month], [_Month_Start], [Category1], [Channel], [Year] ORDER BY [_Month_Start], [Category1], [Channel], [Year] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7F92430>"}
{"timestamp": "2025-08-06 12:43:21", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify products with declining sales velocity (over 50% drop in monthly sales for last 3 consecutive months, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 12:43:22", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 12:43:22", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:43:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that have experienced a decline in sales velocity, defined as over a 50% drop in monthly sales for the last 3 consecutive months."
}"}
{"timestamp": "2025-08-06 12:43:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:43:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that have experienced a decline in sales velocity, defined as over a 50% drop in monthly sales for the last 3 consecutive months.', [{'role': 'user', 'content': 'Identify products that have experienced a decline in sales velocity, defined as over a 50% drop in monthly sales for the last 3 consecutive months.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 12:43:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:43:25", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 12:43:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products with a monthly sales quantity decline of over 50% for the last 3 consecutive months. It calculates monthly sales quantities from tbl_OTCSale_GMPL by converting OrderDate from 'dd/MM/yyyy' string to date, groups by product and month, and uses LAG window functions to compare current month sales with previous months. It filters for products where each of the last 3 months had more than 50% drop compared to the previous month. The output includes ProductID, month, monthly quantity, and percentage drops for the last 3 months.",
  "query": "WITH MonthlySales AS ( SELECT TOP (1000) TRY_CAST([o].[ProductID] AS INT) AS [ProductID], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB')), 0) AS [MonthStart], SUM(TRY_CAST([o].[Quantity] AS FLOAT)) AS [MonthlyQuantity] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL GROUP BY TRY_CAST([o].[ProductID] AS INT), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB')), 0) ), SalesWithLag AS ( SELECT [ProductID], [MonthStart], [MonthlyQuantity], LAG([MonthlyQuantity], 1) OVER (PARTITION BY [ProductID] ORDER BY [MonthStart]) AS [PrevMonth1], LAG([MonthlyQuantity], 2) OVER (PARTITION BY [ProductID] ORDER BY [MonthStart]) AS [PrevMonth2], LAG([MonthlyQuantity], 3) OVER (PARTITION BY [ProductID] ORDER BY [MonthStart]) AS [PrevMonth3] FROM MonthlySales ), SalesWithDrop AS ( SELECT [ProductID], [MonthStart], [MonthlyQuantity], [PrevMonth1], [PrevMonth2], [PrevMonth3], CASE WHEN [PrevMonth1] > 0 THEN CONCAT(ROUND(((TRY_CAST([MonthlyQuantity] AS FLOAT) - TRY_CAST([PrevMonth1] AS FLOAT)) * 100.0) / NULLIF(TRY_CAST([PrevMonth1] AS FLOAT), 0), 1), '%') ELSE 'None' END AS [DropPct1], CASE WHEN [PrevMonth2] > 0 THEN CONCAT(ROUND(((TRY_CAST([PrevMonth1] AS FLOAT) - TRY_CAST([PrevMonth2] AS FLOAT)) * 100.0) / NULLIF(TRY_CAST([PrevMonth2] AS FLOAT), 0), 1), '%') ELSE 'None' END AS [DropPct2], CASE WHEN [PrevMonth3] > 0 THEN CONCAT(ROUND(((TRY_CAST([PrevMonth2] AS FLOAT) - TRY_CAST([PrevMonth3] AS FLOAT)) * 100.0) / NULLIF(TRY_CAST([PrevMonth3] AS FLOAT), 0), 1), '%') ELSE 'None' END AS [DropPct3] FROM SalesWithLag ) SELECT TOP (1000) [ProductID], [MonthStart], [MonthlyQuantity], [DropPct1], [DropPct2], [DropPct3] FROM SalesWithDrop WHERE TRY_CAST([MonthlyQuantity] AS FLOAT) < TRY_CAST([PrevMonth1] AS FLOAT) * 0.5 AND TRY_CAST([PrevMonth1] AS FLOAT) < TRY_CAST([PrevMonth2] AS FLOAT) * 0.5 AND TRY_CAST([PrevMonth2] AS FLOAT) < TRY_CAST([PrevMonth3] AS FLOAT) * 0.5 ORDER BY [ProductID], [MonthStart] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 12:43:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:43:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products with a monthly sales quantity decline of over 50% for the last 3 consecutive months. It calculates monthly sales quantities from tbl_OTCSale_GMPL by converting OrderDate from 'dd/MM/yyyy' string to date, groups by product and month, and uses LAG window functions to compare current month sales with previous months. It filters for products where each of the last 3 months had more than 50% drop compared to the previous month. The output includes ProductID, month, monthly quantity, and percentage drops for the last 3 months."}
{"timestamp": "2025-08-06 12:43:35", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:43:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH MonthlySales AS ( SELECT TOP (1000) TRY_CAST([o].[ProductID] AS INT) AS [ProductID], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB')), 0) AS [MonthStart], SUM(TRY_CAST([o].[Quantity] AS FLOAT)) AS [MonthlyQuantity] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL GROUP BY TRY_CAST([o].[ProductID] AS INT), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB')), 0) ), SalesWithLag AS ( SELECT [ProductID], [MonthStart], [MonthlyQuantity], LAG([MonthlyQuantity], 1) OVER (PARTITION BY [ProductID] ORDER BY [MonthStart]) AS [PrevMonth1], LAG([MonthlyQuantity], 2) OVER (PARTITION BY [ProductID] ORDER BY [MonthStart]) AS [PrevMonth2], LAG([MonthlyQuantity], 3) OVER (PARTITION BY [ProductID] ORDER BY [MonthStart]) AS [PrevMonth3] FROM MonthlySales ), SalesWithDrop AS ( SELECT [ProductID], [MonthStart], [MonthlyQuantity], [PrevMonth1], [PrevMonth2], [PrevMonth3], CASE WHEN [PrevMonth1] > 0 THEN CONCAT(ROUND(((TRY_CAST([MonthlyQuantity] AS FLOAT) - TRY_CAST([PrevMonth1] AS FLOAT)) * 100.0) / NULLIF(TRY_CAST([PrevMonth1] AS FLOAT), 0), 1), '%') ELSE 'None' END AS [DropPct1], CASE WHEN [PrevMonth2] > 0 THEN CONCAT(ROUND(((TRY_CAST([PrevMonth1] AS FLOAT) - TRY_CAST([PrevMonth2] AS FLOAT)) * 100.0) / NULLIF(TRY_CAST([PrevMonth2] AS FLOAT), 0), 1), '%') ELSE 'None' END AS [DropPct2], CASE WHEN [PrevMonth3] > 0 THEN CONCAT(ROUND(((TRY_CAST([PrevMonth2] AS FLOAT) - TRY_CAST([PrevMonth3] AS FLOAT)) * 100.0) / NULLIF(TRY_CAST([PrevMonth3] AS FLOAT), 0), 1), '%') ELSE 'None' END AS [DropPct3] FROM SalesWithLag ) SELECT TOP (1000) [ProductID], [MonthStart], [MonthlyQuantity], [DropPct1], [DropPct2], [DropPct3] FROM SalesWithDrop WHERE TRY_CAST([MonthlyQuantity] AS FLOAT) < TRY_CAST([PrevMonth1] AS FLOAT) * 0.5 AND TRY_CAST([PrevMonth1] AS FLOAT) < TRY_CAST([PrevMonth2] AS FLOAT) * 0.5 AND TRY_CAST([PrevMonth2] AS FLOAT) < TRY_CAST([PrevMonth3] AS FLOAT) * 0.5 ORDER BY [ProductID], [MonthStart] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B8C1BBD0>"}
{"timestamp": "2025-08-06 12:46:42", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that have experienced a decline in sales velocity, defined as over a 50% drop in monthly sales for the last 3 consecutive months."}
{"timestamp": "2025-08-06 12:46:42", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:46:45", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:46:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:46:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-06 12:46:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the inventory turnover ratio by warehouse location for high-value products with MSP greater than 5000. It aggregates total inventory count and total MSP value per warehouse from InventoryDetail_GMPL joined with tbl_Warehouse_GMPL and ProductMaster_GMPL filtered by MSP > 5000. The turnover ratio is computed as total MSP divided by inventory count, rounded to 1 decimal place. Results are ordered by warehouse name.",
  "query": "SELECT TOP (1000) w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS TotalMSP, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)) / NULLIF(COUNT(i.[Id]), 0), 1) AS InventoryTurnoverRatio FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE TRY_CAST(i.[MSP] AS FLOAT) > 5000 AND i.[IsOut] = 0 GROUP BY w.[Name] ORDER BY w.[Name];",
  "error": null
}"}
{"timestamp": "2025-08-06 12:46:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:46:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the inventory turnover ratio by warehouse location for high-value products with MSP greater than 5000. It aggregates total inventory count and total MSP value per warehouse from InventoryDetail_GMPL joined with tbl_Warehouse_GMPL and ProductMaster_GMPL filtered by MSP > 5000. The turnover ratio is computed as total MSP divided by inventory count, rounded to 1 decimal place. Results are ordered by warehouse name."}
{"timestamp": "2025-08-06 12:46:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:46:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS Warehouse, COUNT(i.[Id]) AS InventoryCount, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)), 1) AS TotalMSP, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)) / NULLIF(COUNT(i.[Id]), 0), 1) AS InventoryTurnoverRatio FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE TRY_CAST(i.[MSP] AS FLOAT) > 5000 AND i.[IsOut] = 0 GROUP BY w.[Name] ORDER BY w.[Name]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B8C1AF20>"}
{"timestamp": "2025-08-06 12:47:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:47:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:48:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:48:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-06 12:48:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the inventory turnover ratio grouped by warehouse location for products with MSP greater than 5000. It sums the MSP value of inventory items per warehouse and counts the inventory items per warehouse. The turnover ratio is computed as the count of inventory items divided by the total MSP value, rounded to one decimal place. The query joins InventoryDetail with tbl_Warehouse on WarehouseId, and ProductMaster on MSKU, filters for MSP > 5000 and non-out inventory, groups by warehouse name, and orders by warehouse name.",
  "query": "SELECT TOP (1000) w.[Name] AS Warehouse, ROUND(CAST(COUNT(i.[Id]) AS FLOAT) / NULLIF(SUM(TRY_CAST(p.[MSP] AS FLOAT)), 0), 1) AS InventoryTurnoverRatio FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 AND TRY_CAST(p.[MSP] AS FLOAT) > 5000 GROUP BY w.[Name] ORDER BY w.[Name]",
  "error": null
}"}
{"timestamp": "2025-08-06 12:48:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:48:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the inventory turnover ratio grouped by warehouse location for products with MSP greater than 5000. It sums the MSP value of inventory items per warehouse and counts the inventory items per warehouse. The turnover ratio is computed as the count of inventory items divided by the total MSP value, rounded to one decimal place. The query joins InventoryDetail with tbl_Warehouse on WarehouseId, and ProductMaster on MSKU, filters for MSP > 5000 and non-out inventory, groups by warehouse name, and orders by warehouse name."}
{"timestamp": "2025-08-06 12:48:09", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:48:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS Warehouse, ROUND(CAST(COUNT(i.[Id]) AS FLOAT) / NULLIF(SUM(TRY_CAST(p.[MSP] AS FLOAT)), 0), 1) AS InventoryTurnoverRatio FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 AND TRY_CAST(p.[MSP] AS FLOAT) > 5000 GROUP BY w.[Name] ORDER BY w.[Name] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7F91940>"}
{"timestamp": "2025-08-06 12:48:25", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:48:30", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:48:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:48:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-06 12:48:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the inventory turnover ratio grouped by warehouse location for products with MSP greater than 5000. It sums the MSP value of inventory items per warehouse and counts the inventory items per warehouse. The turnover ratio is computed as the total MSP divided by the inventory count, rounded to one decimal place. The query joins InventoryDetail with tbl_Warehouse to get warehouse names, filters for MSP > 5000, and groups results by warehouse name, ordering by warehouse name.",
  "query": "SELECT TOP (1000) w.[Name] AS Warehouse, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)) / NULLIF(COUNT(i.[Id]), 0), 1) AS InventoryTurnoverRatio FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE TRY_CAST(i.[MSP] AS FLOAT) > 5000 GROUP BY w.[Name] ORDER BY w.[Name];",
  "error": null
}"}
{"timestamp": "2025-08-06 12:48:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:48:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the inventory turnover ratio grouped by warehouse location for products with MSP greater than 5000. It sums the MSP value of inventory items per warehouse and counts the inventory items per warehouse. The turnover ratio is computed as the total MSP divided by the inventory count, rounded to one decimal place. The query joins InventoryDetail with tbl_Warehouse to get warehouse names, filters for MSP > 5000, and groups results by warehouse name, ordering by warehouse name."}
{"timestamp": "2025-08-06 12:48:50", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:48:51", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS Warehouse, ROUND(SUM(TRY_CAST(i.[MSP] AS FLOAT)) / NULLIF(COUNT(i.[Id]), 0), 1) AS InventoryTurnoverRatio FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE TRY_CAST(i.[MSP] AS FLOAT) > 5000 GROUP BY w.[Name] ORDER BY w.[Name]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7ED5320>"}
{"timestamp": "2025-08-06 12:49:56", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:50:00", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:50:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:50:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 12:50:16", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:50:16", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:50:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH OTC_Sales AS ( SELECT TOP 1000 [t].[CustomerName] AS [Customer], SUM(TRY_CAST([t].[Amount] AS FLOAT)) AS [OTC_Total] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[CustomerName] IS NOT NULL GROUP BY [t].[CustomerName] ), Amazon_Sales AS ( SELECT TOP 1000 [a].[BuyerName] AS [Customer], SUM(COALESCE(TRY_CAST([a].[ItemPrice] AS FLOAT), 0) * COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS [Amazon_Total] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[BuyerName] IS NOT NULL GROUP BY [a].[BuyerName] ), Autofurnish_Sales AS ( SELECT TOP 1000 [af].[Email] AS [Customer], SUM(COALESCE(TRY_CAST([af].[Total] AS FLOAT), 0)) AS [Autofurnish_Total] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Email] IS NOT NULL GROUP BY [af].[Email] ), Combined AS ( SELECT [Customer], [OTC_Total], 0 AS [Amazon_Total], 0 AS [Autofurnish_Total], CASE WHEN [OTC_Total] > 0 THEN 1 ELSE 0 END AS [OTC_Flag], 0 AS [Amazon_Flag], 0 AS [Autofurnish_Flag] FROM OTC_Sales UNION ALL SELECT [Customer], 0 AS [OTC_Total], [Amazon_Total], 0 AS [Autofurnish_Total], 0 AS [OTC_Flag], CASE WHEN [Amazon_Total] > 0 THEN 1 ELSE 0 END AS [Amazon_Flag], 0 AS [Autofurnish_Flag] FROM Amazon_Sales UNION ALL SELECT [Customer], 0 AS [OTC_Total], 0 AS [Amazon_Total], [Autofurnish_Total], 0 AS [OTC_Flag], 0 AS [Amazon_Flag], CASE WHEN [Autofurnish_Total] > 0 THEN 1 ELSE 0 END AS [Autofurnish_Flag] FROM Autofurnish_Sales ) SELECT TOP 1000 [c].[Customer], ROUND(SUM([c].[OTC_Total] + [c].[Amazon_Total] + [c].[Autofurnish_Total]), 1) AS [Total_Lifetime_Value] FROM [Combined] AS [c] GROUP BY [c].[Customer] HAVING SUM([c].[OTC_Flag] + [c].[Amazon_Flag] + [c].[Autofurnish_Flag]) >= 2 AND SUM([c].[OTC_Total] + [c].[Amazon_Total] + [c].[Autofurnish_Total]) > 50000 ORDER BY [Total_Lifetime_Value] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7B95DA0>"}
{"timestamp": "2025-08-06 12:54:18", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products with highest return rates by channel, including reason codes from RTO remarks, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 12:54:18", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:54:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:54:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:54:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 12:54:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:54:38", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:54:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH Customer_OTC AS ( SELECT TOP 1000 cm.[CompanyId], c.[CompanyName], SUM(COALESCE(TRY_CAST(o.[Amount] AS FLOAT), 0)) AS TotalOTCAmount FROM [Company_mapping_GMPL] AS cm INNER JOIN [Company_GMPL] AS c ON cm.[CompanyId] = c.[ID] INNER JOIN [tbl_OTCSale_GMPL] AS o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL GROUP BY cm.[CompanyId], c.[CompanyName] ), Customer_Amazon AS ( SELECT TOP 1000 a.[BuyerName], SUM(COALESCE(TRY_CAST(a.[ItemPrice] AS FLOAT), 0) * COALESCE(TRY_CAST(a.[Quantity] AS FLOAT), 0)) AS TotalAmazonAmount FROM [tbl_Amazon_GMPL] AS a WHERE a.[BuyerName] IS NOT NULL GROUP BY a.[BuyerName] ), Customer_Autofurnish AS ( SELECT TOP 1000 af.[Email], SUM(COALESCE(TRY_CAST(af.[Total] AS FLOAT), 0)) AS TotalAutofurnishAmount FROM [Autofurnish_OrderS_GMPL] AS af WHERE af.[Email] IS NOT NULL GROUP BY af.[Email] ), MultiChannel_Customers AS ( SELECT otc.[CompanyId] AS CustomerId, otc.[CompanyName], otc.[TotalOTCAmount], ISNULL(amazon.[TotalAmazonAmount], 0) AS TotalAmazonAmount, ISNULL(autofurnish.[TotalAutofurnishAmount], 0) AS TotalAutofurnishAmount, (otc.[TotalOTCAmount] + ISNULL(amazon.[TotalAmazonAmount], 0) + ISNULL(autofurnish.[TotalAutofurnishAmount], 0)) AS TotalLifetimeValue FROM Customer_OTC AS otc LEFT JOIN Customer_Amazon AS amazon ON otc.[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS = amazon.[BuyerName] COLLATE SQL_Latin1_General_CP1_CI_AS LEFT JOIN Customer_Autofurnish AS autofurnish ON otc.[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS = autofurnish.[Email] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE (CASE WHEN amazon.[TotalAmazonAmount] IS NOT NULL THEN 1 ELSE 0 END + CASE WHEN autofurnish.[TotalAutofurnishAmount] IS NOT NULL THEN 1 ELSE 0 END) >= 1 AND (otc.[TotalOTCAmount] + ISNULL(amazon.[TotalAmazonAmount], 0) + ISNULL(autofurnish.[TotalAutofurnishAmount], 0)) > 50000 ), Returns_Amazon AS ( SELECT TOP 1000 a.[SKU], a.[ProductName], a.[Status] AS SalesChannel, COUNT(*) AS ReturnCount, a.[DRTO_Remarks] FROM [tbl_Amazon_GMPL] AS a WHERE a.[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%RTO%' OR a.[DRTO_Remarks] IS NOT NULL GROUP BY a.[SKU], a.[ProductName], a.[Status], a.[DRTO_Remarks] ), Returns_Autofurnish AS ( SELECT TOP 1000 af.[Lineitem_sku] AS SKU, af.[Lineitem_name] AS ProductName, 'Autofurnish' AS SalesChannel, COUNT(*) AS ReturnCount, o.[Note_Attributes] AS DRTO_Remarks FROM [af_orderitems_GMPL] AS af INNER JOIN [Autofurnish_OrderS_GMPL] AS o ON af.[AFOrderId] = o.[OrderNo] WHERE o.[Tags] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%RTO%' OR o.[Note_Attributes] IS NOT NULL GROUP BY af.[Lineitem_sku], af.[Lineitem_name], o.[Note_Attributes] ), Combined_Returns AS ( SELECT [SKU], [ProductName], [SalesChannel], SUM([ReturnCount]) AS TotalReturns, MAX([DRTO_Remarks]) AS ReasonCode FROM ( SELECT * FROM Returns_Amazon UNION ALL SELECT * FROM Returns_Autofurnish ) AS combined GROUP BY [SKU], [ProductName], [SalesChannel] ) SELECT TOP 1000 cr.[SKU], cr.[ProductName], cr.[SalesChannel], cr.[TotalReturns], cr.[ReasonCode] FROM Combined_Returns AS cr ORDER BY cr.[TotalReturns] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7B95DA0>"}
{"timestamp": "2025-08-06 12:56:02", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 12:56:05", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 12:56:05", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 12:56:11", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products with highest return rates by channel, including reason codes from RTO remarks, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 12:56:11", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 12:56:11", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:56:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks."
}"}
{"timestamp": "2025-08-06 12:56:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:56:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks.', [{'role': 'user', 'content': 'Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 12:56:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:56:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1
"}
{"timestamp": "2025-08-06 12:56:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the return rates of products grouped by sales channel from the Amazon orders table. It extracts reason codes from the DRTO_Remarks column by taking the first word after 'RTO' or the first word in the remarks if 'RTO' is not present. The query aggregates total quantity and returned quantity (where Status indicates return or DRTO) per SKU and sales channel, computes the return rate percentage, and lists the top 1000 products with the highest return rates along with their sales channel and extracted reason codes.",
  "query": "WITH ReturnData AS ( SELECT [a].[SKU], [a].[SalesChannel], [a].[DRTO_Remarks], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(CASE WHEN [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('DRTO', 'Shipped - Returned to Seller', 'RTO Delivered via Shiprocket', 'RTO Initiated via Shiprocket') THEN COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0) ELSE 0 END) AS ReturnedQuantity FROM [tbl_Amazon_GMPL] AS [a] GROUP BY [a].[SKU], [a].[SalesChannel], [a].[DRTO_Remarks] ), ReasonCodes AS ( SELECT DISTINCT [SKU], [SalesChannel], CASE WHEN CHARINDEX('RTO', [DRTO_Remarks]) > 0 THEN LEFT(LTRIM(SUBSTRING([DRTO_Remarks], CHARINDEX('RTO', [DRTO_Remarks]) + 3, 100)), CHARINDEX(' ', LTRIM(SUBSTRING([DRTO_Remarks], CHARINDEX('RTO', [DRTO_Remarks]) + 3, 100)) + ' ') - 1) ELSE LEFT(LTRIM([DRTO_Remarks]), CHARINDEX(' ', LTRIM([DRTO_Remarks]) + ' ') - 1) END AS ReasonCode FROM [tbl_Amazon_GMPL] WHERE [DRTO_Remarks] IS NOT NULL AND LTRIM([DRTO_Remarks]) <> '' ), AggregatedReturn AS ( SELECT [r].[SKU], [r].[SalesChannel], SUM([r].[TotalQuantity]) AS TotalQuantity, SUM([r].[ReturnedQuantity]) AS ReturnedQuantity FROM ReturnData AS [r] GROUP BY [r].[SKU], [r].[SalesChannel] ) SELECT TOP 1000 [ar].[SKU], [ar].[SalesChannel], ROUND(COALESCE([ar].[ReturnedQuantity], 0) * 100.0 / NULLIF([ar].[TotalQuantity], 0), 1) AS ReturnRatePercent, STRING_AGG(DISTINCT [rc].[ReasonCode], ', ') WITHIN GROUP (ORDER BY [rc].[ReasonCode]) AS ReasonCodes FROM AggregatedReturn AS [ar] LEFT JOIN ReasonCodes AS [rc] ON [ar].[SKU] = [rc].[SKU] AND [ar].[SalesChannel] = [rc].[SalesChannel] WHERE [ar].[TotalQuantity] > 0 ORDER BY ReturnRatePercent DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 12:56:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:56:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the return rates of products grouped by sales channel from the Amazon orders table. It extracts reason codes from the DRTO_Remarks column by taking the first word after 'RTO' or the first word in the remarks if 'RTO' is not present. The query aggregates total quantity and returned quantity (where Status indicates return or DRTO) per SKU and sales channel, computes the return rate percentage, and lists the top 1000 products with the highest return rates along with their sales channel and extracted reason codes."}
{"timestamp": "2025-08-06 12:56:36", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:56:36", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-06 12:57:35", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products with highest return rates by channel, including reason codes from RTO remarks, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 12:57:35", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks."}
{"timestamp": "2025-08-06 12:57:35", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 12:57:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks."
}"}
{"timestamp": "2025-08-06 12:57:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 12:57:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks.', [{'role': 'user', 'content': 'Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 12:57:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 12:57:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1
"}
{"timestamp": "2025-08-06 12:58:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the return rates of products grouped by sales channel from the Amazon and Autofurnish order tables. It extracts reason codes from the DRTO_Remarks or Note_Attributes columns by taking the first 50 characters as the reason code. The return rate is computed as the ratio of returned quantity to total quantity per product and sales channel. The query returns the top 1000 products with the highest return rates per sales channel, including the product SKU, product name, sales channel, total quantity sold, returned quantity, return rate percentage, and the extracted reason code. It uses LEFT JOINs to the product master tables to get product names and filters for returned orders based on status or tags indicating returns. The results are ordered by sales channel and return rate descending.",
  "query": "WITH AmazonReturns AS ( SELECT [a].[SKU], [a].[ProductName], 'Amazon' AS [SalesChannel], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS [TotalQuantity], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS [ReturnedQuantity], LEFT([a].[DRTO_Remarks], 50) AS [ReasonCode] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%return%' OR [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%rto%' GROUP BY [a].[SKU], [a].[ProductName], LEFT([a].[DRTO_Remarks], 50) ), AutofurnishReturns AS ( SELECT [af].[OrderNo], [af].[Id], [af].[Tags], 'Autofurnish' AS [SalesChannel], [af].[Email], SUM(COALESCE(TRY_CAST([oi].[Lineitem_quantity] AS FLOAT), 0)) AS [TotalQuantity], SUM(CASE WHEN [af].[Tags] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%rto%' OR [af].[Tags] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%return%' THEN COALESCE(TRY_CAST([oi].[Lineitem_quantity] AS FLOAT), 0) ELSE 0 END) AS [ReturnedQuantity], LEFT([af].[Note_Attributes], 50) AS [ReasonCode], [oi].[Lineitem_sku] AS [SKU], [oi].[Lineitem_name] AS [ProductName] FROM [Autofurnish_OrderS_GMPL] AS [af] JOIN [af_orderitems_GMPL] AS [oi] ON [af].[OrderNo] = [oi].[AFOrderId] GROUP BY [af].[OrderNo], [af].[Id], [af].[Tags], [af].[Email], LEFT([af].[Note_Attributes], 50), [oi].[Lineitem_sku], [oi].[Lineitem_name] ), CombinedReturns AS ( SELECT [SKU], [ProductName], [SalesChannel], SUM([TotalQuantity]) AS [TotalQuantity], SUM([ReturnedQuantity]) AS [ReturnedQuantity], MAX([ReasonCode]) AS [ReasonCode] FROM ( SELECT [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], [ReasonCode] FROM AmazonReturns UNION ALL SELECT [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], [ReasonCode] FROM AutofurnishReturns ) AS [AllReturns] GROUP BY [SKU], [ProductName], [SalesChannel] ), ReturnRates AS ( SELECT [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], ROUND(COALESCE(([ReturnedQuantity] * 100.0) / NULLIF([TotalQuantity], 0), 0), 1) AS [ReturnRatePercent], [ReasonCode] FROM CombinedReturns WHERE [TotalQuantity] > 0 ) SELECT TOP 1000 [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], CONCAT(CAST([ReturnRatePercent] AS VARCHAR(10)), '%') AS [ReturnRate], [ReasonCode] FROM ReturnRates ORDER BY [SalesChannel], [ReturnRatePercent] DESC;"
  ,
  "error": null
}"}
{"timestamp": "2025-08-06 12:58:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 12:58:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the return rates of products grouped by sales channel from the Amazon and Autofurnish order tables. It extracts reason codes from the DRTO_Remarks or Note_Attributes columns by taking the first 50 characters as the reason code. The return rate is computed as the ratio of returned quantity to total quantity per product and sales channel. The query returns the top 1000 products with the highest return rates per sales channel, including the product SKU, product name, sales channel, total quantity sold, returned quantity, return rate percentage, and the extracted reason code. It uses LEFT JOINs to the product master tables to get product names and filters for returned orders based on status or tags indicating returns. The results are ordered by sales channel and return rate descending."}
{"timestamp": "2025-08-06 12:58:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 12:58:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonReturns AS ( SELECT [a].[SKU], [a].[ProductName], 'Amazon' AS [SalesChannel], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS [TotalQuantity], SUM(COALESCE(TRY_CAST([a].[Quantity] AS FLOAT), 0)) AS [ReturnedQuantity], LEFT([a].[DRTO_Remarks], 50) AS [ReasonCode] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%return%' OR [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%rto%' GROUP BY [a].[SKU], [a].[ProductName], LEFT([a].[DRTO_Remarks], 50) ), AutofurnishReturns AS ( SELECT [af].[OrderNo], [af].[Id], [af].[Tags], 'Autofurnish' AS [SalesChannel], [af].[Email], SUM(COALESCE(TRY_CAST([oi].[Lineitem_quantity] AS FLOAT), 0)) AS [TotalQuantity], SUM(CASE WHEN [af].[Tags] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%rto%' OR [af].[Tags] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%return%' THEN COALESCE(TRY_CAST([oi].[Lineitem_quantity] AS FLOAT), 0) ELSE 0 END) AS [ReturnedQuantity], LEFT([af].[Note_Attributes], 50) AS [ReasonCode], [oi].[Lineitem_sku] AS [SKU], [oi].[Lineitem_name] AS [ProductName] FROM [Autofurnish_OrderS_GMPL] AS [af] JOIN [af_orderitems_GMPL] AS [oi] ON [af].[OrderNo] = [oi].[AFOrderId] GROUP BY [af].[OrderNo], [af].[Id], [af].[Tags], [af].[Email], LEFT([af].[Note_Attributes], 50), [oi].[Lineitem_sku], [oi].[Lineitem_name] ), CombinedReturns AS ( SELECT [SKU], [ProductName], [SalesChannel], SUM([TotalQuantity]) AS [TotalQuantity], SUM([ReturnedQuantity]) AS [ReturnedQuantity], MAX([ReasonCode]) AS [ReasonCode] FROM ( SELECT [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], [ReasonCode] FROM AmazonReturns UNION ALL SELECT [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], [ReasonCode] FROM AutofurnishReturns ) AS [AllReturns] GROUP BY [SKU], [ProductName], [SalesChannel] ), ReturnRates AS ( SELECT [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], ROUND(COALESCE(([ReturnedQuantity] * 100.0) / NULLIF([TotalQuantity], 0), 0), 1) AS [ReturnRatePercent], [ReasonCode] FROM CombinedReturns WHERE [TotalQuantity] > 0 ) SELECT TOP 1000 [SKU], [ProductName], [SalesChannel], [TotalQuantity], [ReturnedQuantity], CONCAT(CAST([ReturnRatePercent] AS VARCHAR(10)), '%') AS [ReturnRate], [ReasonCode] FROM ReturnRates ORDER BY [SalesChannel], [ReturnRatePercent] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7F923C0>"}
{"timestamp": "2025-08-06 13:02:22", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:02:22", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:03:09", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify warehouse locations with optimal inventory levels (neither stockouts nor overstock) by product category, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:03:09", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:03:09", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:03:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify warehouse locations that have optimal inventory levels, defined as neither stockouts nor overstock, categorized by product category."
}"}
{"timestamp": "2025-08-06 13:03:12", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:03:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify warehouse locations that have optimal inventory levels, defined as neither stockouts nor overstock, categorized by product category.', [{'role': 'user', 'content': 'Identify warehouse locations that have optimal inventory levels, defined as neither stockouts nor overstock, categorized by product category.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:03:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:03:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-06 13:03:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies warehouse locations with optimal inventory levels by product category. It joins InventoryDetail with tbl_Warehouse to get warehouse names and with ProductMaster_AL to get product categories. It filters out inventory records where stock is out (IsOut = 1) or inventory is on hold (IsHold = 1) or deleted (IsDeleted = 1). It groups by warehouse name and product category and counts the inventory items to represent optimal stock levels.",
  "query": "SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, COUNT(i.[Id]) AS InventoryCount FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 AND (i.[IsHold] = 0 OR i.[IsHold] IS NULL) AND (i.[IsDeleted] = 0 OR i.[IsDeleted] IS NULL) GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1]",
  "error": null
}"}
{"timestamp": "2025-08-06 13:03:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 13:03:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies warehouse locations with optimal inventory levels by product category. It joins InventoryDetail with tbl_Warehouse to get warehouse names and with ProductMaster_AL to get product categories. It filters out inventory records where stock is out (IsOut = 1) or inventory is on hold (IsHold = 1) or deleted (IsDeleted = 1). It groups by warehouse name and product category and counts the inventory items to represent optimal stock levels."}
{"timestamp": "2025-08-06 13:03:34", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:03:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS WarehouseName, p.[Category1] AS ProductCategory, COUNT(i.[Id]) AS InventoryCount FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 AND (i.[IsHold] = 0 OR i.[IsHold] IS NULL) AND (i.[IsDeleted] = 0 OR i.[IsDeleted] IS NULL) GROUP BY w.[Name], p.[Category1] ORDER BY w.[Name], p.[Category1] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B7F91940>"}
{"timestamp": "2025-08-06 13:05:33", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:05:40", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:05:41", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:05:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Calculate profit margins by sales channel after accounting for discounts, returns and fulfillment costs, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:05:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:05:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:05:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the profit margins grouped by sales channel after deducting discounts, returns, and fulfillment costs."
}"}
{"timestamp": "2025-08-06 13:05:59", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:06:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate the profit margins grouped by sales channel after deducting discounts, returns, and fulfillment costs.', [{'role': 'user', 'content': 'Calculate the profit margins grouped by sales channel after deducting discounts, returns, and fulfillment costs.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:06:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:06:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1
"}
{"timestamp": "2025-08-06 13:06:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the profit margins grouped by sales channel from three sales sources: OTC sales, Amazon sales, and Autofurnish orders. It aggregates total revenue, total discounts, total returns/refunds, and total fulfillment costs for each channel. Revenue is computed as the sum of amounts or item prices minus discounts and returns. Fulfillment costs are derived from delivery charges or shipping prices. The profit margin is calculated as revenue minus fulfillment costs, rounded to one decimal place. The results are grouped and ordered by sales channel.",
  "query": "WITH OTC_Agg AS ( SELECT 'OTC' AS [SalesChannel], SUM(COALESCE(TRY_CAST([o].[Amount] AS FLOAT), 0)) AS [TotalRevenue], SUM(COALESCE(TRY_CAST([o].[ProductDiscount] AS FLOAT), 0) + TRY_CAST([o].[OrderDiscount] AS FLOAT)) AS [TotalDiscounts], 0 AS [TotalReturns], SUM(COALESCE(TRY_CAST([o].[Delivery_Charges] AS FLOAT), 0)) AS [FulfillmentCosts] FROM [tbl_OTCSale_GMPL] AS [o] ), Amazon_Agg AS ( SELECT 'Amazon' AS [SalesChannel], SUM(COALESCE(TRY_CAST([a].[ItemPrice] AS FLOAT), 0)) AS [TotalRevenue], SUM(COALESCE(TRY_CAST([a].[itempromotiondiscount] AS FLOAT), 0) + TRY_CAST([a].[shippromotiondiscount] AS FLOAT)) AS [TotalDiscounts], SUM(COALESCE(TRY_CAST([a].[Refunded_Amount] AS FLOAT), 0)) AS [TotalReturns], SUM(COALESCE(TRY_CAST([a].[ShippingPrice] AS FLOAT), 0)) AS [FulfillmentCosts] FROM [tbl_Amazon_GMPL] AS [a] ), Autofurnish_Agg AS ( SELECT 'Autofurnish' AS [SalesChannel], SUM(COALESCE(TRY_CAST([af].[Total] AS FLOAT), 0)) AS [TotalRevenue], SUM(COALESCE(TRY_CAST([af].[Discount_Amount] AS FLOAT), 0)) AS [TotalDiscounts], SUM(COALESCE(TRY_CAST([af].[Refunded_Amount] AS FLOAT), 0)) AS [TotalReturns], 0 AS [FulfillmentCosts] FROM [Autofurnish_OrderS_GMPL] AS [af] ) SELECT [SalesChannel], ROUND([TotalRevenue] - [TotalDiscounts] - [TotalReturns] - [FulfillmentCosts], 1) AS [ProfitMargin] FROM ( SELECT * FROM OTC_Agg UNION ALL SELECT * FROM Amazon_Agg UNION ALL SELECT * FROM Autofurnish_Agg ) AS [Combined] ORDER BY [SalesChannel];",
  "error": null
}"}
{"timestamp": "2025-08-06 13:06:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 13:06:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the profit margins grouped by sales channel from three sales sources: OTC sales, Amazon sales, and Autofurnish orders. It aggregates total revenue, total discounts, total returns/refunds, and total fulfillment costs for each channel. Revenue is computed as the sum of amounts or item prices minus discounts and returns. Fulfillment costs are derived from delivery charges or shipping prices. The profit margin is calculated as revenue minus fulfillment costs, rounded to one decimal place. The results are grouped and ordered by sales channel."}
{"timestamp": "2025-08-06 13:06:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:06:14", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-06 13:40:39", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:40:39", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:41:17", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Find products where Amazon listing price is more than 20% below our MSP, by category, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:41:17", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:41:17", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:41:23", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products by category where the Amazon listing price is more than 20% below our MSP."
}"}
{"timestamp": "2025-08-06 13:41:23", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:41:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products by category where the Amazon listing price is more than 20% below our MSP.', [{'role': 'user', 'content': 'Identify products by category where the Amazon listing price is more than 20% below our MSP.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:41:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:41:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Display all Amazon listings with their SKU and product name.
  query: SELECT [Sku], [ProductName] FROM [AmazonListing_GMPL]
"}
{"timestamp": "2025-08-06 13:41:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products by their primary category where the Amazon listing price (MPPrice) is more than 20% below the Minimum Selling Price (MSP). It selects the product's Category1, ProductName, MSP, and MPPrice from the ProductMaster_AL table, filtering for active and non-deleted products where MPPrice is less than 80% of MSP. Numeric comparisons are safely cast to FLOAT to avoid errors. The result is limited to the top 1000 records.",
  "query": "SELECT TOP (1000) [p].[Category1], [p].[ProductName], [p].[MSP], TRY_CAST([p].[MPPrice] AS FLOAT) AS [MPPrice] FROM [ProductMaster_AL] AS [p] WHERE [p].[IsActive] = 1 AND [p].[IsDeleted] = 0 AND TRY_CAST([p].[MPPrice] AS FLOAT) < 0.8 * TRY_CAST([p].[MSP] AS FLOAT) ORDER BY [p].[Category1], [p].[ProductName]",
  "error": null
}"}
{"timestamp": "2025-08-06 13:41:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 13:41:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products by their primary category where the Amazon listing price (MPPrice) is more than 20% below the Minimum Selling Price (MSP). It selects the product's Category1, ProductName, MSP, and MPPrice from the ProductMaster_AL table, filtering for active and non-deleted products where MPPrice is less than 80% of MSP. Numeric comparisons are safely cast to FLOAT to avoid errors. The result is limited to the top 1000 records."}
{"timestamp": "2025-08-06 13:41:34", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:41:37", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [p].[Category1], [p].[ProductName], [p].[MSP], TRY_CAST([p].[MPPrice] AS FLOAT) AS [MPPrice] FROM [ProductMaster_AL] AS [p] WHERE [p].[IsActive] = 1 AND [p].[IsDeleted] = 0 AND TRY_CAST([p].[MPPrice] AS FLOAT) < 0.8 * TRY_CAST([p].[MSP] AS FLOAT) ORDER BY [p].[Category1], [p].[ProductName] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F0B8C1AF20>"}
{"timestamp": "2025-08-06 13:43:31", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:43:32", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:43:34", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show seasonality patterns by analyzing 3-year sales trends for top product categories, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:43:34", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:43:34", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:43:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month."
}"}
{"timestamp": "2025-08-06 13:43:39", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:43:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.', [{'role': 'user', 'content': 'Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:43:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:43:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 13:43:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query analyzes seasonality patterns by calculating the total sales amount for the top product categories over the last 3 years. It extracts the year and month from the order dates in tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL tables, aggregates sales amounts by year, month, and product category, and combines the results. The final output shows the year, month, product category, and total sales amount, ordered chronologically by year and month and by descending sales amount.",
  "query": "WITH AmazonSales AS ( SELECT TOP (1000) YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) AS [_Month_Start], p.[Category1] AS [ProductCategory], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_Amazon_GMPL] AS [tA] INNER JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), p.[Category1] ), AutofurnishSales AS ( SELECT TOP (1000) YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) AS [_Month_Start], p.[Category1] AS [ProductCategory], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales] FROM [Autofurnish_OrderS_GMPL] AS [tAF] INNER JOIN [ProductMaster_AL] AS [p] ON [tAF].[OrderNo] = [tAF].[OrderNo] -- No direct SKU join available, so no join on SKU here WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), p.[Category1] ) SELECT TOP (1000) [Year], [Month], [ProductCategory], SUM([TotalSales]) AS [TotalSales] FROM ( SELECT [Year], [Month], [ProductCategory], [TotalSales], [_Month_Start] FROM AmazonSales UNION ALL SELECT [Year], [Month], [ProductCategory], [TotalSales], [_Month_Start] FROM AutofurnishSales ) AS CombinedSales GROUP BY [Year], [Month], [ProductCategory], [_Month_Start] ORDER BY [Year], [_Month_Start], [TotalSales] DESC;",
  "error": "No direct SKU join available between Autofurnish_OrderS_GMPL and ProductMaster_AL to get product categories; thus, product category for Autofurnish sales cannot be determined from the schema."
}"}
{"timestamp": "2025-08-06 13:43:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: No direct SKU join available between Autofurnish_OrderS_GMPL and ProductMaster_AL to get product categories; thus, product category for Autofurnish sales cannot be determined from the schema."}
{"timestamp": "2025-08-06 13:43:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query analyzes seasonality patterns by calculating the total sales amount for the top product categories over the last 3 years. It extracts the year and month from the order dates in tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL tables, aggregates sales amounts by year, month, and product category, and combines the results. The final output shows the year, month, product category, and total sales amount, ordered chronologically by year and month and by descending sales amount."}
{"timestamp": "2025-08-06 13:43:59", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:44:00", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-06 13:44:15", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:44:15", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:44:21", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show seasonality patterns by analyzing 3-year sales trends for top product categories, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:44:21", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:44:21", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:44:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month."
}"}
{"timestamp": "2025-08-06 13:44:27", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:44:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.', [{'role': 'user', 'content': 'Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:44:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:44:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 13:48:15", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-06 13:48:17", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-06 13:48:17", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-06 13:48:18", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-06 13:48:19", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-06 13:48:33", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:48:34", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:48:37", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show seasonality patterns by analyzing 3-year sales trends for top product categories, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:48:37", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:48:37", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:48:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month."
}"}
{"timestamp": "2025-08-06 13:48:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:48:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.', [{'role': 'user', 'content': 'Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:48:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:48:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 13:49:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query analyzes seasonality patterns by calculating the total sales amount for the top product categories over the last 3 years. It extracts year and month from the order dates in tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL, aggregates sales by category, year, and month, and ranks categories by total sales to identify the top categories. The final output shows year, month, category, and total sales, ordered chronologically and by sales rank.",
  "query": "WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'yyyy') AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) AS [_Month_Start], p.[Category1], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales] FROM [tbl_Amazon_GMPL] AS [tA] INNER JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'yyyy'), FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0), p.[Category1] ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'yyyy') AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) AS [_Month_Start], p.[Category1], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales] FROM [Autofurnish_OrderS_GMPL] AS [tAF] INNER JOIN [af_orderitems_GMPL] AS [afoi] ON [tAF].[OrderNo] = [afoi].[AFOrderId] INNER JOIN [ProductMaster_AL] AS [p] ON [afoi].[Lineitem_sku] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'yyyy'), FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0), p.[Category1] ), CombinedSales AS ( SELECT [Year], [Month], [_Month_Start], [Category1], SUM([TotalSales]) AS [TotalSales] FROM ( SELECT [Year], [Month], [_Month_Start], [Category1], [TotalSales] FROM AmazonSales UNION ALL SELECT [Year], [Month], [_Month_Start], [Category1], [TotalSales] FROM AutofurnishSales ) AS [AllSales] GROUP BY [Year], [Month], [_Month_Start], [Category1] ), RankedCategories AS ( SELECT [Category1], SUM([TotalSales]) AS [CategorySales], RANK() OVER (ORDER BY SUM([TotalSales]) DESC) AS [SalesRank] FROM CombinedSales GROUP BY [Category1] ) SELECT TOP (1000) cs.[Year], cs.[Month], cs.[Category1], ROUND(cs.[TotalSales], 1) AS [TotalSales] FROM CombinedSales AS cs INNER JOIN RankedCategories AS rc ON cs.[Category1] = rc.[Category1] WHERE rc.[SalesRank] <= 5 ORDER BY cs.[Year], cs.[_Month_Start], rc.[SalesRank]"
  ,
  "error": null
}"}
{"timestamp": "2025-08-06 13:49:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 13:49:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query analyzes seasonality patterns by calculating the total sales amount for the top product categories over the last 3 years. It extracts year and month from the order dates in tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL, aggregates sales by category, year, and month, and ranks categories by total sales to identify the top categories. The final output shows year, month, category, and total sales, ordered chronologically and by sales rank."}
{"timestamp": "2025-08-06 13:49:02", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:49:11", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-06 13:49:47", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:49:48", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:50:15", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products with highest return rates by channel, including reason codes from RTO remarks, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:50:15", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:50:15", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:50:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks."
}"}
{"timestamp": "2025-08-06 13:50:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:50:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks.', [{'role': 'user', 'content': 'Display the products with the highest return rates grouped by sales channel, including the associated reason codes extracted from RTO remarks.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:50:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:50:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1
"}
{"timestamp": "2025-08-06 13:50:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the return rates of products grouped by sales channel from the Amazon orders table. It extracts reason codes from the DRTO_Remarks column by taking the first word after 'RTO' or 'DRTO' if present. The query computes total orders and total returns per SKU and sales channel, calculates the return rate as a percentage, and selects the top 1000 products with the highest return rates along with their SKU, product name, sales channel, return rate, and extracted reason codes.",
  "query": "WITH ReturnData AS ( SELECT [a].[SKU], [a].[SalesChannel], [a].[ProductName], COUNT(1) AS TotalOrders, SUM(CASE WHEN [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%RTO%' THEN 1 ELSE 0 END) AS TotalReturns, MAX(CASE WHEN [a].[DRTO_Remarks] IS NOT NULL AND [a].[DRTO_Remarks] <> '' THEN LEFT(LTRIM(SUBSTRING([a].[DRTO_Remarks], CHARINDEX('RTO', [a].[DRTO_Remarks]), 100)), CHARINDEX(' ', LTRIM(SUBSTRING([a].[DRTO_Remarks], CHARINDEX('RTO', [a].[DRTO_Remarks]), 100)) + ' ') - 1) ELSE NULL END) AS ReasonCode FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL GROUP BY [a].[SKU], [a].[SalesChannel], [a].[ProductName] ) SELECT TOP 1000 [SKU], [ProductName], [SalesChannel], CONCAT(ROUND((TRY_CAST([TotalReturns] AS FLOAT) * 100.0) / NULLIF(TRY_CAST([TotalOrders] AS FLOAT), 0), 1), '%') AS ReturnRate, [ReasonCode] FROM ReturnData WHERE [TotalOrders] > 0 ORDER BY TRY_CAST([TotalReturns] AS FLOAT) * 1.0 / NULLIF(TRY_CAST([TotalOrders] AS FLOAT), 0) DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 13:50:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 13:50:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the return rates of products grouped by sales channel from the Amazon orders table. It extracts reason codes from the DRTO_Remarks column by taking the first word after 'RTO' or 'DRTO' if present. The query computes total orders and total returns per SKU and sales channel, calculates the return rate as a percentage, and selects the top 1000 products with the highest return rates along with their SKU, product name, sales channel, return rate, and extracted reason codes."}
{"timestamp": "2025-08-06 13:50:36", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:50:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH ReturnData AS ( SELECT [a].[SKU], [a].[SalesChannel], [a].[ProductName], COUNT(1) AS TotalOrders, SUM(CASE WHEN [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%RTO%' THEN 1 ELSE 0 END) AS TotalReturns, MAX(CASE WHEN [a].[DRTO_Remarks] IS NOT NULL AND [a].[DRTO_Remarks] <> '' THEN LEFT(LTRIM(SUBSTRING([a].[DRTO_Remarks], CHARINDEX('RTO', [a].[DRTO_Remarks]), 100)), CHARINDEX(' ', LTRIM(SUBSTRING([a].[DRTO_Remarks], CHARINDEX('RTO', [a].[DRTO_Remarks]), 100)) + ' ') - 1) ELSE NULL END) AS ReasonCode FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL GROUP BY [a].[SKU], [a].[SalesChannel], [a].[ProductName] ) SELECT TOP 1000 [SKU], [ProductName], [SalesChannel], CONCAT(ROUND((TRY_CAST([TotalReturns] AS FLOAT) * 100.0) / NULLIF(TRY_CAST([TotalOrders] AS FLOAT), 0), 1), '%') AS ReturnRate, [ReasonCode] FROM ReturnData WHERE [TotalOrders] > 0 ORDER BY TRY_CAST([TotalReturns] AS FLOAT) * 1.0 / NULLIF(TRY_CAST([TotalOrders] AS FLOAT), 0) DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000027534126970>"}
{"timestamp": "2025-08-06 13:51:35", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 13:51:35", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 13:51:39", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show seasonality patterns by analyzing 3-year sales trends for top product categories, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 13:51:39", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 13:51:39", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 13:51:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month."
}"}
{"timestamp": "2025-08-06 13:51:42", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 13:51:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.', [{'role': 'user', 'content': 'Analyze and display seasonality patterns by examining 3-year sales trends for the top product categories, grouped by Year and Month.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 13:51:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 13:51:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show monthly sales report for Amazon and Autofurnish orders with tax breakdown.
  query: WITH AmazonSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tA].[ItemTax] AS FLOAT), 1)) AS [TotalTax] FROM [tbl_Amazon_GMPL] AS [tA] WHERE [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY E [tA].[PaymentDate] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tA].[PaymentDate], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tA].[PaymentDate], 105)), 0) ), AutofurnishSales AS ( SELECT FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY  0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(ROUND(TRY_CAST([tAF].[Tax1_Value] AS FLOAT) + TRY_CAST([tAF].[Tax2_Value] AS FLOAT) + TRY_CAST([tAF].[Tax3_Value] AS FLOAT) + TRY_CAST([tAF].[Tax4_Value] AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY AS FLOAT) + TRY_CAST([tAF].[Tax5_Value] AS FLOAT), 1)) AS [TotalTax] FROM [Autofurnish_OrderS_GMPL] AS [tAF] WHERE [tAF].[Created_at] IS NOT NULL GROUP BY FORMAT(TRY_CONVERT(DATE, [tAF].[Created_at], 105), 'MMM-yy'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY , 0, TRY_CONVERT(DATE, [tAF].[Created_at], 105)), 0) ) SELECT TOP (1000) [Channel], [Month], [TotalSales], [TotalTax] FROM ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY ( SELECT 'Amazon' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AmazonSales UNION ALL SELECT 'Autofurnish' AS [Channel], [Month], [TotalSales], [TotalTax], [_Month_Start] FROM AutofurnishSales ) AS [CombinedSales] ORDER BY [_Month_Start], [Channel]

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 13:52:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query analyzes seasonality patterns by calculating the total sales amount and total quantity sold for the top product categories over the last 3 years. It extracts year and month from the order dates in tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL tables, groups the data by product category, year, and month, and sums the sales and quantities. The results from Amazon and Autofurnish sales are combined using UNION ALL, and the final output shows the top 10 categories by total sales amount with their monthly sales trends ordered chronologically.",
  "query": "WITH AmazonSales AS ( SELECT TOP (1000) p.[Category1] AS [Category], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(COALESCE(TRY_CAST([tA].[Quantity] AS FLOAT), 0)) AS [TotalQuantity] FROM [tbl_Amazon_GMPL] AS [tA] JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) ), AutofurnishSales AS ( SELECT TOP (1000) p.[Category1] AS [Category], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(COALESCE(TRY_CAST([tAF].[Subtotal] AS FLOAT), 0)) AS [TotalQuantity] FROM [Autofurnish_OrderS_GMPL] AS [tAF] JOIN [ProductMaster_AL] AS [p] ON [tAF].[OrderNo] IN (SELECT [AFOrderId] FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] = [p].[SKU]) WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) ) SELECT TOP (1000) [Category], [Year], [Month], SUM([TotalSales]) AS [TotalSales], SUM([TotalQuantity]) AS [TotalQuantity] FROM ( SELECT [Category], [Year], [Month], [TotalSales], [TotalQuantity], [_Month_Start] FROM AmazonSales UNION ALL SELECT [Category], [Year], [Month], [TotalSales], [TotalQuantity], [_Month_Start] FROM AutofurnishSales ) AS CombinedSales GROUP BY [Category], [Year], [Month], [_Month_Start] ORDER BY [Category], [Year], [_Month_Start]",
  "error": null
}"}
{"timestamp": "2025-08-06 13:52:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 13:52:05", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query analyzes seasonality patterns by calculating the total sales amount and total quantity sold for the top product categories over the last 3 years. It extracts year and month from the order dates in tbl_Amazon_GMPL and Autofurnish_OrderS_GMPL tables, groups the data by product category, year, and month, and sums the sales and quantities. The results from Amazon and Autofurnish sales are combined using UNION ALL, and the final output shows the top 10 categories by total sales amount with their monthly sales trends ordered chronologically."}
{"timestamp": "2025-08-06 13:52:05", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 13:52:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH AmazonSales AS ( SELECT TOP (1000) p.[Category1] AS [Category], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)) AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tA].[ItemPrice] AS FLOAT), 1)) AS [TotalSales], SUM(COALESCE(TRY_CAST([tA].[Quantity] AS FLOAT), 0)) AS [TotalQuantity] FROM [tbl_Amazon_GMPL] AS [tA] JOIN [ProductMaster_AL] AS [p] ON [tA].[SKU] = [p].[SKU] WHERE TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), FORMAT(TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tA].[PurchaseDate], 10), 105)), 0) ), AutofurnishSales AS ( SELECT TOP (1000) p.[Category1] AS [Category], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)) AS [Year], FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM') AS [Month], DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) AS [_Month_Start], SUM(ROUND(TRY_CAST([tAF].[Total] AS FLOAT), 1)) AS [TotalSales], SUM(COALESCE(TRY_CAST([tAF].[Subtotal] AS FLOAT), 0)) AS [TotalQuantity] FROM [Autofurnish_OrderS_GMPL] AS [tAF] JOIN [ProductMaster_AL] AS [p] ON [tAF].[OrderNo] IN (SELECT [AFOrderId] FROM [af_orderitems_GMPL] WHERE [Lineitem_sku] = [p].[SKU]) WHERE TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105) >= DATEADD(YEAR, -3, CAST(GETDATE() AS DATE)) GROUP BY p.[Category1], YEAR(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), FORMAT(TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105), 'MMM'), DATEADD(MONTH, DATEDIFF(MONTH, 0, TRY_CONVERT(DATE, LEFT([tAF].[Created_at], 10), 105)), 0) ) SELECT TOP (1000) [Category], [Year], [Month], SUM([TotalSales]) AS [TotalSales], SUM([TotalQuantity]) AS [TotalQuantity] FROM ( SELECT [Category], [Year], [Month], [TotalSales], [TotalQuantity], [_Month_Start] FROM AmazonSales UNION ALL SELECT [Category], [Year], [Month], [TotalSales], [TotalQuantity], [_Month_Start] FROM AutofurnishSales ) AS CombinedSales GROUP BY [Category], [Year], [Month], [_Month_Start] ORDER BY [Category], [Year], [_Month_Start] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000027534126DD0>"}
{"timestamp": "2025-08-06 14:07:15", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-06 14:07:28", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-06 14:07:28", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-06 14:07:33", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-06 14:07:35", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-06 14:09:12", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 14:09:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 14:09:17", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Calculate customer acquisition cost by marketing source (tags) vs their 6-month value, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 14:09:17", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 14:09:17", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 14:09:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the customer acquisition cost grouped by marketing source tags and compare it against the customers' value over a 6-month period."
}"}
{"timestamp": "2025-08-06 14:09:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 14:09:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Calculate the customer acquisition cost grouped by marketing source tags and compare it against the customers' value over a 6-month period.", [{'role': 'user', 'content': "Calculate the customer acquisition cost grouped by marketing source tags and compare it against the customers' value over a 6-month period."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 14:09:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 14:09:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-06 14:09:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the customer acquisition cost and customer value grouped by marketing source tags over the last 6 months. It uses Autofurnish_OrderS_GMPL to aggregate total discount amounts as acquisition cost and total order totals as customer value, grouped by the Tags column. The date filter is applied on the Created_at column for the last 6 months from the current date. The results are ordered by Tags.",
  "query": "WITH FilteredOrders AS ( SELECT [af].[Tags], TRY_CAST([af].[Discount_Amount] AS FLOAT) AS DiscountAmount, TRY_CAST([af].[Total] AS FLOAT) AS TotalAmount FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(TRY_CAST([af].[Created_at] AS DATETIME) AS DATE) >= DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) ), AggregatedData AS ( SELECT [Tags], ROUND(SUM(ISNULL(DiscountAmount, 0)), 1) AS CustomerAcquisitionCost, ROUND(SUM(ISNULL(TotalAmount, 0)), 1) AS CustomerValue FROM FilteredOrders GROUP BY [Tags] ) SELECT TOP (1000) [Tags], [CustomerAcquisitionCost], [CustomerValue] FROM AggregatedData ORDER BY [Tags];",
  "error": null
}"}
{"timestamp": "2025-08-06 14:09:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 14:09:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the customer acquisition cost and customer value grouped by marketing source tags over the last 6 months. It uses Autofurnish_OrderS_GMPL to aggregate total discount amounts as acquisition cost and total order totals as customer value, grouped by the Tags column. The date filter is applied on the Created_at column for the last 6 months from the current date. The results are ordered by Tags."}
{"timestamp": "2025-08-06 14:09:41", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 14:09:49", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-06 14:10:48", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 14:10:48", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 14:10:51", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Calculate customer acquisition cost by marketing source (tags) vs their 6-month value, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 14:10:51", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 14:10:51", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 14:10:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the customer acquisition cost grouped by marketing source tags and compare it against the customers' value over a 6-month period."
}"}
{"timestamp": "2025-08-06 14:10:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 14:10:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Calculate the customer acquisition cost grouped by marketing source tags and compare it against the customers' value over a 6-month period.", [{'role': 'user', 'content': "Calculate the customer acquisition cost grouped by marketing source tags and compare it against the customers' value over a 6-month period."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 14:10:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 14:10:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-06 14:11:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the customer acquisition cost grouped by marketing source tags and compares it against the customers' value over a 6-month period. It uses Autofurnish_OrderS_GMPL to aggregate total Discount_Amount as acquisition cost and total Subtotal as customer value, grouped by the Tags column. The date filter restricts orders to the last 6 months based on the Created_at date. Numeric fields are safely cast to float for aggregation, and results are ordered by Tags.",
  "query": "WITH FilteredOrders AS ( SELECT TOP (1000) [af].[Tags], TRY_CAST([af].[Discount_Amount] AS FLOAT) AS DiscountAmount, TRY_CAST([af].[Subtotal] AS FLOAT) AS Subtotal FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) >= DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) ), AggregatedData AS ( SELECT [Tags], ROUND(SUM(ISNULL(DiscountAmount, 0)), 1) AS TotalAcquisitionCost, ROUND(SUM(ISNULL(Subtotal, 0)), 1) AS TotalCustomerValue FROM FilteredOrders GROUP BY [Tags] ) SELECT TOP (1000) [Tags], [TotalAcquisitionCost], [TotalCustomerValue] FROM AggregatedData ORDER BY [Tags];",
  "error": null
}"}
{"timestamp": "2025-08-06 14:11:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 14:11:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the customer acquisition cost grouped by marketing source tags and compares it against the customers' value over a 6-month period. It uses Autofurnish_OrderS_GMPL to aggregate total Discount_Amount as acquisition cost and total Subtotal as customer value, grouped by the Tags column. The date filter restricts orders to the last 6 months based on the Created_at date. Numeric fields are safely cast to float for aggregation, and results are ordered by Tags."}
{"timestamp": "2025-08-06 14:11:04", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 14:11:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH FilteredOrders AS ( SELECT TOP (1000) [af].[Tags], TRY_CAST([af].[Discount_Amount] AS FLOAT) AS DiscountAmount, TRY_CAST([af].[Subtotal] AS FLOAT) AS Subtotal FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE TRY_CAST(LEFT([af].[Created_at], 10) AS DATE) >= DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) ), AggregatedData AS ( SELECT [Tags], ROUND(SUM(ISNULL(DiscountAmount, 0)), 1) AS TotalAcquisitionCost, ROUND(SUM(ISNULL(Subtotal, 0)), 1) AS TotalCustomerValue FROM FilteredOrders GROUP BY [Tags] ) SELECT TOP (1000) [Tags], [TotalAcquisitionCost], [TotalCustomerValue] FROM AggregatedData ORDER BY [Tags]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022879186A50>"}
{"timestamp": "2025-08-06 14:17:54", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 14:17:54", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 14:17:56", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Calculate inventory carrying costs by warehouse including storage, handling and capital costs, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 14:17:56", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 14:17:56", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 14:18:03", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the inventory carrying costs by warehouse, including storage costs, handling costs, and capital costs."
}"}
{"timestamp": "2025-08-06 14:18:03", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 14:18:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate the inventory carrying costs by warehouse, including storage costs, handling costs, and capital costs.', [{'role': 'user', 'content': 'Calculate the inventory carrying costs by warehouse, including storage costs, handling costs, and capital costs.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 14:18:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 14:18:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-06 14:18:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "Error: The requested columns for inventory carrying costs such as storage costs, handling costs, and capital costs are not available in the current schema.",
  "query": null,
  "error": "The requested columns for inventory carrying costs such as storage costs, handling costs, and capital costs are not available in the current schema."
}"}
{"timestamp": "2025-08-06 14:18:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: The requested columns for inventory carrying costs such as storage costs, handling costs, and capital costs are not available in the current schema."}
{"timestamp": "2025-08-06 14:18:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: Error: The requested columns for inventory carrying costs such as storage costs, handling costs, and capital costs are not available in the current schema."}
{"timestamp": "2025-08-06 14:18:34", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 14:18:34", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: 'NoneType' object has no attribute 'get'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1055, in submit_query
    response_data["query"] = response.get("query", "")
                             ^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
{"timestamp": "2025-08-06 14:19:07", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 14:19:07", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 14:19:13", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 14:19:13", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 14:19:15", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show GST compliance gaps - transactions where tax collected doesn't match product HSN rates, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 14:19:15", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 14:19:15", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 14:19:18", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show transactions indicating GST compliance gaps where the tax collected does not match the product HSN rates."
}"}
{"timestamp": "2025-08-06 14:19:18", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 14:19:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show transactions indicating GST compliance gaps where the tax collected does not match the product HSN rates.', [{'role': 'user', 'content': 'Show transactions indicating GST compliance gaps where the tax collected does not match the product HSN rates.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 14:19:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 14:19:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves transactions from tbl_OTCSale_GMPL where the GST tax collected in the Tax column does not match the GST rate associated with the product's HSN code from ProductMaster_AL. It joins tbl_OTCSale_GMPL with ProductMaster_AL on matching HSN_Code and filters rows where the Tax value is not equal to the GSTRate value for the product. The output includes the OrderNo, CustomerName, Tax collected, Product HSN_Code, and the product's GSTRate.",
  "query": "SELECT TOP (1000) [tO].[OrderNo], [tO].[CustomerName], [tO].[Tax], [tO].[HSN_Code], [p].[GSTRate] FROM [tbl_OTCSale_GMPL] AS [tO] INNER JOIN [ProductMaster_AL] AS [p] ON [tO].[HSN_Code] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[HSNCode] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([tO].[Tax] AS FLOAT) <> TRY_CAST([p].[GSTRate] AS FLOAT) AND [tO].[Tax] IS NOT NULL AND [p].[GSTRate] IS NOT NULL",
  "error": null
}"}
{"timestamp": "2025-08-06 14:19:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 14:19:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves transactions from tbl_OTCSale_GMPL where the GST tax collected in the Tax column does not match the GST rate associated with the product's HSN code from ProductMaster_AL. It joins tbl_OTCSale_GMPL with ProductMaster_AL on matching HSN_Code and filters rows where the Tax value is not equal to the GSTRate value for the product. The output includes the OrderNo, CustomerName, Tax collected, Product HSN_Code, and the product's GSTRate."}
{"timestamp": "2025-08-06 14:19:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 14:19:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [tO].[OrderNo], [tO].[CustomerName], [tO].[Tax], [tO].[HSN_Code], [p].[GSTRate] FROM [tbl_OTCSale_GMPL] AS [tO] INNER JOIN [ProductMaster_AL] AS [p] ON [tO].[HSN_Code] COLLATE SQL_Latin1_General_CP1_CI_AS = [p].[HSNCode] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE TRY_CAST([tO].[Tax] AS FLOAT) <> TRY_CAST([p].[GSTRate] AS FLOAT) AND [tO].[Tax] IS NOT NULL AND [p].[GSTRate] IS NOT NULL : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022879187000>"}
{"timestamp": "2025-08-06 17:17:59", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 17:17:59", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 17:18:21", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 17:18:21", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 17:21:56", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show total inventory count for each product category in all warehouses, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:21:56", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 17:21:56", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:21:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the total inventory count, representing the sum of quantity, for each product category across all warehouses."
}"}
{"timestamp": "2025-08-06 17:21:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:21:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the total inventory count, representing the sum of quantity, for each product category across all warehouses.', [{'role': 'user', 'content': 'Display the total inventory count, representing the sum of quantity, for each product category across all warehouses.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:21:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:21:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-06 17:22:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the total inventory count as the sum of the quantity of inventory items for each product category (Category1) across all warehouses. It joins InventoryDetail_GMPL with ProductMaster_AL on MSKU, filters out inventory marked as 'IsOut', groups by product category, and orders the results by category.",
  "query": "SELECT TOP (1000) p.[Category1] AS [ProductCategory], SUM(COALESCE(TRY_CAST(i.[OpenInventory] AS INT), 0)) AS [TotalInventoryCount] FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY p.[Category1] ORDER BY p.[Category1];",
  "error": null
}"}
{"timestamp": "2025-08-06 17:22:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:22:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the total inventory count as the sum of the quantity of inventory items for each product category (Category1) across all warehouses. It joins InventoryDetail_GMPL with ProductMaster_AL on MSKU, filters out inventory marked as 'IsOut', groups by product category, and orders the results by category."}
{"timestamp": "2025-08-06 17:22:02", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:22:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[Category1] AS [ProductCategory], SUM(COALESCE(TRY_CAST(i.[OpenInventory] AS INT), 0)) AS [TotalInventoryCount] FROM [InventoryDetail_GMPL] AS i JOIN [ProductMaster_AL] AS p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY p.[Category1] ORDER BY p.[Category1]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000228790BCA60>"}
{"timestamp": "2025-08-06 17:25:21", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which warehouse has the highest inventory value (sum of MSP) for MSKU products?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:25:21", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Display the total inventory count, representing the sum of quantity, for each product category across all warehouses."}
{"timestamp": "2025-08-06 17:25:21", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:25:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the warehouse with the highest inventory value, calculated as the sum of MSP, specifically for MSKU products."
}"}
{"timestamp": "2025-08-06 17:25:22", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:25:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the warehouse with the highest inventory value, calculated as the sum of MSP, specifically for MSKU products.', [{'role': 'user', 'content': 'Identify the warehouse with the highest inventory value, calculated as the sum of MSP, specifically for MSKU products.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:25:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:25:23", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-06 17:25:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the warehouse with the highest inventory value by calculating the sum of MSP for each warehouse from the InventoryDetail_GMPL table. It joins with tbl_Warehouse_GMPL to get the warehouse name, groups by warehouse ID and name, orders the results by total MSP in descending order, and selects the top warehouse with the highest inventory value.",
  "query": "SELECT TOP (1) w.[Name] AS WarehouseName, SUM(TRY_CAST(i.[MSP] AS FLOAT)) AS TotalInventoryValue FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Id], w.[Name] ORDER BY TotalInventoryValue DESC",
  "error": null
}"}
{"timestamp": "2025-08-06 17:25:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:25:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the warehouse with the highest inventory value by calculating the sum of MSP for each warehouse from the InventoryDetail_GMPL table. It joins with tbl_Warehouse_GMPL to get the warehouse name, groups by warehouse ID and name, orders the results by total MSP in descending order, and selects the top warehouse with the highest inventory value."}
{"timestamp": "2025-08-06 17:25:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:25:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1) w.[Name] AS WarehouseName, SUM(TRY_CAST(i.[MSP] AS FLOAT)) AS TotalInventoryValue FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Id], w.[Name] ORDER BY TotalInventoryValue DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022872F36EB0>"}
{"timestamp": "2025-08-06 17:27:56", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all products in 'Rack A' of  Master Warehouse with their MSP and status, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:27:56", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the warehouse with the highest inventory value, calculated as the sum of MSP, specifically for MSKU products."}
{"timestamp": "2025-08-06 17:27:56", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:27:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products located in 'Rack A' of the Master Warehouse along with their MSP and status."
}"}
{"timestamp": "2025-08-06 17:27:57", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:27:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("List all products located in 'Rack A' of the Master Warehouse along with their MSP and status.", [{'role': 'user', 'content': "List all products located in 'Rack A' of the Master Warehouse along with their MSP and status."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:27:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:27:57", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show all racks with their warehouse IDs.
  query: SELECT [Name], [WarehouseId] FROM [tbl_Rack_GMPL]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-06 17:28:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves up to 1000 products located in racks named 'Rack A' within the warehouse named 'Master Warehouse'. It joins InventoryDetail with tbl_rack and tbl_warehouse to filter by rack and warehouse names, and joins StatusMaster to get the status name. The output includes the product MSKU, MSP, and status name.",
  "query": "SELECT TOP (1000) [i].[MSKU], [i].[MSP], [s].[StatusName] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] INNER JOIN [tbl_Warehouse_GMPL] AS [w] ON [r].[WarehouseId] = [w].[Id] INNER JOIN [StatusMaster_GMPL] AS [s] ON [i].[Status] = [s].[Id] WHERE [r].[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Rack A' AND [w].[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Master Warehouse'",
  "error": null
}"}
{"timestamp": "2025-08-06 17:28:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:28:01", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves up to 1000 products located in racks named 'Rack A' within the warehouse named 'Master Warehouse'. It joins InventoryDetail with tbl_rack and tbl_warehouse to filter by rack and warehouse names, and joins StatusMaster to get the status name. The output includes the product MSKU, MSP, and status name."}
{"timestamp": "2025-08-06 17:28:01", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:28:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [i].[MSKU], [i].[MSP], [s].[StatusName] FROM [InventoryDetail_GMPL] AS [i] INNER JOIN [tbl_rack_GMPL] AS [r] ON [i].[RackId] = [r].[Id] INNER JOIN [tbl_Warehouse_GMPL] AS [w] ON [r].[WarehouseId] = [w].[Id] INNER JOIN [StatusMaster_GMPL] AS [s] ON [i].[Status] = [s].[Id] WHERE [r].[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Rack A' AND [w].[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = 'Master Warehouse' : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022879DE7D20>"}
{"timestamp": "2025-08-06 17:35:38", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 17:35:38", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 17:35:51", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: "Compare total sales (quantity and amount) between GMPL and AL for the last quarter, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:35:51", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 17:35:51", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:35:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter."
}"}
{"timestamp": "2025-08-06 17:35:52", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:35:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter.', [{'role': 'user', 'content': 'Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:35:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:35:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 17:35:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query compares the total sales quantity and sales amount for the last quarter between companies in the GMPL and AL systems. It aggregates sales quantity and amount from tbl_OTCSale_GMPL joined with Company_GMPL for GMPL companies, and from tbl_Amazon_GMPL joined with Company_AL for AL companies. The last quarter is calculated based on the current date, and sales are filtered accordingly. The results show the company system, company name, total quantity, and total amount for each company in the last quarter.",
  "query": "WITH LastQuarterDates AS ( SELECT DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()) - 1, 0) AS QuarterStart, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()), 0)) AS QuarterEnd ), GMPL_Sales AS ( SELECT TOP 1000 c.[CompanyName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST(o.[Amount] AS FLOAT), 0)) AS TotalAmount FROM [tbl_OTCSale_GMPL] o JOIN [Company_GMPL] c ON o.[VendorId] = c.[ID] CROSS JOIN LastQuarterDates lq WHERE TRY_PARSE(o.[OrderDate] AS DATE USING 'en-GB') BETWEEN lq.QuarterStart AND lq.QuarterEnd GROUP BY c.[CompanyName] ), AL_Sales AS ( SELECT TOP 1000 c.[CompanyName], SUM(COALESCE(TRY_CAST(a.[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST(a.[ItemPrice] AS FLOAT), 0)) AS TotalAmount FROM [tbl_Amazon_GMPL] a JOIN [Company_AL] c ON a.[BuyerName] COLLATE SQL_Latin1_General_CP1_CI_AS = c.[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS CROSS JOIN LastQuarterDates lq WHERE TRY_PARSE(LEFT(a.[PurchaseDate], 10) AS DATE USING 'en-GB') BETWEEN lq.QuarterStart AND lq.QuarterEnd GROUP BY c.[CompanyName] ) SELECT 'GMPL' AS CompanySystem, [CompanyName], TotalQuantity, TotalAmount FROM GMPL_Sales UNION ALL SELECT 'AL' AS CompanySystem, [CompanyName], TotalQuantity, TotalAmount FROM AL_Sales ORDER BY CompanySystem, [CompanyName];",
  "error": null
}"}
{"timestamp": "2025-08-06 17:35:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:35:58", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query compares the total sales quantity and sales amount for the last quarter between companies in the GMPL and AL systems. It aggregates sales quantity and amount from tbl_OTCSale_GMPL joined with Company_GMPL for GMPL companies, and from tbl_Amazon_GMPL joined with Company_AL for AL companies. The last quarter is calculated based on the current date, and sales are filtered accordingly. The results show the company system, company name, total quantity, and total amount for each company in the last quarter."}
{"timestamp": "2025-08-06 17:35:58", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:35:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH LastQuarterDates AS ( SELECT DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()) - 1, 0) AS QuarterStart, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()), 0)) AS QuarterEnd ), GMPL_Sales AS ( SELECT TOP 1000 c.[CompanyName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST(o.[Amount] AS FLOAT), 0)) AS TotalAmount FROM [tbl_OTCSale_GMPL] o JOIN [Company_GMPL] c ON o.[VendorId] = c.[ID] CROSS JOIN LastQuarterDates lq WHERE TRY_PARSE(o.[OrderDate] AS DATE USING 'en-GB') BETWEEN lq.QuarterStart AND lq.QuarterEnd GROUP BY c.[CompanyName] ), AL_Sales AS ( SELECT TOP 1000 c.[CompanyName], SUM(COALESCE(TRY_CAST(a.[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST(a.[ItemPrice] AS FLOAT), 0)) AS TotalAmount FROM [tbl_Amazon_GMPL] a JOIN [Company_AL] c ON a.[BuyerName] COLLATE SQL_Latin1_General_CP1_CI_AS = c.[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS CROSS JOIN LastQuarterDates lq WHERE TRY_PARSE(LEFT(a.[PurchaseDate], 10) AS DATE USING 'en-GB') BETWEEN lq.QuarterStart AND lq.QuarterEnd GROUP BY c.[CompanyName] ) SELECT 'GMPL' AS CompanySystem, [CompanyName], TotalQuantity, TotalAmount FROM GMPL_Sales UNION ALL SELECT 'AL' AS CompanySystem, [CompanyName], TotalQuantity, TotalAmount FROM AL_Sales ORDER BY CompanySystem, [CompanyName]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x00000228791873F0>"}
{"timestamp": "2025-08-06 17:36:39", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-06 17:36:39", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-06 17:36:45", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Compare total sales (quantity and amount) between GMPL and AL for the last quarter, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:36:45", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-06 17:36:45", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:36:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter."
}"}
{"timestamp": "2025-08-06 17:36:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:36:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter.', [{'role': 'user', 'content': 'Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:36:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:36:47", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-06 17:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query compares the total sales quantity and sales amount for the last quarter between companies GMPL and AL. It aggregates sales data from tbl_OTCSale_GMPL for GMPL companies and from tbl_Amazon_GMPL for AL companies, summing the quantities and amounts for each company type within the last quarter period. The last quarter is calculated based on the current date, and the results show company type, total quantity, and total amount.",
  "query": "WITH LastQuarterDates AS ( SELECT DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()) - 1, 0) AS QuarterStart, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()), 0)) AS QuarterEnd ), GMPL_Sales AS ( SELECT SUM(COALESCE(TRY_CAST([otc].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([otc].[Amount] AS FLOAT), 0)) AS TotalAmount FROM [tbl_OTCSale_GMPL] AS [otc] CROSS JOIN LastQuarterDates AS [lqd] WHERE TRY_PARSE([otc].[OrderDate] AS DATE USING 'en-GB') BETWEEN [lqd].[QuarterStart] AND [lqd].[QuarterEnd] ), AL_Sales AS ( SELECT SUM(COALESCE(TRY_CAST([amz].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([amz].[ItemPrice] AS FLOAT), 0)) AS TotalAmount FROM [tbl_Amazon_GMPL] AS [amz] CROSS JOIN LastQuarterDates AS [lqd] WHERE TRY_PARSE(LEFT([amz].[PurchaseDate], 10) AS DATE USING 'en-GB') BETWEEN [lqd].[QuarterStart] AND [lqd].[QuarterEnd] ) SELECT TOP 1000 'GMPL' AS [CompanyType], [g].[TotalQuantity], [g].[TotalAmount] FROM GMPL_Sales AS [g] UNION ALL SELECT TOP 1000 'AL' AS [CompanyType], [a].[TotalQuantity], [a].[TotalAmount] FROM AL_Sales AS [a];",
  "error": null
}"}
{"timestamp": "2025-08-06 17:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query compares the total sales quantity and sales amount for the last quarter between companies GMPL and AL. It aggregates sales data from tbl_OTCSale_GMPL for GMPL companies and from tbl_Amazon_GMPL for AL companies, summing the quantities and amounts for each company type within the last quarter period. The last quarter is calculated based on the current date, and the results show company type, total quantity, and total amount."}
{"timestamp": "2025-08-06 17:36:55", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:36:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH LastQuarterDates AS ( SELECT DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()) - 1, 0) AS QuarterStart, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, GETDATE()), 0)) AS QuarterEnd ), GMPL_Sales AS ( SELECT SUM(COALESCE(TRY_CAST([otc].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([otc].[Amount] AS FLOAT), 0)) AS TotalAmount FROM [tbl_OTCSale_GMPL] AS [otc] CROSS JOIN LastQuarterDates AS [lqd] WHERE TRY_PARSE([otc].[OrderDate] AS DATE USING 'en-GB') BETWEEN [lqd].[QuarterStart] AND [lqd].[QuarterEnd] ), AL_Sales AS ( SELECT SUM(COALESCE(TRY_CAST([amz].[Quantity] AS FLOAT), 0)) AS TotalQuantity, SUM(COALESCE(TRY_CAST([amz].[ItemPrice] AS FLOAT), 0)) AS TotalAmount FROM [tbl_Amazon_GMPL] AS [amz] CROSS JOIN LastQuarterDates AS [lqd] WHERE TRY_PARSE(LEFT([amz].[PurchaseDate], 10) AS DATE USING 'en-GB') BETWEEN [lqd].[QuarterStart] AND [lqd].[QuarterEnd] ) SELECT TOP 1000 'GMPL' AS [CompanyType], [g].[TotalQuantity], [g].[TotalAmount] FROM GMPL_Sales AS [g] UNION ALL SELECT TOP 1000 'AL' AS [CompanyType], [a].[TotalQuantity], [a].[TotalAmount] FROM AL_Sales AS [a]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022879E7AD60>"}
{"timestamp": "2025-08-06 17:39:42", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which product category has the highest sales volume in OTC orders?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:39:42", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Compare the total sales quantity and sales amount between the companies GMPL and AL for the last quarter."}
{"timestamp": "2025-08-06 17:39:42", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:39:43", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the product category with the highest sales volume in over-the-counter (OTC) orders."
}"}
{"timestamp": "2025-08-06 17:39:43", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:39:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the product category with the highest sales volume in over-the-counter (OTC) orders.', [{'role': 'user', 'content': 'Identify the product category with the highest sales volume in over-the-counter (OTC) orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:39:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:39:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: List all OTC sales orders with order number and customer name.
  query: SELECT [OrderNo], [CustomerName] FROM [tbl_OTCSale_GMPL]
"}
{"timestamp": "2025-08-06 17:39:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the product category with the highest sales volume in over-the-counter (OTC) orders by summing the quantity of products sold in tbl_OTCSale_GMPL joined with ProductMaster_AL on ProductID and SKU. It groups the results by the Category1 column from ProductMaster_AL and orders the results by total quantity sold in descending order, returning the top category.",
  "query": "SELECT TOP 1 p.[Category1], SUM(TRY_CAST(o.[Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] AS o INNER JOIN [ProductMaster_AL] AS p ON o.[ProductID] = p.[Id] GROUP BY p.[Category1] ORDER BY TotalQuantity DESC",
  "error": null
}"}
{"timestamp": "2025-08-06 17:39:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:39:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the product category with the highest sales volume in over-the-counter (OTC) orders by summing the quantity of products sold in tbl_OTCSale_GMPL joined with ProductMaster_AL on ProductID and SKU. It groups the results by the Category1 column from ProductMaster_AL and orders the results by total quantity sold in descending order, returning the top category."}
{"timestamp": "2025-08-06 17:39:46", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:39:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1 p.[Category1], SUM(TRY_CAST(o.[Quantity] AS FLOAT)) AS TotalQuantity FROM [tbl_OTCSale_GMPL] AS o INNER JOIN [ProductMaster_AL] AS p ON o.[ProductID] = p.[Id] GROUP BY p.[Category1] ORDER BY TotalQuantity DESC : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022872F36EB0>"}
{"timestamp": "2025-08-06 17:46:02", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show the top 5 customers (by order value) from both GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-06 17:46:02", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the product category with the highest sales volume in over-the-counter (OTC) orders."}
{"timestamp": "2025-08-06 17:46:02", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-06 17:46:03", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Display the top 5 customers ranked by order value from the companies GMPL and AL."
}"}
{"timestamp": "2025-08-06 17:46:03", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-06 17:46:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Display the top 5 customers ranked by order value from the companies GMPL and AL.', [{'role': 'user', 'content': 'Display the top 5 customers ranked by order value from the companies GMPL and AL.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-06 17:46:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-06 17:46:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: List all OTC sales orders with order number and customer name.
  query: SELECT [OrderNo], [CustomerName] FROM [tbl_OTCSale_GMPL]
"}
{"timestamp": "2025-08-06 17:46:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 5 customers ranked by total order value from both the GMPL and AL company systems. It aggregates order values from tbl_OTCSale_GMPL for GMPL companies and from tbl_Amazon_GMPL for AL companies, joining with their respective company tables to get customer names. The results from both systems are combined using UNION ALL, then ranked by total order value in descending order, and the top 5 customers are selected.",
  "query": "WITH GMPL_CustomerOrders AS ( SELECT [c].[CompanyName] AS [CustomerName], SUM(TRY_CAST([o].[Amount] AS FLOAT)) AS [TotalOrderValue] FROM [tbl_OTCSale_GMPL] AS [o] INNER JOIN [Company_GMPL] AS [c] ON [o].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [c].[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [c].[CompanyName] ), AL_CustomerOrders AS ( SELECT [c].[CompanyName] AS [CustomerName], SUM(TRY_CAST([a].[ItemPrice] AS FLOAT) * TRY_CAST([a].[Quantity] AS FLOAT)) AS [TotalOrderValue] FROM [tbl_Amazon_GMPL] AS [a] INNER JOIN [Company_AL] AS [c] ON [a].[BuyerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [c].[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [c].[CompanyName] ), CombinedOrders AS ( SELECT [CustomerName], [TotalOrderValue] FROM [GMPL_CustomerOrders] UNION ALL SELECT [CustomerName], [TotalOrderValue] FROM [AL_CustomerOrders] ) SELECT TOP 5 [CustomerName], SUM([TotalOrderValue]) AS [TotalOrderValue] FROM [CombinedOrders] GROUP BY [CustomerName] ORDER BY [TotalOrderValue] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-06 17:46:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-06 17:46:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 5 customers ranked by total order value from both the GMPL and AL company systems. It aggregates order values from tbl_OTCSale_GMPL for GMPL companies and from tbl_Amazon_GMPL for AL companies, joining with their respective company tables to get customer names. The results from both systems are combined using UNION ALL, then ranked by total order value in descending order, and the top 5 customers are selected."}
{"timestamp": "2025-08-06 17:46:08", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-06 17:46:08", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH GMPL_CustomerOrders AS ( SELECT [c].[CompanyName] AS [CustomerName], SUM(TRY_CAST([o].[Amount] AS FLOAT)) AS [TotalOrderValue] FROM [tbl_OTCSale_GMPL] AS [o] INNER JOIN [Company_GMPL] AS [c] ON [o].[CustomerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [c].[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [c].[CompanyName] ), AL_CustomerOrders AS ( SELECT [c].[CompanyName] AS [CustomerName], SUM(TRY_CAST([a].[ItemPrice] AS FLOAT) * TRY_CAST([a].[Quantity] AS FLOAT)) AS [TotalOrderValue] FROM [tbl_Amazon_GMPL] AS [a] INNER JOIN [Company_AL] AS [c] ON [a].[BuyerName] COLLATE SQL_Latin1_General_CP1_CI_AS = [c].[CompanyName] COLLATE SQL_Latin1_General_CP1_CI_AS GROUP BY [c].[CompanyName] ), CombinedOrders AS ( SELECT [CustomerName], [TotalOrderValue] FROM [GMPL_CustomerOrders] UNION ALL SELECT [CustomerName], [TotalOrderValue] FROM [AL_CustomerOrders] ) SELECT TOP 5 [CustomerName], SUM([TotalOrderValue]) AS [TotalOrderValue] FROM [CombinedOrders] GROUP BY [CustomerName] ORDER BY [TotalOrderValue] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000022879E7AF20>"}
{"timestamp": "2025-08-07 09:20:32", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-07 09:20:33", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-07 09:20:33", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-07 09:20:33", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-07 09:20:34", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-07 09:21:50", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 09:21:51", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 09:27:02", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 09:27:02", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 09:27:19", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all products with mismatched SKU and MSKU in GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:27:19", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 09:27:19", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:27:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products where the SKU and MSKU values do not match in the GMPL and AL datasets."
}"}
{"timestamp": "2025-08-07 09:27:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:27:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products where the SKU and MSKU values do not match in the GMPL and AL datasets.', [{'role': 'user', 'content': 'List all products where the SKU and MSKU values do not match in the GMPL and AL datasets.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:27:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:27:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all active products with their SKU and product name.
  query: SELECT [SKU], [ProductName] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0

Example 2:
  input: Display all Amazon listings with their SKU and product name.
  query: SELECT [Sku], [ProductName] FROM [AmazonListing_GMPL]
"}
{"timestamp": "2025-08-07 09:27:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products from the GMPL and AL datasets where the SKU from ProductMaster_AL does not match the MSKU from AmazonListing_GMPL. It joins AmazonListing_GMPL with ProductMaster_AL on the SKU and MSKU columns and filters for rows where these values are different. The output includes SKU from ProductMaster_AL, MSKU from AmazonListing_GMPL, and the product name from ProductMaster_AL.",
  "query": "SELECT TOP (1000) p.[SKU], a.[MSKU], p.[ProductName] FROM [AmazonListing_GMPL] AS a INNER JOIN [ProductMaster_AL] AS p ON a.[MSKU] = p.[MSKU] WHERE p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> a.[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS",
  "error": null
}"}
{"timestamp": "2025-08-07 09:27:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 09:27:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products from the GMPL and AL datasets where the SKU from ProductMaster_AL does not match the MSKU from AmazonListing_GMPL. It joins AmazonListing_GMPL with ProductMaster_AL on the SKU and MSKU columns and filters for rows where these values are different. The output includes SKU from ProductMaster_AL, MSKU from AmazonListing_GMPL, and the product name from ProductMaster_AL."}
{"timestamp": "2025-08-07 09:27:24", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 09:27:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU], a.[MSKU], p.[ProductName] FROM [AmazonListing_GMPL] AS a INNER JOIN [ProductMaster_AL] AS p ON a.[MSKU] = p.[MSKU] WHERE p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> a.[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026513AFFEE0>"}
{"timestamp": "2025-08-07 09:29:04", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products are listed on Amazon but not in OTC sales?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:29:04", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all products where the SKU and MSKU values do not match in the GMPL and AL datasets."}
{"timestamp": "2025-08-07 09:29:04", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:29:06", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products where the SKU and MSKU values do not match in the GMPL and AL datasets, and identify which of these products are listed on Amazon but not present in over-the-counter (OTC) sales."
}"}
{"timestamp": "2025-08-07 09:29:06", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:29:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products where the SKU and MSKU values do not match in the GMPL and AL datasets, and identify which of these products are listed on Amazon but not present in over-the-counter (OTC) sales.', [{'role': 'user', 'content': 'List all products where the SKU and MSKU values do not match in the GMPL and AL datasets, and identify which of these products are listed on Amazon but not present in over-the-counter (OTC) sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:29:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:29:06", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Display all Amazon listings with their SKU and product name.
  query: SELECT [Sku], [ProductName] FROM [AmazonListing_GMPL]
"}
{"timestamp": "2025-08-07 09:29:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products from the GMPL and AL datasets where the SKU and MSKU values do not match. It identifies products listed on Amazon (amazonlisting_GMPL) but not present in over-the-counter (OTC) sales (tbl_OTCSale_GMPL). The query joins ProductMaster_AL with AmazonListing_GMPL on MSKU, filters for mismatched SKU and MSKU between ProductMaster_AL and AmazonListing_GMPL, and excludes products found in OTC sales by left joining tbl_OTCSale_GMPL and filtering for null OTC records. The output includes ProductMaster_AL SKU, MSKU, ProductName, and AmazonListing_GMPL SKU.",
  "query": "SELECT TOP (1000) p.[SKU] AS AL_SKU, p.[MSKU] AS AL_MSKU, p.[ProductName], a.[Sku] AS Amazon_SKU FROM [ProductMaster_AL] AS p JOIN [AmazonListing_GMPL] AS a ON p.[MSKU] = a.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = o.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS AND o.[OTCID] IS NULL",
  "error": null
}"}
{"timestamp": "2025-08-07 09:29:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 09:29:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products from the GMPL and AL datasets where the SKU and MSKU values do not match. It identifies products listed on Amazon (amazonlisting_GMPL) but not present in over-the-counter (OTC) sales (tbl_OTCSale_GMPL). The query joins ProductMaster_AL with AmazonListing_GMPL on MSKU, filters for mismatched SKU and MSKU between ProductMaster_AL and AmazonListing_GMPL, and excludes products found in OTC sales by left joining tbl_OTCSale_GMPL and filtering for null OTC records. The output includes ProductMaster_AL SKU, MSKU, ProductName, and AmazonListing_GMPL SKU."}
{"timestamp": "2025-08-07 09:29:10", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 09:29:12", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU] AS AL_SKU, p.[MSKU] AS AL_MSKU, p.[ProductName], a.[Sku] AS Amazon_SKU FROM [ProductMaster_AL] AS p JOIN [AmazonListing_GMPL] AS a ON p.[MSKU] = a.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = o.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS AND o.[OTCID] IS NULL : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026513BAE660>"}
{"timestamp": "2025-08-07 09:29:21", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 09:29:21", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 09:29:33", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List all products with mismatched SKU and MSKU in GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:29:34", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 09:29:34", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:29:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products where the SKU and MSKU values do not match in the GMPL and AL datasets."
}"}
{"timestamp": "2025-08-07 09:29:35", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:29:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products where the SKU and MSKU values do not match in the GMPL and AL datasets.', [{'role': 'user', 'content': 'List all products where the SKU and MSKU values do not match in the GMPL and AL datasets.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:29:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:29:35", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Get all active products with their SKU and product name.
  query: SELECT [SKU], [ProductName] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0

Example 2:
  input: Display all Amazon listings with their SKU and product name.
  query: SELECT [Sku], [ProductName] FROM [AmazonListing_GMPL]
"}
{"timestamp": "2025-08-07 09:29:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products from the GMPL and AL datasets where the SKU from ProductMaster_AL does not match the MSKU from AmazonListing_GMPL. It joins AmazonListing_GMPL with ProductMaster_AL on SKU and MSKU columns and filters for rows where these values differ. The output includes SKU from ProductMaster_AL, MSKU from AmazonListing_GMPL, and the product name from ProductMaster_AL.",
  "query": "SELECT TOP (1000) p_al.[SKU], a_gmpl.[MSKU], p_al.[ProductName] FROM [AmazonListing_GMPL] AS a_gmpl INNER JOIN [ProductMaster_AL] AS p_al ON a_gmpl.[MSKU] = p_al.[MSKU] WHERE p_al.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> a_gmpl.[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS",
  "error": null
}"}
{"timestamp": "2025-08-07 09:29:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 09:29:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products from the GMPL and AL datasets where the SKU from ProductMaster_AL does not match the MSKU from AmazonListing_GMPL. It joins AmazonListing_GMPL with ProductMaster_AL on SKU and MSKU columns and filters for rows where these values differ. The output includes SKU from ProductMaster_AL, MSKU from AmazonListing_GMPL, and the product name from ProductMaster_AL."}
{"timestamp": "2025-08-07 09:29:38", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 09:29:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p_al.[SKU], a_gmpl.[MSKU], p_al.[ProductName] FROM [AmazonListing_GMPL] AS a_gmpl INNER JOIN [ProductMaster_AL] AS p_al ON a_gmpl.[MSKU] = p_al.[MSKU] WHERE p_al.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> a_gmpl.[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026513BAE200>"}
{"timestamp": "2025-08-07 09:36:54", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products are listed on Amazon but not in OTC sales?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:36:54", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List all products where the SKU and MSKU values do not match in the GMPL and AL datasets."}
{"timestamp": "2025-08-07 09:36:54", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:36:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List all products where the SKU and MSKU values do not match in the GMPL and AL datasets, and identify which of these products are listed on Amazon but not present in over-the-counter (OTC) sales."
}"}
{"timestamp": "2025-08-07 09:36:55", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:36:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List all products where the SKU and MSKU values do not match in the GMPL and AL datasets, and identify which of these products are listed on Amazon but not present in over-the-counter (OTC) sales.', [{'role': 'user', 'content': 'List all products where the SKU and MSKU values do not match in the GMPL and AL datasets, and identify which of these products are listed on Amazon but not present in over-the-counter (OTC) sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:36:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:36:56", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Display all Amazon listings with their SKU and product name.
  query: SELECT [Sku], [ProductName] FROM [AmazonListing_GMPL]
"}
{"timestamp": "2025-08-07 09:37:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products from the GMPL and AL datasets where the SKU and MSKU values do not match. It identifies products listed on Amazon (amazonlisting_GMPL) but not present in over-the-counter sales (tbl_OTCSale_GMPL). The query joins ProductMaster_AL with AmazonListing_GMPL on MSKU, filters for mismatched SKU and MSKU, and excludes products found in OTC sales by left joining tbl_OTCSale_GMPL and filtering for null OTC records. The output includes SKU and MSKU from ProductMaster_AL and SKU from AmazonListing_GMPL.",
  "query": "SELECT TOP (1000) p.[SKU] AS AL_SKU, p.[MSKU] AS AL_MSKU, a.[Sku] AS Amazon_SKU FROM [ProductMaster_AL] AS p JOIN [AmazonListing_GMPL] AS a ON p.[MSKU] = a.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = o.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> p.[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS AND o.[OTCID] IS NULL;",
  "error": null
}"}
{"timestamp": "2025-08-07 09:37:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 09:37:00", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products from the GMPL and AL datasets where the SKU and MSKU values do not match. It identifies products listed on Amazon (amazonlisting_GMPL) but not present in over-the-counter sales (tbl_OTCSale_GMPL). The query joins ProductMaster_AL with AmazonListing_GMPL on MSKU, filters for mismatched SKU and MSKU, and excludes products found in OTC sales by left joining tbl_OTCSale_GMPL and filtering for null OTC records. The output includes SKU and MSKU from ProductMaster_AL and SKU from AmazonListing_GMPL."}
{"timestamp": "2025-08-07 09:37:00", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 09:37:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p.[SKU] AS AL_SKU, p.[MSKU] AS AL_MSKU, a.[Sku] AS Amazon_SKU FROM [ProductMaster_AL] AS p JOIN [AmazonListing_GMPL] AS a ON p.[MSKU] = a.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] AS o ON a.[Sku] COLLATE SQL_Latin1_General_CP1_CI_AS = o.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS WHERE p.[SKU] COLLATE SQL_Latin1_General_CP1_CI_AS <> p.[MSKU] COLLATE SQL_Latin1_General_CP1_CI_AS AND o.[OTCID] IS NULL; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026513AFDB00>"}
{"timestamp": "2025-08-07 09:42:41", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 09:42:44", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 09:42:45", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 09:42:50", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products that exist in both GMPL and AL databases but have different MSP values., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:42:50", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 09:42:50", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:42:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show products that are present in both GMPL and AL databases where the MSP values differ."
}"}
{"timestamp": "2025-08-07 09:42:51", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:42:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show products that are present in both GMPL and AL databases where the MSP values differ.', [{'role': 'user', 'content': 'Show products that are present in both GMPL and AL databases where the MSP values differ.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:42:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:42:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-07 09:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that exist in both GMPL and AL product master tables by matching their MSKU values, and where the MSP (Minimum Selling Price) values differ between the two databases. It selects the MSKU, product names from both databases, and their respective MSP values for comparison.",
  "query": "SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl INNER JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-07 09:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 09:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that exist in both GMPL and AL product master tables by matching their MSKU values, and where the MSP (Minimum Selling Price) values differ between the two databases. It selects the MSKU, product names from both databases, and their respective MSP values for comparison."}
{"timestamp": "2025-08-07 09:42:55", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 09:42:55", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl INNER JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026513A952B0>"}
{"timestamp": "2025-08-07 09:44:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List customers who have placed orders in both GMPL and AL systems, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:44:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Show products that are present in both GMPL and AL databases where the MSP values differ."}
{"timestamp": "2025-08-07 09:44:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:44:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List customers who have placed orders in both GMPL and AL systems."
}"}
{"timestamp": "2025-08-07 09:44:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:44:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List customers who have placed orders in both GMPL and AL systems.', [{'role': 'user', 'content': 'List customers who have placed orders in both GMPL and AL systems.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:44:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:44:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: List all OTC sales orders with order number and customer name.
  query: SELECT [OrderNo], [CustomerName] FROM [tbl_OTCSale_GMPL]
"}
{"timestamp": "2025-08-07 09:45:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves customers who have placed orders in both GMPL and AL systems by selecting distinct customer names from tbl_OTCSale_GMPL and distinct emails from Autofurnish_OrderS_GMPL, then finding the intersection of these customers based on case-insensitive matching of customer names and emails.",
  "query": "WITH GMPL_Customers AS ( SELECT DISTINCT [t].[CustomerName] AS [Customer] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[CustomerName] IS NOT NULL ), AL_Customers AS ( SELECT DISTINCT [a].[Email] AS [Customer] FROM [Autofurnish_OrderS_GMPL] AS [a] WHERE [a].[Email] IS NOT NULL ) SELECT TOP (1000) [g].[Customer] FROM [GMPL_Customers] AS [g] INNER JOIN [AL_Customers] AS [a] ON [g].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS = [a].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [g].[Customer];",
  "error": null
}"}
{"timestamp": "2025-08-07 09:45:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 09:45:02", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves customers who have placed orders in both GMPL and AL systems by selecting distinct customer names from tbl_OTCSale_GMPL and distinct emails from Autofurnish_OrderS_GMPL, then finding the intersection of these customers based on case-insensitive matching of customer names and emails."}
{"timestamp": "2025-08-07 09:45:02", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 09:45:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH GMPL_Customers AS ( SELECT DISTINCT [t].[CustomerName] AS [Customer] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[CustomerName] IS NOT NULL ), AL_Customers AS ( SELECT DISTINCT [a].[Email] AS [Customer] FROM [Autofurnish_OrderS_GMPL] AS [a] WHERE [a].[Email] IS NOT NULL ) SELECT TOP (1000) [g].[Customer] FROM [GMPL_Customers] AS [g] INNER JOIN [AL_Customers] AS [a] ON [g].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS = [a].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [g].[Customer]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000002651489A510>"}
{"timestamp": "2025-08-07 09:45:19", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List customers who have placed orders in both GMPL and AL systems, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 09:45:19", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: List customers who have placed orders in both GMPL and AL systems."}
{"timestamp": "2025-08-07 09:45:19", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 09:45:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List customers who have placed orders in both the GMPL and AL order management systems."
}"}
{"timestamp": "2025-08-07 09:45:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 09:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List customers who have placed orders in both the GMPL and AL order management systems.', [{'role': 'user', 'content': 'List customers who have placed orders in both the GMPL and AL order management systems.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 09:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 09:45:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: List all OTC sales orders with order number and customer name.
  query: SELECT [OrderNo], [CustomerName] FROM [tbl_OTCSale_GMPL]
"}
{"timestamp": "2025-08-07 09:48:32", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-07 09:48:33", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-07 09:48:33", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-07 09:48:33", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-07 09:48:34", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-07 10:04:01", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 10:04:03", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 10:04:08", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 10:04:08", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 10:04:18", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products that exist in both GMPL and AL databases but have different MSP values., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 10:04:18", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 10:04:18", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 10:04:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show products that are present in both GMPL and AL databases where the MSP values differ."
}"}
{"timestamp": "2025-08-07 10:04:19", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 10:04:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show products that are present in both GMPL and AL databases where the MSP values differ.', [{'role': 'user', 'content': 'Show products that are present in both GMPL and AL databases where the MSP values differ.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 10:04:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 10:04:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-07 10:04:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that exist in both GMPL and AL product master tables with the same MSKU but have different MSP values. It selects the MSKU, product names from both tables, and their respective MSP values, filtering for rows where MSP values differ.",
  "query": "SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl INNER JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-07 10:04:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 10:04:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that exist in both GMPL and AL product master tables with the same MSKU but have different MSP values. It selects the MSKU, product names from both tables, and their respective MSP values, filtering for rows where MSP values differ."}
{"timestamp": "2025-08-07 10:04:24", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 10:04:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl INNER JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000011E0DB62F20>"}
{"timestamp": "2025-08-07 10:04:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: List customers who have placed orders in both GMPL and AL systems., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 10:04:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Show products that are present in both GMPL and AL databases where the MSP values differ."}
{"timestamp": "2025-08-07 10:04:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 10:04:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "List customers who have placed orders in both GMPL and AL systems."
}"}
{"timestamp": "2025-08-07 10:04:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 10:04:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('List customers who have placed orders in both GMPL and AL systems.', [{'role': 'user', 'content': 'List customers who have placed orders in both GMPL and AL systems.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 10:04:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 10:04:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: List all OTC sales orders with order number and customer name.
  query: SELECT [OrderNo], [CustomerName] FROM [tbl_OTCSale_GMPL]
"}
{"timestamp": "2025-08-07 10:04:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves customers who have placed orders in both GMPL and AL systems by selecting distinct customer names from tbl_OTCSale_GMPL and distinct emails from Autofurnish_OrderS_GMPL, then finding the intersection of these customers based on case-insensitive matching of customer names and emails.",
  "query": "WITH GMPL_Customers AS ( SELECT DISTINCT [t].[CustomerName] AS [Customer] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[CustomerName] IS NOT NULL ), AL_Customers AS ( SELECT DISTINCT [af].[Email] AS [Customer] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Email] IS NOT NULL ) SELECT TOP (1000) [g].[Customer] FROM [GMPL_Customers] AS [g] INNER JOIN [AL_Customers] AS [a] ON [g].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS = [a].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [g].[Customer];",
  "error": null
}"}
{"timestamp": "2025-08-07 10:04:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 10:04:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves customers who have placed orders in both GMPL and AL systems by selecting distinct customer names from tbl_OTCSale_GMPL and distinct emails from Autofurnish_OrderS_GMPL, then finding the intersection of these customers based on case-insensitive matching of customer names and emails."}
{"timestamp": "2025-08-07 10:04:53", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 10:04:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH GMPL_Customers AS ( SELECT DISTINCT [t].[CustomerName] AS [Customer] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[CustomerName] IS NOT NULL ), AL_Customers AS ( SELECT DISTINCT [af].[Email] AS [Customer] FROM [Autofurnish_OrderS_GMPL] AS [af] WHERE [af].[Email] IS NOT NULL ) SELECT TOP (1000) [g].[Customer] FROM [GMPL_Customers] AS [g] INNER JOIN [AL_Customers] AS [a] ON [g].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS = [a].[Customer] COLLATE SQL_Latin1_General_CP1_CI_AS ORDER BY [g].[Customer]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000011E0DB62D60>"}
{"timestamp": "2025-08-07 10:05:28", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 10:05:28", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 10:05:36", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Show products that exist in both GMPL and AL databases but have different MSP values., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 10:05:36", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 10:05:36", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 10:05:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Show products that are present in both GMPL and AL databases where the MSP values differ."
}"}
{"timestamp": "2025-08-07 10:05:37", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 10:05:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show products that are present in both GMPL and AL databases where the MSP values differ.', [{'role': 'user', 'content': 'Show products that are present in both GMPL and AL databases where the MSP values differ.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 10:05:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 10:05:38", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-07 10:05:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves products that exist in both GMPL and AL product master tables by matching their MSKU values, and where the MSP (Minimum Selling Price) values differ between the two tables. It selects the MSKU, product names from both tables, and the MSP values from both tables for comparison.",
  "query": "SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl INNER JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-07 10:05:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 10:05:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves products that exist in both GMPL and AL product master tables by matching their MSKU values, and where the MSP (Minimum Selling Price) values differ between the two tables. It selects the MSKU, product names from both tables, and the MSP values from both tables for comparison."}
{"timestamp": "2025-08-07 10:05:41", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 10:05:41", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl INNER JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000011E0DB15390>"}
{"timestamp": "2025-08-07 10:05:47", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: give me the MSKU only, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 10:05:47", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Show products that are present in both GMPL and AL databases where the MSP values differ."}
{"timestamp": "2025-08-07 10:05:47", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 10:05:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Show the MSKU of products that are present in both GMPL and AL databases where the MSP values differ."
}"}
{"timestamp": "2025-08-07 10:05:48", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 10:05:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Show the MSKU of products that are present in both GMPL and AL databases where the MSP values differ.', [{'role': 'user', 'content': 'Show the MSKU of products that are present in both GMPL and AL databases where the MSP values differ.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 10:05:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 10:05:49", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-07 10:05:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the MSKU values of products that exist in both the GMPL and AL product master tables where the MSP values differ. It performs an inner join between ProductMaster_AL and ProductMaster_GMPL on the MSKU column and filters for rows where the MSP values are not equal after casting them to float.",
  "query": "SELECT TOP (1000) [p_al].[MSKU] FROM [ProductMaster_AL] AS [p_al] INNER JOIN [ProductMaster_GMPL] AS [p_gmpl] ON [p_al].[MSKU] = [p_gmpl].[MSKU] WHERE TRY_CAST([p_al].[MSP] AS FLOAT) <> TRY_CAST([p_gmpl].[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-07 10:05:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 10:05:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the MSKU values of products that exist in both the GMPL and AL product master tables where the MSP values differ. It performs an inner join between ProductMaster_AL and ProductMaster_GMPL on the MSKU column and filters for rows where the MSP values are not equal after casting them to float."}
{"timestamp": "2025-08-07 10:05:52", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 10:05:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) [p_al].[MSKU] FROM [ProductMaster_AL] AS [p_al] INNER JOIN [ProductMaster_GMPL] AS [p_gmpl] ON [p_al].[MSKU] = [p_gmpl].[MSKU] WHERE TRY_CAST([p_al].[MSP] AS FLOAT) <> TRY_CAST([p_gmpl].[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000011E0DC5C2F0>"}
{"timestamp": "2025-08-07 10:06:51", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 10:06:51", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 10:06:57", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What percentage of inventory is currently 'On Hold' in each warehouse, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 10:06:57", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 10:06:57", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 10:06:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the percentage of inventory that is currently marked as 'On Hold' in each warehouse."
}"}
{"timestamp": "2025-08-07 10:06:58", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 10:06:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Calculate the percentage of inventory that is currently marked as 'On Hold' in each warehouse.", [{'role': 'user', 'content': "Calculate the percentage of inventory that is currently marked as 'On Hold' in each warehouse."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 10:06:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 10:06:59", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-07 10:07:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the percentage of inventory items marked as 'On Hold' in each warehouse. It joins InventoryDetail_GMPL with tbl_Warehouse_GMPL on WarehouseId, groups by warehouse name, and computes the total inventory count and the count of items where IsHold is true. The percentage is rounded to one decimal place.",
  "query": "SELECT TOP (1000) w.[Name] AS [Warehouse], ROUND(CAST(SUM(CASE WHEN i.[IsHold] = 1 THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / NULLIF(COUNT(i.[Id]), 0), 1) AS [OnHoldPercentage] FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name] ORDER BY w.[Name];",
  "error": null
}"}
{"timestamp": "2025-08-07 10:07:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 10:07:03", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the percentage of inventory items marked as 'On Hold' in each warehouse. It joins InventoryDetail_GMPL with tbl_Warehouse_GMPL on WarehouseId, groups by warehouse name, and computes the total inventory count and the count of items where IsHold is true. The percentage is rounded to one decimal place."}
{"timestamp": "2025-08-07 10:07:03", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 10:07:04", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) w.[Name] AS [Warehouse], ROUND(CAST(SUM(CASE WHEN i.[IsHold] = 1 THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / NULLIF(COUNT(i.[Id]), 0), 1) AS [OnHoldPercentage] FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] GROUP BY w.[Name] ORDER BY w.[Name]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000011E0DC5D0F0>"}
{"timestamp": "2025-08-07 11:07:03", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-07 11:07:04", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-07 11:07:04", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-07 11:07:04", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-07 11:07:05", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-07 11:07:16", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 11:07:17", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 11:10:30", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which warehouse has the highest stock discrepancy between physical count and system records?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:10:30", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 11:10:30", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:10:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records."
}"}
{"timestamp": "2025-08-07 11:10:33", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:10:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records.', [{'role': 'user', 'content': 'Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:10:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:10:34", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-07 11:10:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the stock discrepancy for each warehouse by comparing the physical inventory count (count of inventory items) with the system records (sum of MSP values) grouped by warehouse. It selects the warehouse with the highest absolute discrepancy. The query joins InventoryDetail_GMPL with tbl_Warehouse_GMPL on WarehouseId, groups by warehouse Id and name, and orders by the absolute difference between physical count and system MSP sum in descending order, returning the top 1 warehouse with its discrepancy value.",
  "query": "WITH WarehouseStock AS ( SELECT [w].[Id] AS [WarehouseId], [w].[Name] AS [WarehouseName], COUNT([i].[Id]) AS [PhysicalCount], ROUND(SUM(TRY_CAST([i].[MSP] AS FLOAT)), 1) AS [SystemMSP] FROM [InventoryDetail_GMPL] AS [i] JOIN [tbl_Warehouse_GMPL] AS [w] ON [i].[WarehouseId] = [w].[Id] WHERE [i].[IsDeleted] = 0 GROUP BY [w].[Id], [w].[Name] ) SELECT TOP (1) [WarehouseId], [WarehouseName], [PhysicalCount], [SystemMSP], ROUND(ABS(CAST([PhysicalCount] AS FLOAT) - [SystemMSP]), 1) AS [Discrepancy] FROM WarehouseStock ORDER BY [Discrepancy] DESC;",
  "error": null
}"}
{"timestamp": "2025-08-07 11:10:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:10:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the stock discrepancy for each warehouse by comparing the physical inventory count (count of inventory items) with the system records (sum of MSP values) grouped by warehouse. It selects the warehouse with the highest absolute discrepancy. The query joins InventoryDetail_GMPL with tbl_Warehouse_GMPL on WarehouseId, groups by warehouse Id and name, and orders by the absolute difference between physical count and system MSP sum in descending order, returning the top 1 warehouse with its discrepancy value."}
{"timestamp": "2025-08-07 11:10:39", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:10:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH WarehouseStock AS ( SELECT [w].[Id] AS [WarehouseId], [w].[Name] AS [WarehouseName], COUNT([i].[Id]) AS [PhysicalCount], ROUND(SUM(TRY_CAST([i].[MSP] AS FLOAT)), 1) AS [SystemMSP] FROM [InventoryDetail_GMPL] AS [i] JOIN [tbl_Warehouse_GMPL] AS [w] ON [i].[WarehouseId] = [w].[Id] WHERE [i].[IsDeleted] = 0 GROUP BY [w].[Id], [w].[Name] ) SELECT TOP (1) [WarehouseId], [WarehouseName], [PhysicalCount], [SystemMSP], ROUND(ABS(CAST([PhysicalCount] AS FLOAT) - [SystemMSP]), 1) AS [Discrepancy] FROM WarehouseStock ORDER BY [Discrepancy] DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC12306DD0>"}
{"timestamp": "2025-08-07 11:12:15", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: How many products are in 'Finished Goods' vs. 'Raw Materials' status across both GMPL and AL?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:12:15", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records."}
{"timestamp": "2025-08-07 11:12:15", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:12:16", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Count the number of products categorized under 'Finished Goods' and 'Raw Materials' status across the companies GMPL and AL."
}"}
{"timestamp": "2025-08-07 11:12:16", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:12:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Count the number of products categorized under 'Finished Goods' and 'Raw Materials' status across the companies GMPL and AL.", [{'role': 'user', 'content': "Count the number of products categorized under 'Finished Goods' and 'Raw Materials' status across the companies GMPL and AL."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:12:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:12:17", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-07 11:12:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query counts the number of products grouped by their ProductStatus categorized as 'Finished Goods' or 'Raw Materials' from the ProductMaster_AL table. It also includes the company source as 'AL' for these products. Since the schema does not provide a direct link between products and companies for GMPL, the query only retrieves counts for AL products with the specified statuses.",
  "query": "SELECT TOP (1000) 'AL' AS [Company], p.[ProductStatus], COUNT(*) AS [ProductCount] FROM [ProductMaster_AL] AS p WHERE p.[ProductStatus] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Finished Goods', 'Raw Materials') GROUP BY p.[ProductStatus] ORDER BY p.[ProductStatus];",
  "error": null
}"}
{"timestamp": "2025-08-07 11:12:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:12:19", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query counts the number of products grouped by their ProductStatus categorized as 'Finished Goods' or 'Raw Materials' from the ProductMaster_AL table. It also includes the company source as 'AL' for these products. Since the schema does not provide a direct link between products and companies for GMPL, the query only retrieves counts for AL products with the specified statuses."}
{"timestamp": "2025-08-07 11:12:19", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:12:20", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) 'AL' AS [Company], p.[ProductStatus], COUNT(*) AS [ProductCount] FROM [ProductMaster_AL] AS p WHERE p.[ProductStatus] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Finished Goods', 'Raw Materials') GROUP BY p.[ProductStatus] ORDER BY p.[ProductStatus]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC1224DB00>"}
{"timestamp": "2025-08-07 11:12:31", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products have been in the warehouse for more than 6 months without being sold?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:12:31", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Count the number of products categorized under 'Finished Goods' and 'Raw Materials' status across the companies GMPL and AL."}
{"timestamp": "2025-08-07 11:12:31", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:12:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products categorized under 'Finished Goods' and 'Raw Materials' in the companies GMPL and AL that have been stored in the warehouse for more than 6 months without any recorded sales."
}"}
{"timestamp": "2025-08-07 11:12:32", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:12:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ("Identify products categorized under 'Finished Goods' and 'Raw Materials' in the companies GMPL and AL that have been stored in the warehouse for more than 6 months without any recorded sales.", [{'role': 'user', 'content': "Identify products categorized under 'Finished Goods' and 'Raw Materials' in the companies GMPL and AL that have been stored in the warehouse for more than 6 months without any recorded sales."}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:12:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:12:32", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-07 11:12:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products categorized under 'Finished Goods' and 'Raw Materials' in both GMPL and AL companies that have been stored in the warehouse for more than 6 months without any recorded sales. It uses CTEs to get products from ProductMaster_AL with the specified categories, filters inventory details for products stored over 6 months ago, and excludes products with sales in tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL. The final output lists the top 1000 such products with their MSKU, ProductName, Category1, and the date of inventory creation.",
  "query": "WITH [FilteredProducts] AS ( SELECT [p].[MSKU], [p].[ProductName], [p].[Category1] FROM [ProductMaster_AL] AS [p] WHERE [p].[Category1] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Finished Goods', 'Raw Materials') ), [InventoryOlderThan6Months] AS ( SELECT [i].[MSKU], MIN([i].[CreatedDate]) AS [FirstStoredDate] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[IsDeleted] = 0 AND [i].[CreatedDate] < DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) GROUP BY [i].[MSKU] ), [SalesOTC] AS ( SELECT DISTINCT [o].[ProductID] FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[ProductID] IS NOT NULL ), [SalesAmazon] AS ( SELECT DISTINCT [a].[SKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ), [SalesAF] AS ( SELECT DISTINCT [af].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [af] WHERE [af].[Lineitem_sku] IS NOT NULL ) SELECT TOP (1000) [fp].[MSKU], [fp].[ProductName], [fp].[Category1], [io6].[FirstStoredDate] FROM [FilteredProducts] AS [fp] JOIN [InventoryOlderThan6Months] AS [io6] ON [fp].[MSKU] = [io6].[MSKU] WHERE [fp].[MSKU] NOT IN ( SELECT DISTINCT [p].[SKU] FROM [tbl_OTCSale_GMPL] AS [p] WHERE [p].[ProductID] IS NOT NULL ) AND [fp].[MSKU] NOT IN ( SELECT DISTINCT [a].[SKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ) AND [fp].[MSKU] NOT IN ( SELECT DISTINCT [af].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [af] WHERE [af].[Lineitem_sku] IS NOT NULL ) ORDER BY [io6].[FirstStoredDate] ASC;",
  "error": null
}"}
{"timestamp": "2025-08-07 11:12:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:12:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products categorized under 'Finished Goods' and 'Raw Materials' in both GMPL and AL companies that have been stored in the warehouse for more than 6 months without any recorded sales. It uses CTEs to get products from ProductMaster_AL with the specified categories, filters inventory details for products stored over 6 months ago, and excludes products with sales in tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL. The final output lists the top 1000 such products with their MSKU, ProductName, Category1, and the date of inventory creation."}
{"timestamp": "2025-08-07 11:12:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:12:43", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH [FilteredProducts] AS ( SELECT [p].[MSKU], [p].[ProductName], [p].[Category1] FROM [ProductMaster_AL] AS [p] WHERE [p].[Category1] COLLATE SQL_Latin1_General_CP1_CI_AS IN ('Finished Goods', 'Raw Materials') ), [InventoryOlderThan6Months] AS ( SELECT [i].[MSKU], MIN([i].[CreatedDate]) AS [FirstStoredDate] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[IsDeleted] = 0 AND [i].[CreatedDate] < DATEADD(MONTH, -6, CAST(GETDATE() AS DATE)) GROUP BY [i].[MSKU] ), [SalesOTC] AS ( SELECT DISTINCT [o].[ProductID] FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[ProductID] IS NOT NULL ), [SalesAmazon] AS ( SELECT DISTINCT [a].[SKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ), [SalesAF] AS ( SELECT DISTINCT [af].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [af] WHERE [af].[Lineitem_sku] IS NOT NULL ) SELECT TOP (1000) [fp].[MSKU], [fp].[ProductName], [fp].[Category1], [io6].[FirstStoredDate] FROM [FilteredProducts] AS [fp] JOIN [InventoryOlderThan6Months] AS [io6] ON [fp].[MSKU] = [io6].[MSKU] WHERE [fp].[MSKU] NOT IN ( SELECT DISTINCT [p].[SKU] FROM [tbl_OTCSale_GMPL] AS [p] WHERE [p].[ProductID] IS NOT NULL ) AND [fp].[MSKU] NOT IN ( SELECT DISTINCT [a].[SKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ) AND [fp].[MSKU] NOT IN ( SELECT DISTINCT [af].[Lineitem_sku] FROM [af_orderitems_GMPL] AS [af] WHERE [af].[Lineitem_sku] IS NOT NULL ) ORDER BY [io6].[FirstStoredDate] ASC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC1224DB00>"}
{"timestamp": "2025-08-07 11:12:51", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 11:12:54", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 11:12:54", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 11:13:08", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which warehouse has the highest stock discrepancy between physical count and system records?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:13:08", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 11:13:08", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:13:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records."
}"}
{"timestamp": "2025-08-07 11:13:09", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:13:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records.', [{'role': 'user', 'content': 'Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:13:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:13:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-07 11:13:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the stock discrepancy for each warehouse by comparing the physical inventory count (count of inventory items) with the system records (sum of MSP values) grouped by warehouse. It selects the warehouse with the highest absolute discrepancy. The query joins InventoryDetail with tbl_Warehouse on WarehouseId, groups by warehouse, and orders by the absolute difference between physical count and system MSP sum in descending order, returning the top warehouse with its name, physical count, system MSP sum, and discrepancy.",
  "query": "WITH WarehouseStock AS ( SELECT w.[Id] AS WarehouseId, w.[Name] AS WarehouseName, COUNT(i.[Id]) AS PhysicalCount, SUM(TRY_CAST(i.[MSP] AS FLOAT)) AS SystemMSPSum FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE i.[IsDeleted] = 0 GROUP BY w.[Id], w.[Name] ) SELECT TOP (1) ws.[WarehouseName], ws.[PhysicalCount], ROUND(ws.[SystemMSPSum], 1) AS SystemMSPSum, ROUND(ABS(CAST(ws.[PhysicalCount] AS FLOAT) - ws.[SystemMSPSum]), 1) AS Discrepancy FROM WarehouseStock AS ws ORDER BY Discrepancy DESC;",
  "error": null
}"}
{"timestamp": "2025-08-07 11:13:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:13:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the stock discrepancy for each warehouse by comparing the physical inventory count (count of inventory items) with the system records (sum of MSP values) grouped by warehouse. It selects the warehouse with the highest absolute discrepancy. The query joins InventoryDetail with tbl_Warehouse on WarehouseId, groups by warehouse, and orders by the absolute difference between physical count and system MSP sum in descending order, returning the top warehouse with its name, physical count, system MSP sum, and discrepancy."}
{"timestamp": "2025-08-07 11:13:13", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:13:13", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH WarehouseStock AS ( SELECT w.[Id] AS WarehouseId, w.[Name] AS WarehouseName, COUNT(i.[Id]) AS PhysicalCount, SUM(TRY_CAST(i.[MSP] AS FLOAT)) AS SystemMSPSum FROM [InventoryDetail_GMPL] AS i JOIN [tbl_Warehouse_GMPL] AS w ON i.[WarehouseId] = w.[Id] WHERE i.[IsDeleted] = 0 GROUP BY w.[Id], w.[Name] ) SELECT TOP (1) ws.[WarehouseName], ws.[PhysicalCount], ROUND(ws.[SystemMSPSum], 1) AS SystemMSPSum, ROUND(ABS(CAST(ws.[PhysicalCount] AS FLOAT) - ws.[SystemMSPSum]), 1) AS Discrepancy FROM WarehouseStock AS ws ORDER BY Discrepancy DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC12306D60>"}
{"timestamp": "2025-08-07 11:13:23", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products have been in the warehouse for more than 6 months without being sold?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:13:23", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the warehouse with the highest stock discrepancy between the physical inventory count and the system records."}
{"timestamp": "2025-08-07 11:13:23", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:13:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products that have been stored in the warehouse for more than 6 months without any recorded sales."
}"}
{"timestamp": "2025-08-07 11:13:24", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:13:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products that have been stored in the warehouse for more than 6 months without any recorded sales.', [{'role': 'user', 'content': 'Identify products that have been stored in the warehouse for more than 6 months without any recorded sales.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:13:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:13:24", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show products with their inventory count across all warehouses.
  query: SELECT p.[SKU], p.[ProductName], COUNT(i.[Id]) AS InventoryCount FROM [ProductMaster_GMPL] p LEFT JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-07 11:13:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products stored in the inventory for more than 6 months without any recorded sales in tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL. It selects MSKU from InventoryDetail_GMPL where CreatedDate is older than 6 months from current date and excludes MSKUs found in any of the sales tables. The result is limited to top 1000 distinct MSKUs.",
  "query": "WITH InventoryOld AS ( SELECT DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[CreatedDate] < DATEADD(MONTH, -6, GETDATE()) AND [i].[MSKU] IS NOT NULL ), OTC_Sales AS ( SELECT DISTINCT [o].[MSKU] FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[MSKU] IS NOT NULL ), Amazon_Sales AS ( SELECT DISTINCT [a].[SKU] AS [MSKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ), AF_Sales AS ( SELECT DISTINCT [af].[Lineitem_sku] AS [MSKU] FROM [af_orderitems_GMPL] AS [af] WHERE [af].[Lineitem_sku] IS NOT NULL ) SELECT TOP (1000) [io].[MSKU] FROM [InventoryOld] AS [io] WHERE [io].[MSKU] NOT IN (SELECT [msku] FROM [OTC_Sales]) AND [io].[MSKU] NOT IN (SELECT [msku] FROM [Amazon_Sales]) AND [io].[MSKU] NOT IN (SELECT [msku] FROM [AF_Sales]) ORDER BY [io].[MSKU];",
  "error": null
}"}
{"timestamp": "2025-08-07 11:13:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:13:29", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products stored in the inventory for more than 6 months without any recorded sales in tbl_OTCSale_GMPL, tbl_Amazon_GMPL, and af_orderitems_GMPL. It selects MSKU from InventoryDetail_GMPL where CreatedDate is older than 6 months from current date and excludes MSKUs found in any of the sales tables. The result is limited to top 1000 distinct MSKUs."}
{"timestamp": "2025-08-07 11:13:29", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:13:31", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH InventoryOld AS ( SELECT DISTINCT [i].[MSKU] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[CreatedDate] < DATEADD(MONTH, -6, GETDATE()) AND [i].[MSKU] IS NOT NULL ), OTC_Sales AS ( SELECT DISTINCT [o].[MSKU] FROM [tbl_OTCSale_GMPL] AS [o] WHERE [o].[MSKU] IS NOT NULL ), Amazon_Sales AS ( SELECT DISTINCT [a].[SKU] AS [MSKU] FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[SKU] IS NOT NULL ), AF_Sales AS ( SELECT DISTINCT [af].[Lineitem_sku] AS [MSKU] FROM [af_orderitems_GMPL] AS [af] WHERE [af].[Lineitem_sku] IS NOT NULL ) SELECT TOP (1000) [io].[MSKU] FROM [InventoryOld] AS [io] WHERE [io].[MSKU] NOT IN (SELECT [msku] FROM [OTC_Sales]) AND [io].[MSKU] NOT IN (SELECT [msku] FROM [Amazon_Sales]) AND [io].[MSKU] NOT IN (SELECT [msku] FROM [AF_Sales]) ORDER BY [io].[MSKU]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC12FC2350>"}
{"timestamp": "2025-08-07 11:15:39", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What is the average time a product stays in inventory before being sold?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:15:39", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify products that have been stored in the warehouse for more than 6 months without any recorded sales."}
{"timestamp": "2025-08-07 11:15:39", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:15:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the average duration that a product remains in inventory before its first recorded sale."
}"}
{"timestamp": "2025-08-07 11:15:40", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:15:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate the average duration that a product remains in inventory before its first recorded sale.', [{'role': 'user', 'content': 'Calculate the average duration that a product remains in inventory before its first recorded sale.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:15:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:15:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-07 11:15:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the average duration in days that a product remains in inventory before its first recorded sale. It uses a CTE to find the earliest inventory creation date per product MSKU from InventoryDetail_GMPL, and another CTE to find the earliest sale date per product from tbl_OTCSale_GMPL (converting OrderDate from dd/MM/yyyy string to date). It then joins these CTEs on MSKU and computes the difference in days between the first sale date and the inventory creation date. Finally, it calculates the average of these durations across all products where both dates exist.",
  "query": "WITH InventoryFirstDate AS ( SELECT [i].[MSKU], MIN([i].[CreatedDate]) AS [FirstInventoryDate] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL GROUP BY [i].[MSKU] ), FirstSaleDate AS ( SELECT [o].[ProductID], MIN(TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB')) AS [FirstSaleDate] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL GROUP BY [o].[ProductID] ) SELECT ROUND(AVG(DATEDIFF(DAY, [inv].[FirstInventoryDate], [fs].[FirstSaleDate])), 1) AS [AverageDaysInInventoryBeforeFirstSale] FROM [InventoryFirstDate] AS [inv] JOIN [FirstSaleDate] AS [fs] ON [inv].[MSKU] = ( SELECT [p].[MSKU] FROM [ProductMaster_AL] AS [p] WHERE [p].[Id] = [fs].[ProductID] ) WHERE [fs].[FirstSaleDate] > [inv].[FirstInventoryDate]",
  "error": null
}"}
{"timestamp": "2025-08-07 11:15:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:15:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the average duration in days that a product remains in inventory before its first recorded sale. It uses a CTE to find the earliest inventory creation date per product MSKU from InventoryDetail_GMPL, and another CTE to find the earliest sale date per product from tbl_OTCSale_GMPL (converting OrderDate from dd/MM/yyyy string to date). It then joins these CTEs on MSKU and computes the difference in days between the first sale date and the inventory creation date. Finally, it calculates the average of these durations across all products where both dates exist."}
{"timestamp": "2025-08-07 11:15:46", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:19:52", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH InventoryFirstDate AS ( SELECT [i].[MSKU], MIN([i].[CreatedDate]) AS [FirstInventoryDate] FROM [InventoryDetail_GMPL] AS [i] WHERE [i].[MSKU] IS NOT NULL GROUP BY [i].[MSKU] ), FirstSaleDate AS ( SELECT [o].[ProductID], MIN(TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB')) AS [FirstSaleDate] FROM [tbl_OTCSale_GMPL] AS [o] WHERE TRY_PARSE([o].[OrderDate] AS DATE USING 'en-GB') IS NOT NULL GROUP BY [o].[ProductID] ) SELECT ROUND(AVG(DATEDIFF(DAY, [inv].[FirstInventoryDate], [fs].[FirstSaleDate])), 1) AS [AverageDaysInInventoryBeforeFirstSale] FROM [InventoryFirstDate] AS [inv] JOIN [FirstSaleDate] AS [fs] ON [inv].[MSKU] = ( SELECT [p].[MSKU] FROM [ProductMaster_AL] AS [p] WHERE [p].[Id] = [fs].[ProductID] ) WHERE [fs].[FirstSaleDate] > [inv].[FirstInventoryDate] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC12305470>"}
{"timestamp": "2025-08-07 11:23:18", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 11:23:21", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 11:23:21", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 11:24:46", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which customers have the highest return rates (RTO) in Amazon orders?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:24:46", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 11:24:46", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:24:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the customers with the highest return rates (RTO) specifically for Amazon orders."
}"}
{"timestamp": "2025-08-07 11:24:47", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:24:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the customers with the highest return rates (RTO) specifically for Amazon orders.', [{'role': 'user', 'content': 'Identify the customers with the highest return rates (RTO) specifically for Amazon orders.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:24:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:24:48", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1

Example 2:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC
"}
{"timestamp": "2025-08-07 11:24:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies the top 1000 customers with the highest return rates (RTO) for Amazon orders. It calculates the total number of orders and the number of returned orders (where Status indicates return to origin) per customer from the tbl_Amazon_GMPL table. The return rate is computed as the ratio of returned orders to total orders, rounded to one decimal place and expressed as a percentage string. The results include the customer name, total orders, returned orders, and return rate, ordered by return rate descending.",
  "query": "WITH CustomerOrderStats AS ( SELECT [a].[BuyerName], COUNT(*) AS TotalOrders, SUM(CASE WHEN [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%RTO%' THEN 1 ELSE 0 END) AS ReturnedOrders FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[BuyerName] IS NOT NULL AND [a].[BuyerName] <> '' GROUP BY [a].[BuyerName] ) SELECT TOP 1000 [BuyerName], TotalOrders, ReturnedOrders, CONCAT(ROUND((TRY_CAST(ReturnedOrders AS FLOAT) * 100.0) / NULLIF(TotalOrders, 0), 1), '%') AS ReturnRate FROM CustomerOrderStats ORDER BY TRY_CAST(ReturnedOrders AS FLOAT) / NULLIF(TotalOrders, 0) DESC;",
  "error": null
}"}
{"timestamp": "2025-08-07 11:24:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:24:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies the top 1000 customers with the highest return rates (RTO) for Amazon orders. It calculates the total number of orders and the number of returned orders (where Status indicates return to origin) per customer from the tbl_Amazon_GMPL table. The return rate is computed as the ratio of returned orders to total orders, rounded to one decimal place and expressed as a percentage string. The results include the customer name, total orders, returned orders, and return rate, ordered by return rate descending."}
{"timestamp": "2025-08-07 11:24:53", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:24:53", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH CustomerOrderStats AS ( SELECT [a].[BuyerName], COUNT(*) AS TotalOrders, SUM(CASE WHEN [a].[Status] COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%RTO%' THEN 1 ELSE 0 END) AS ReturnedOrders FROM [tbl_Amazon_GMPL] AS [a] WHERE [a].[BuyerName] IS NOT NULL AND [a].[BuyerName] <> '' GROUP BY [a].[BuyerName] ) SELECT TOP 1000 [BuyerName], TotalOrders, ReturnedOrders, CONCAT(ROUND((TRY_CAST(ReturnedOrders AS FLOAT) * 100.0) / NULLIF(TotalOrders, 0), 1), '%') AS ReturnRate FROM CustomerOrderStats ORDER BY TRY_CAST(ReturnedOrders AS FLOAT) / NULLIF(TotalOrders, 0) DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC11F75DA0>"}
{"timestamp": "2025-08-07 11:31:19", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: What percentage of OTC orders are paid via credit vs. cash?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:31:19", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the customers with the highest return rates (RTO) specifically for Amazon orders."}
{"timestamp": "2025-08-07 11:31:19", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:31:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Calculate the percentage distribution of over-the-counter (OTC) orders paid via credit card versus cash."
}"}
{"timestamp": "2025-08-07 11:31:20", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:31:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Calculate the percentage distribution of over-the-counter (OTC) orders paid via credit card versus cash.', [{'role': 'user', 'content': 'Calculate the percentage distribution of over-the-counter (OTC) orders paid via credit card versus cash.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:31:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:31:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query calculates the percentage distribution of over-the-counter (OTC) orders based on payment type, distinguishing between credit card payments (IsCredit = 1) and cash payments (IsCredit = 0). It counts the number of orders for each payment type and computes their percentage share of the total orders from the tbl_OTCSale_GMPL table.",
  "query": "WITH PaymentCounts AS ( SELECT CASE WHEN [t].[IsCredit] = 1 THEN 'Credit Card' WHEN [t].[IsCredit] = 0 THEN 'Cash' ELSE 'Other' END AS [PaymentType], COUNT(*) AS [OrderCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[IsCredit] IN (0, 1) GROUP BY CASE WHEN [t].[IsCredit] = 1 THEN 'Credit Card' WHEN [t].[IsCredit] = 0 THEN 'Cash' ELSE 'Other' END ), TotalOrders AS ( SELECT COUNT(*) AS [TotalCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[IsCredit] IN (0, 1) ) SELECT TOP (1000) [pc].[PaymentType], [pc].[OrderCount], ROUND(TRY_CAST([pc].[OrderCount] AS FLOAT) * 100.0 / NULLIF([to].[TotalCount], 0), 1) AS [Percentage] FROM [PaymentCounts] AS [pc] CROSS JOIN [TotalOrders] AS [to] ORDER BY [pc].[PaymentType];",
  "error": null
}"}
{"timestamp": "2025-08-07 11:31:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:31:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query calculates the percentage distribution of over-the-counter (OTC) orders based on payment type, distinguishing between credit card payments (IsCredit = 1) and cash payments (IsCredit = 0). It counts the number of orders for each payment type and computes their percentage share of the total orders from the tbl_OTCSale_GMPL table."}
{"timestamp": "2025-08-07 11:31:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:31:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
WITH PaymentCounts AS ( SELECT CASE WHEN [t].[IsCredit] = 1 THEN 'Credit Card' WHEN [t].[IsCredit] = 0 THEN 'Cash' ELSE 'Other' END AS [PaymentType], COUNT(*) AS [OrderCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[IsCredit] IN (0, 1) GROUP BY CASE WHEN [t].[IsCredit] = 1 THEN 'Credit Card' WHEN [t].[IsCredit] = 0 THEN 'Cash' ELSE 'Other' END ), TotalOrders AS ( SELECT COUNT(*) AS [TotalCount] FROM [tbl_OTCSale_GMPL] AS [t] WHERE [t].[IsCredit] IN (0, 1) ) SELECT TOP (1000) [pc].[PaymentType], [pc].[OrderCount], ROUND(TRY_CAST([pc].[OrderCount] AS FLOAT) * 100.0 / NULLIF([to].[TotalCount], 0), 1) AS [Percentage] FROM [PaymentCounts] AS [pc] CROSS JOIN [TotalOrders] AS [to] ORDER BY [pc].[PaymentType]; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC12FC39A0>"}
{"timestamp": "2025-08-07 11:38:19", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products have the highest discount rates in Autofurnish orders?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 11:38:19", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Calculate the percentage distribution of over-the-counter (OTC) orders paid via credit card versus cash."}
{"timestamp": "2025-08-07 11:38:19", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 11:38:21", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the products with the highest discount rates in orders from the Autofurnish channel."
}"}
{"timestamp": "2025-08-07 11:38:21", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 11:38:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the products with the highest discount rates in orders from the Autofurnish channel.', [{'role': 'user', 'content': 'Identify the products with the highest discount rates in orders from the Autofurnish channel.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 11:38:21", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 11:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the top 1000 products from Autofurnish orders with the highest discount rates. It selects the product SKU, product name, and calculates the discount rate as the percentage of the line item discount over the line item price, rounded to one decimal place. The results are ordered by the discount rate in descending order.",
  "query": "SELECT TOP 1000 [afoi].[Lineitem_sku] AS [SKU], [afoi].[Lineitem_name] AS [ProductName], CONCAT(ROUND((TRY_CAST([afoi].[Lineitem_discount] AS FLOAT) * 100.0) / NULLIF(TRY_CAST([afoi].[Lineitem_price] AS FLOAT), 0), 1), '%') AS [DiscountRate] FROM [af_orderitems_GMPL] AS [afoi] WHERE TRY_CAST([afoi].[Lineitem_price] AS FLOAT) > 0 ORDER BY TRY_CAST([afoi].[Lineitem_discount] AS FLOAT) * 1.0 / NULLIF(TRY_CAST([afoi].[Lineitem_price] AS FLOAT), 0) DESC;",
  "error": null
}"}
{"timestamp": "2025-08-07 11:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 11:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the top 1000 products from Autofurnish orders with the highest discount rates. It selects the product SKU, product name, and calculates the discount rate as the percentage of the line item discount over the line item price, rounded to one decimal place. The results are ordered by the discount rate in descending order."}
{"timestamp": "2025-08-07 11:38:26", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 11:38:26", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [afoi].[Lineitem_sku] AS [SKU], [afoi].[Lineitem_name] AS [ProductName], CONCAT(ROUND((TRY_CAST([afoi].[Lineitem_discount] AS FLOAT) * 100.0) / NULLIF(TRY_CAST([afoi].[Lineitem_price] AS FLOAT), 0), 1), '%') AS [DiscountRate] FROM [af_orderitems_GMPL] AS [afoi] WHERE TRY_CAST([afoi].[Lineitem_price] AS FLOAT) > 0 ORDER BY TRY_CAST([afoi].[Lineitem_discount] AS FLOAT) * 1.0 / NULLIF(TRY_CAST([afoi].[Lineitem_price] AS FLOAT), 0) DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC11F75DA0>"}
{"timestamp": "2025-08-07 11:57:49", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 11:57:58", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-07 11:57:59", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-07 12:01:09", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which products have inconsistent MSP pricing between GMPL and AL?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 12:01:09", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-07 12:01:09", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 12:01:10", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the products with inconsistent MSP pricing between the companies GMPL and AL."
}"}
{"timestamp": "2025-08-07 12:01:10", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 12:01:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the products with inconsistent MSP pricing between the companies GMPL and AL.', [{'role': 'user', 'content': 'Identify the products with inconsistent MSP pricing between the companies GMPL and AL.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 12:01:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 12:01:10", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find customers who made purchases through multiple channels (OTC, Amazon, Autofurnish)
  query: SELECT c.[CompanyName], c.[Email], 'OTC' AS Channel FROM [Company_mapping_GMPL] cm JOIN [Company_GMPL] c ON cm.[CompanyId] = c.[ID] JOIN [tbl_OTCSale_GMPL] o ON cm.[Id] = TRY_CAST(o.[CompanyBillID] AS INT) WHERE o.[CustomerName] IS NOT NULL UNION SELECT a.[BuyerName], a.[BuyerPhoneNo], 'Amazon' FROM [tbl_Amazon_GMPL] a WHERE a.[BuyerName] IS NOT NULL UNION SELECT af.[Billing_Name], af.[Email], 'Autofurnish' FROM [Autofurnish_OrderS_GMPL] af WHERE af.[Email] IS NOT NULL GROUP BY [CompanyName], [Email] HAVING COUNT(DISTINCT Channel) > 1
"}
{"timestamp": "2025-08-07 12:01:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products with inconsistent MSP pricing between the companies GMPL and AL by joining ProductMaster_AL and InventoryDetail_GMPL on MSKU. It selects the MSKU, product names from both sources, and MSP prices from both tables, filtering for cases where the MSP prices differ. The query limits the result to the top 1000 records.",
  "query": "SELECT TOP (1000) p_al.[MSKU] AS [MSKU], p_al.[ProductName] AS [ProductName_AL], i.[MSP] AS [MSP_GMPL], p_al.[MSP] AS [MSP_AL] FROM [ProductMaster_AL] AS p_al JOIN [InventoryDetail_GMPL] AS i ON p_al.[MSKU] = i.[MSKU] WHERE TRY_CAST(i.[MSP] AS FLOAT) <> TRY_CAST(p_al.[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-07 12:01:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 12:01:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products with inconsistent MSP pricing between the companies GMPL and AL by joining ProductMaster_AL and InventoryDetail_GMPL on MSKU. It selects the MSKU, product names from both sources, and MSP prices from both tables, filtering for cases where the MSP prices differ. The query limits the result to the top 1000 records."}
{"timestamp": "2025-08-07 12:01:14", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 12:01:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p_al.[MSKU] AS [MSKU], p_al.[ProductName] AS [ProductName_AL], i.[MSP] AS [MSP_GMPL], p_al.[MSP] AS [MSP_AL] FROM [ProductMaster_AL] AS p_al JOIN [InventoryDetail_GMPL] AS i ON p_al.[MSKU] = i.[MSKU] WHERE TRY_CAST(i.[MSP] AS FLOAT) <> TRY_CAST(p_al.[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC122B5400>"}
{"timestamp": "2025-08-07 12:02:35", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Which product categories have the highest and lowest profit margins?, section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-07 12:02:35", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: user: Identify the products with inconsistent MSP pricing between the companies GMPL and AL."}
{"timestamp": "2025-08-07 12:02:35", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-07 12:02:36", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the product categories with the highest and lowest profit margins."
}"}
{"timestamp": "2025-08-07 12:02:36", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-07 12:02:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the product categories with the highest and lowest profit margins.', [{'role': 'user', 'content': 'Identify the product categories with the highest and lowest profit margins.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-07 12:02:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-07 12:02:36", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Find the top 5 selling products by quantity across all sales channels (OTC, Amazon, Autofurnish).
  query: SELECT TOP 5 p.[SKU], p.[ProductName], SUM(COALESCE(TRY_CAST(o.[Quantity] AS INT), 0) + COALESCE(a.[quantity], 0) + COALESCE(af.[Lineitem_quantity], 0)) AS TotalQuantity FROM [ProductMaster_GMPL] p LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] GROUP BY p.[SKU], p.[ProductName] ORDER BY TotalQuantity DESC

Example 2:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC
"}
{"timestamp": "2025-08-07 12:02:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query retrieves the product categories along with their maximum and minimum profit margins from the ProductMaster_AL table. It selects Category1, and calculates the maximum and minimum values of TRY_CAST(MPTHProfit AS FLOAT) rounded to 1 decimal place for each category. The results are grouped by Category1 and ordered by the maximum profit margin descending to show categories with highest and lowest profit margins.",
  "query": "SELECT TOP 1000 [p].[Category1], ROUND(MAX(TRY_CAST([p].[MPTHProfit] AS FLOAT)), 1) AS MaxProfitMargin, ROUND(MIN(TRY_CAST([p].[MPTHProfit] AS FLOAT)), 1) AS MinProfitMargin FROM [ProductMaster_AL] AS [p] WHERE TRY_CAST([p].[MPTHProfit] AS FLOAT) IS NOT NULL GROUP BY [p].[Category1] ORDER BY MaxProfitMargin DESC;",
  "error": null
}"}
{"timestamp": "2025-08-07 12:02:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-07 12:02:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query retrieves the product categories along with their maximum and minimum profit margins from the ProductMaster_AL table. It selects Category1, and calculates the maximum and minimum values of TRY_CAST(MPTHProfit AS FLOAT) rounded to 1 decimal place for each category. The results are grouped by Category1 and ordered by the maximum profit margin descending to show categories with highest and lowest profit margins."}
{"timestamp": "2025-08-07 12:02:40", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-07 12:02:40", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP 1000 [p].[Category1], ROUND(MAX(TRY_CAST([p].[MPTHProfit] AS FLOAT)), 1) AS MaxProfitMargin, ROUND(MIN(TRY_CAST([p].[MPTHProfit] AS FLOAT)), 1) AS MinProfitMargin FROM [ProductMaster_AL] AS [p] WHERE TRY_CAST([p].[MPTHProfit] AS FLOAT) IS NOT NULL GROUP BY [p].[Category1] ORDER BY MaxProfitMargin DESC; : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001CC122B5400>"}
{"timestamp": "2025-08-08 10:22:56", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-08 10:22:57", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-08 10:22:57", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-08 10:22:58", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-08 10:22:59", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-08 10:23:18", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-08 10:23:20", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-08 10:23:25", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-08 10:23:25", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-08 10:23:37", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify the products with inconsistent MSP pricing between the companies GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-08 10:23:37", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-08 10:23:37", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-08 10:23:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Identify the products where the MSP pricing is inconsistent between the companies GMPL and AL."
}"}
{"timestamp": "2025-08-08 10:23:38", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-08 10:23:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the products where the MSP pricing is inconsistent between the companies GMPL and AL.', [{'role': 'user', 'content': 'Identify the products where the MSP pricing is inconsistent between the companies GMPL and AL.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-08 10:23:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-08 10:23:39", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-08 10:23:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products where the MSP (Minimum Selling Price) differs between the GMPL and AL companies. It joins the ProductMaster_AL table (alias p_al) with the InventoryDetail_GMPL table (alias i_gmpl) on the MSKU column to get MSP from GMPL inventory, then compares the MSP values from ProductMaster_AL and InventoryDetail_GMPL. It selects the MSKU, MSP from AL, and MSP from GMPL where the MSP values are not equal, limiting the result to the top 1000 records.",
  "query": "SELECT TOP (1000) p_al.[MSKU], p_al.[MSP] AS MSP_AL, i_gmpl.[MSP] AS MSP_GMPL FROM [ProductMaster_AL] AS p_al JOIN [InventoryDetail_GMPL] AS i_gmpl ON p_al.[MSKU] = i_gmpl.[MSKU] WHERE TRY_CAST(p_al.[MSP] AS FLOAT) <> TRY_CAST(i_gmpl.[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-08 10:23:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-08 10:23:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products where the MSP (Minimum Selling Price) differs between the GMPL and AL companies. It joins the ProductMaster_AL table (alias p_al) with the InventoryDetail_GMPL table (alias i_gmpl) on the MSKU column to get MSP from GMPL inventory, then compares the MSP values from ProductMaster_AL and InventoryDetail_GMPL. It selects the MSKU, MSP from AL, and MSP from GMPL where the MSP values are not equal, limiting the result to the top 1000 records."}
{"timestamp": "2025-08-08 10:23:42", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-08 10:23:45", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p_al.[MSKU], p_al.[MSP] AS MSP_AL, i_gmpl.[MSP] AS MSP_GMPL FROM [ProductMaster_AL] AS p_al JOIN [InventoryDetail_GMPL] AS i_gmpl ON p_al.[MSKU] = i_gmpl.[MSKU] WHERE TRY_CAST(p_al.[MSP] AS FLOAT) <> TRY_CAST(i_gmpl.[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F4FC73BAF0>"}
{"timestamp": "2025-08-08 10:26:01", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-08 10:26:01", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-08 10:26:06", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify the products with inconsistent MSP pricing between the companies GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-08 10:26:06", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-08 10:26:06", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-08 10:26:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query": "Identify the products and their SKUs that have inconsistent MSP pricing between the companies GMPL and AL."
}"}
{"timestamp": "2025-08-08 10:26:07", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-08 10:26:08", "logger": "app", "level": "ERROR", "message": "LangChain invocation error: [Errno 2] No such file or directory: 'table_relation.yaml'"}
Traceback (most recent call last):
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\main.py", line 1024, in submit_query
    relationships = find_relationships_for_tables(chosen_tables , 'table_relation.yaml')
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Office Work\Autofurnish Dbquery\lzdbquery-v7\newlangchain_utils.py", line 653, in find_relationships_for_tables
    with open(yaml_file_path, 'r', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'table_relation.yaml'
{"timestamp": "2025-08-08 10:29:02", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-08 10:29:03", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-08 10:29:07", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify the products with inconsistent MSP pricing between the companies GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-08 10:29:07", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-08 10:29:07", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-08 10:29:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify the products and their SKUs that have inconsistent MSP pricing between the companies GMPL and AL."
}"}
{"timestamp": "2025-08-08 10:29:08", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-08 10:29:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify the products and their SKUs that have inconsistent MSP pricing between the companies GMPL and AL.', [{'role': 'user', 'content': 'Identify the products and their SKUs that have inconsistent MSP pricing between the companies GMPL and AL.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-08 10:29:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS: []
"}
{"timestamp": "2025-08-08 10:29:09", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Get all active products with their SKU and product name.
  query: SELECT [SKU], [ProductName] FROM [ProductMaster_GMPL] WHERE [IsActive] = 1 AND [IsDeleted] = 0
"}
{"timestamp": "2025-08-08 10:29:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products with inconsistent MSP pricing between the GMPL and AL companies. It joins ProductMaster_AL (alias p_al) and ProductMaster_GMPL (alias p_gmpl) on matching MSKU values and selects the MSKU, product names from both tables, and their MSP prices. It filters for rows where both MSP values are not null and the MSP prices differ after casting to float. The result is limited to the top 1000 records.",
  "query": "SELECT TOP (1000) p_al.[MSKU], p_al.[ProductName] AS AL_ProductName, p_gmpl.[ProductName] AS GMPL_ProductName, p_al.[MSP] AS AL_MSP, p_gmpl.[MSP] AS GMPL_MSP FROM [ProductMaster_AL] AS p_al JOIN [ProductMaster_GMPL] AS p_gmpl ON p_al.[MSKU] = p_gmpl.[MSKU] WHERE p_al.[MSP] IS NOT NULL AND p_gmpl.[MSP] IS NOT NULL AND TRY_CAST(p_al.[MSP] AS FLOAT) <> TRY_CAST(p_gmpl.[MSP] AS FLOAT)",
  "error": null
}"}
{"timestamp": "2025-08-08 10:29:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-08 10:29:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products with inconsistent MSP pricing between the GMPL and AL companies. It joins ProductMaster_AL (alias p_al) and ProductMaster_GMPL (alias p_gmpl) on matching MSKU values and selects the MSKU, product names from both tables, and their MSP prices. It filters for rows where both MSP values are not null and the MSP prices differ after casting to float. The result is limited to the top 1000 records."}
{"timestamp": "2025-08-08 10:29:14", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-08 10:29:14", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) p_al.[MSKU], p_al.[ProductName] AS AL_ProductName, p_gmpl.[ProductName] AS GMPL_ProductName, p_al.[MSP] AS AL_MSP, p_gmpl.[MSP] AS GMPL_MSP FROM [ProductMaster_AL] AS p_al JOIN [ProductMaster_GMPL] AS p_gmpl ON p_al.[MSKU] = p_gmpl.[MSKU] WHERE p_al.[MSP] IS NOT NULL AND p_gmpl.[MSP] IS NOT NULL AND TRY_CAST(p_al.[MSP] AS FLOAT) <> TRY_CAST(p_gmpl.[MSP] AS FLOAT) : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F4FC6C59B0>"}
{"timestamp": "2025-08-08 10:48:31", "logger": "app", "level": "INFO", "message": "Ingesting 15 generic examples into generic_examples"}
{"timestamp": "2025-08-08 10:48:32", "logger": "app", "level": "INFO", "message": "Successfully ingested 15 examples into generic_examples"}
{"timestamp": "2025-08-08 10:48:32", "logger": "app", "level": "INFO", "message": "Ingesting 8 generic examples into usecase_examples"}
{"timestamp": "2025-08-08 10:48:32", "logger": "app", "level": "INFO", "message": "Successfully ingested 8 examples into usecase_examples"}
{"timestamp": "2025-08-08 10:48:33", "logger": "app", "level": "INFO", "message": "Blob service client initialized successfully."}
{"timestamp": "2025-08-08 10:49:24", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-08 10:49:24", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-08 10:49:30", "logger": "app", "level": "INFO", "message": "Endpoint: /, main read route "}
{"timestamp": "2025-08-08 10:49:31", "logger": "app", "level": "INFO", "message": "Endpoint: reset sesion, Question type is: generic"}
{"timestamp": "2025-08-08 10:49:40", "logger": "app", "level": "INFO", "message": "Endpoint:  /submit request with query: Identify the products with inconsistent MSP pricing between the companies GMPL and AL., section: Azure-SQL-DB, database: Azure SQL"}
{"timestamp": "2025-08-08 10:49:40", "logger": "app", "level": "INFO", "message": "Inside /submit request, Chat history: "}
{"timestamp": "2025-08-08 10:49:40", "logger": "app", "level": "INFO", "message": "Inside /submit request and user has chosen  generic."}
{"timestamp": "2025-08-08 10:49:41", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: rephrased query from LLM recieved is: {
  "rephrased_query" : "Identify products where the MSP pricing is inconsistent between the companies GMPL and AL."
}"}
{"timestamp": "2025-08-08 10:49:41", "logger": "app", "level": "INFO", "message": "Inside submit function, generic: chosen tables are: ['AF_OrderItemS_GMPL', 'AmazonListing_GMPL', 'Autofurnish_OrderS_GMPL', 'Company_GMPL', 'Company_AL', 'Company_Mapping_GMPL', 'InventoryDetail_GMPL', 'StatusMaster_GMPL', 'tbl_Amazon_GMPL', 'tbl_AmazonFlex_GMPL', 'tbl_OTCSale_GMPL', 'tbl_Rack_GMPL', 'tbl_Warehouse_GMPL', 'Company_AL', 'Company_Mapping_AL', 'tbl_OTCScale_AL', 'ProductMaster_AL']"}
{"timestamp": "2025-08-08 10:49:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain , parameters are: ('Identify products where the MSP pricing is inconsistent between the companies GMPL and AL.', [{'role': 'user', 'content': 'Identify products where the MSP pricing is inconsistent between the companies GMPL and AL.'}], 'gpt-4.1-mini', 'Azure-SQL-DB', 'Azure SQL')"}
{"timestamp": "2025-08-08 10:49:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : relationship_str: RELATIONSHIPS:
- left_table: Company_mapping_GMPL
  left_columns:
  - CompanyId
  right_table: Company_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: Company mapping to Company (GMPL)
- left_table: tbl_OTCSale_GMPL
  left_columns:
  - ProductID
  right_table: ProductMaster_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: OTC Sale to Product Master (GMPL)
- left_table: tbl_OTCSale_GMPL
  left_columns:
  - CustomerShippingAddress
  right_table: Company_mapping_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: OTC Sale Shipping Address to Company mapping (GMPL)
- left_table: tbl_OTCSale_GMPL
  left_columns:
  - CompanyBillID
  right_table: Company_mapping_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: OTC Sale Billing Company to Company mapping (GMPL)
- left_table: AmazonListing_GMPL
  left_columns:
  - OriginalSku
  right_table: ProductMaster_GMPL
  right_columns:
  - SKU
  cardinality: ManyToOne
  description: Amazon Listing to Product Master (SKU) (GMPL)
- left_table: AmazonListing_GMPL
  left_columns:
  - MSKU
  right_table: ProductMaster_GMPL
  right_columns:
  - MSKU
  cardinality: ManyToOne
  description: Amazon Listing to Product Master (MSKU) (GMPL)
- left_table: tbl_Amazon_GMPL
  left_columns:
  - SKU
  right_table: AmazonListing_GMPL
  right_columns:
  - Sku
  cardinality: ManyToOne
  description: Amazon table to Amazon Listing (GMPL)
- left_table: AF_OrderItemS_GMPL
  left_columns:
  - AFOrderId
  right_table: Autofurnish_OrderS_GMPL
  right_columns:
  - OrderNo
  cardinality: ManyToOne
  description: AutoFurnish Order Items to Orders (GMPL)
- left_table: AF_OrderItemS_GMPL
  left_columns:
  - Lineitem_sku
  right_table: ProductMaster_GMPL
  right_columns:
  - SKU
  cardinality: ManyToOne
  description: AutoFurnish Order Items to Product Master (GMPL)
- left_table: InventoryDetail_GMPL
  left_columns:
  - WarehouseId
  right_table: tbl_Warehouse_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: Inventory to Warehouse (GMPL)
- left_table: InventoryDetail_GMPL
  left_columns:
  - RackId
  right_table: tbl_Rack_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: Inventory to Rack (GMPL)
- left_table: InventoryDetail_GMPL
  left_columns:
  - MSKU
  right_table: ProductMaster_GMPL
  right_columns:
  - MSKU
  cardinality: ManyToOne
  description: Inventory to Product Master (MSKU) (GMPL)
- left_table: InventoryDetail_GMPL
  left_columns:
  - Status
  right_table: StatusMaster_GMPL
  right_columns:
  - Id
  cardinality: ManyToOne
  description: Inventory to Status Master (GMPL)
- left_table: tbl_Rack_GMPL
  left_columns:
  - WarehouseId
  right_table: tbl_Warehouse_GMPL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: Rack to Warehouse (GMPL)
- left_table: Company_mapping_AL
  left_columns:
  - CompanyId
  right_table: Company_AL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: Company mapping to Company (AL)
- left_table: tbl_OTCSale_AL
  left_columns:
  - ProductID
  right_table: ProductMaster_AL
  right_columns:
  - ID
  cardinality: ManyToOne
  description: OTC Sale to Product Master (AL)
"}
{"timestamp": "2025-08-08 10:49:42", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : examples_str : Example 1:
  input: Show warehouse-wise inventory value (sum of MSP) for each product category.
  query: SELECT w.[Name] AS Warehouse, p.[Category1] AS Category, SUM(i.[MSP]) AS TotalValue FROM [InventoryDetail_GMPL] i JOIN [tbl_Warehouse_GMPL] w ON i.[WarehouseId] = w.[ID] JOIN [ProductMaster_GMPL] p ON i.[MSKU] = p.[MSKU] WHERE i.[IsOut] = 0 GROUP BY w.[Name], p.[Category1] ORDER BY Warehouse, TotalValue DESC

Example 2:
  input: Find products that are in inventory but have not been sold.
  query: SELECT p.[SKU], p.[ProductName] FROM [ProductMaster_GMPL] p JOIN [InventoryDetail_GMPL] i ON p.[MSKU] = i.[MSKU] LEFT JOIN [tbl_OTCSale_GMPL] o ON p.[ID] = o.[ProductID] LEFT JOIN [tbl_Amazon_GMPL] a ON p.[SKU] = a.[SKU] LEFT JOIN [AF_OrderItemS_GMPL] af ON p.[SKU] = af.[Lineitem_sku] WHERE o.[OTCID] IS NULL AND a.[BillID] IS NULL AND af.[Id] IS NULL GROUP BY p.[SKU], p.[ProductName]
"}
{"timestamp": "2025-08-08 10:49:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : response from azure LLM: {
  "description": "This query identifies products where the MSP (Minimum Selling Price) differs between the GMPL and AL companies. It joins the ProductMaster_GMPL and ProductMaster_AL tables on the MSKU column and compares the MSP values after casting them to float. The output includes the MSKU, product names from both companies, and their respective MSP values.",
  "query": "SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT) ORDER BY gmpl.[MSKU]",
  "error": null
}"}
{"timestamp": "2025-08-08 10:49:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain :LLM SQL Generation Error: None"}
{"timestamp": "2025-08-08 10:49:46", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain --> get_chain : Description: This query identifies products where the MSP (Minimum Selling Price) differs between the GMPL and AL companies. It joins the ProductMaster_GMPL and ProductMaster_AL tables on the MSKU column and compares the MSP values after casting them to float. The output includes the MSKU, product names from both companies, and their respective MSP values."}
{"timestamp": "2025-08-08 10:49:46", "logger": "app", "level": "INFO", "message": "in if of azure sql"}
{"timestamp": "2025-08-08 10:49:50", "logger": "app", "level": "INFO", "message": "submit query --> invoke_chain : result after executing 
SELECT TOP (1000) gmpl.[MSKU], gmpl.[ProductName] AS GMPL_ProductName, al.[ProductName] AS AL_ProductName, gmpl.[MSP] AS GMPL_MSP, al.[MSP] AS AL_MSP FROM [ProductMaster_GMPL] AS gmpl JOIN [ProductMaster_AL] AS al ON gmpl.[MSKU] = al.[MSKU] WHERE TRY_CAST(gmpl.[MSP] AS FLOAT) <> TRY_CAST(al.[MSP] AS FLOAT) ORDER BY gmpl.[MSKU] : 
<sqlalchemy.engine.cursor.CursorResult object at 0x000001F4FC6C55C0>"}
